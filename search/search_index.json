{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Enterprise Azure Policy as Code Overview","text":"<p>Enterprise Azure Policy as Code (EPAC for short) is a number of PowerShell scripts which can be used in CI/CD based system or a semi-automated use to deploy Policies, Policy Sets, Policy Assignments, Policy Exemptions and Role Assignments. It also contains operational scripts to simplify operational tasks.</p>"},{"location":"#latest-updates","title":"Latest Updates","text":"<p>For all EPAC changes and newest updates, please visit our GitHub Releases Page.</p> <p>Caution</p> <p>Review the Breaking changes in v10.0.0 carefully to avoid issues with your EPAC instance. The changes are documented here.</p> <p>Important</p> <p>Starting with v8.0.0, Enterprise Policy as Code (EPAC) is tracking the usage using Customer Usage Attribution. In accordance with Microsoft's privacy policies, you have the right to opt-out of this tracking. Please review Telemetry below and Microsoft Privacy for more information.</p>"},{"location":"#benefits-of-epac","title":"Benefits of EPAC","text":"<ul> <li>Single and multi-tenant policy deployment</li> <li>Easy CI/CD Integration with any CI/CD tool</li> <li>Extract existing Policy resources from an environment</li> <li>PowerShell Module or consume source code from GitHub</li> <li>Deployment scripts to deploy Policy resources and Role Assignments</li> <li>Deployments are sequenced based on the dependencies between the different Policy resources</li> <li>Operational scripts to simplify operational tasks</li> <li>Integration with Azure Landing Zone recommended policies</li> <li>Starter Kit with examples.</li> </ul> <p>Caution</p> <p>EPAC is a true desired state deployment technology. It takes possession of all Policy Resources at the <code>deploymentRootScope</code> and its children. It will delete any Policy resources not defined in the EPAC repo. This behavior can be modified as documented in the desired state strategy page.</p>"},{"location":"#who-should-use-epac","title":"Who Should use EPAC?","text":"<p>EPAC is designed for medium and large organizations with a larger number of Policies, Policy Sets and Assignments and/or complex deployment scenarios, such as, multiple tenants, multiple teams managing Policies.</p> <p>Tip</p> <p>EPAC provides a mature integration with Azure Landing Zones. Utilizing Azure Landing Zones together with EPAC is highly recommended.</p>"},{"location":"#smaller-organizations","title":"Smaller Organizations","text":"<ul> <li>While designed for medium and large Enterprises, EPAC can and should be used by small organizations implementing fully-automated DevOps deployments of every Azure resource (known as Infrastructure as Code). Your DevOps maturity level will be well suited for EPAC.</li> <li>If your DevOps (CI/CD) maturity is lower, Azure Landing Zones direct implementation of Policies might be a better choice.</li> <li>For extremely small Azure customers with one or two subscriptions Microsoft Defender for Cloud automated Policy Assignments for built-in Policies is sufficient.</li> </ul>"},{"location":"#project-links","title":"Project Links","text":"<ul> <li>GitHub Repo</li> <li>GitHub Issues</li> <li>Starter Kit</li> <li>Hydration Kit</li> <li>Enterprise Policy as Code PowerShell Module</li> <li>Azure Enterprise Policy as Code \u2013 A New Approach</li> <li>Azure Enterprise Policy as Code \u2013 Azure Landing Zones Integration</li> </ul>"},{"location":"#deployment-scripts","title":"Deployment Scripts","text":"<p>Three deployment scripts plan a deployment, deploy Policy resources, and Role Assignments respectively as shown in the following diagram. The solution consumes definition files (JSON and/or CSV files). The planning script (<code>Build-DeploymentPlan</code>) creates plan files (<code>policy-plan.json</code> and <code>roles-plan.json</code>) to be consumed by the two deployment scripts (<code>Deploy-PolicyPlan</code> and <code>Deploy-RolesPlan</code>). The scripts require <code>Reader</code>, <code>Resource Policy Contributor</code> and <code>Role Based Access Administrator</code> privileges respectively as indicated in blue text in the diagram. The diagram also shows the usual approval gates after each step/script for prod deployments.</p> <p></p> <p></p>"},{"location":"#operational-scripts","title":"Operational Scripts","text":"<p>The solution contains operational scripts to manage Policy operations.</p>"},{"location":"#enterprise-policy-as-code-azadvertizer-and-azgovviz","title":"Enterprise Policy as Code, AzAdvertizer and AzGovViz","text":"<p>Enterprise Policy-as-Code (EPAC), AzAdvertizer and Azure Governance Visualizer (AzGovViz) are three distinct open source projects or tools internally developed and maintained by Microsoft employees, each helping address different needs in enterprise scale management and governance of Azure environments.</p> <ul> <li> <p>AzAdvertizer - AzAdvertizer is a publicly accessible web service that provides continually up-to-date insights on new releases and changes/updates for different Azure Governance capabilities such as Azure Policy's built-in policy and initiative (policy set) definitions, Azure aliases, Azure security &amp; regulatory compliance controls, Azure RBAC built-in role definitions and Azure resource provider operations.</p> </li> <li> <p>Azure Governance Visualizer (AzGovViz) - AzGovViz is an open source community project that provides visualization and reporting solution for any customer Azure environments, delivering a rich set of detailed insights covering tenant management group hierarchies, RBAC assignments, Azure policy assignments, Blueprints, Azure network topology and much more. AzGovViz is listed as recommended tool in use for both Microsoft Cloud Adoption Framework (CAF) and Microsoft Well Architected Framework (WAF).</p> </li> <li> <p>Enterprise Policy-as-Code (EPAC) - EPAC is an open source community project that provides a CI/CD automation solution for the development, deployment, management and reporting of Azure policy at scale. EPAC can maintain a policy \"desired state\" to provide a high level of assurance in highly controlled and sensitive environments, and a means of managing policy exemptions. While it uses standard JSON file structure for its repositories, operation and maintenance of policy and policy sets can actually be done via CSV files, reducing the skill expertise needed to operate the solution once implemented.</p> </li> </ul>"},{"location":"#telemetry-tracking-using-customer-usage-attribution-pid","title":"Telemetry Tracking Using Customer Usage Attribution (PID)","text":"<p>Microsoft can identify the deployments of the Azure Resource Manager with the deployed Azure resources. Microsoft can correlate these resources used to support the deployments. Microsoft collects this information to provide the best experiences with their products and to operate their business. The telemetry is collected through customer usage attribution. The data is collected and governed by Microsoft's privacy policies; for details see Privacy at Microsoft.</p>"},{"location":"#opt-out-of-telemetry-data-collection-telemetryoptout","title":"Opt out of telemetry data collection <code>telemetryOptOut</code>","text":"<p>To opt-out of this tracking, we have included a settings in <code>global-settings.jsonc</code> called <code>telemetryOptOut</code>. If you would like to disable this tracking, then simply set this value to <code>true</code> (default is <code>false</code>).</p> <p>If you are happy with leaving telemetry tracking enabled, no changes are required.</p>"},{"location":"#module-pid-value-mapping","title":"Module PID Value Mapping","text":"<p>The following is the unique IDs (also known as PIDs) used in each of the modules:</p> Function Name PID <code>Deploy-PolicyPlan</code> <code>3c88f740-55a8-4a96-9fba-30a81b52151a</code> <code>Deploy-PolicyPlan</code> <code>fe9ff1e8-5521-4b9d-ab1d-84e15447565e</code> <code>Deploy-RolesPlan</code> <code>cf031290-b7d4-48ef-9ff5-4dcd7bff8c6c</code> <code>Build-PolicyDocumentation</code> <code>2dc29bae-2448-4d7f-b911-418421e83900</code> <code>New-AzRemediationTasks</code> <code>6f4dcbef-f6e2-4c29-ba2a-eef748d88157</code> <code>Export-AzPolicyResources</code> <code>dc5b73fd-e93c-40ca-8fef-976762d1d30</code> <code>Export-NonComplianceReports</code> <code>f464b017-898b-4156-9da5-af932831fa2f</code> <code>Get-AzExemptions</code> <code>3f02e7d5-1cf5-490a-a95c-3d49f0673093</code> <code>New-AzPolicyReaderRole</code> <code>f4b5b7ac-70b4-40fc-836f-585791aa83e7</code> <code>Sync-ALZPolicies</code> <code>a5e82cd0-9dda-417b-948c-68ec81596c32</code>"},{"location":"#support","title":"Support","text":"<p>Please raise issues via the GitHub repository using the templates provided.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>This project welcomes contributions and suggestions. Contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.</p> <p>When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.</p> <p>This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.</p>"},{"location":"#trademarks","title":"Trademarks","text":"<p>This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark &amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to the third-party's policies.</p>"},{"location":"ci-cd-ado-pipelines/","title":"Azure DevOps Pipelines","text":"<p>This page covers the specifics for the Azure DevOps (ADO) pipelines created by using the Starter Kit. Pipelines can be further customized based on requirements. Guidance provided is for the simplified GitHub Flow as documented in the branching flows. Documentation on the Release Flow pipelines will be made available in a future release.</p> <p>Note</p> <p>To find all examples of Azure DevOps Pipelines, please visit StarterKit/Pipelines/AzureDevOps.</p> <p>App Registration Setup is a pre-requisite.</p>"},{"location":"ci-cd-ado-pipelines/#service-connections-for-the-service-principals","title":"Service connections for the Service Principals","text":"<p>Create ADO service connections for each of the previously created App Registrations. You will need to retrieve the credential for the Service Principal that Azure Devops will use for Authentication. This can be either a Client Secret, a X509 certificate, or a Federated Credential. For more information on these options, refer to the Application Credentials.</p>"},{"location":"ci-cd-ado-pipelines/#pipeline-templates","title":"Pipeline Templates","text":"<p>The provided Azure DevOps pipelines utilize the template functionality to create re-usable components that are shared between pipeline files. More details on Azure DevOps Pipelines Templates can be found in the Azure DevOps Documentation</p>"},{"location":"ci-cd-ado-pipelines/#github-flow-pipeline","title":"GitHub Flow Pipeline","text":"<p>If utilizing the GitHub flow branching strategy, three pipeline files are created</p> <ul> <li>epac-dev-pipeline</li> <li>epac-tenant-pipeline</li> <li>epac-remediation-pipeline</li> </ul>"},{"location":"ci-cd-ado-pipelines/#epac-dev-pipeline","title":"epac-dev-pipeline","text":"<p>This represents the Develop Policy Resources in a Feature Branch flow as described in Branching Flows. In general, The EPAC-Dev pipeline is configured to run when any change is pushed to a <code>feature/*</code> branch. It runs across three (3) stages: Plan, Deploy &amp; Tenant Plan.</p>"},{"location":"ci-cd-ado-pipelines/#epac-tenant-pipeline","title":"epac-tenant-pipeline","text":"<p>This represents the Simplified <code>GitHub Flow</code> for Deployment as described in Branching Flows. In general, The epac-tenant-pipeline is configured to run when any change is pushed to main and runs across three (3) stages: Plan, Deploy Policy &amp; Deploy Roles. The Deploy stages utilize Azure DevOps environments to configure approval gates</p>"},{"location":"ci-cd-ado-pipelines/#epac-remediation-pipeline","title":"epac-remediation-pipeline","text":"<p>This pipeline runs on a schedule to automatically start remediation tasks for each environment.</p>"},{"location":"ci-cd-app-registrations/","title":"App Registration &amp; Service Principal Setup","text":"<p>The EPAC CI/CD pipelines/workflows utilize Entra ID (Azure AD) Service Principals as the identity to interact with your Azure environment. This section describes the recommended approach for utilizing service principals with EPAC. For general information on Service Principals, please review the Microsoft Documentation</p> <p>Important</p> <p>Please review the EPAC Deployment Concepts before proceeding as the following guidance builds upon the EPAC Environment Construct</p>"},{"location":"ci-cd-app-registrations/#recommended-service-principals","title":"Recommended Service Principals","text":"<p>To help maintain a segmentation of duties and a least-privilege approach, it is recommended to create separate service principals for each of the general deployment steps.</p> <ul> <li>Build Deployment Plans<ul> <li>A single service principal should be created for the plan steps across all EPAC environments. This Service Principal should be assigned the <code>Reader</code> Azure RBAC role at the Tenant Root.</li> <li>Note: For Multi-Tenant environments, each tenant will need a Plan Service Principal.</li> </ul> </li> <li>Policy Deployment (Per EPAC Environment)<ul> <li>Each EPAC Environment should have a separate service principal with the Azure RBAC Role <code>Resource Policy Contributor</code> assigned at the EPAC environment root. This Service Principal will be used for the policy deployment phase.</li> </ul> </li> <li>Role Deployment (Per EPAC Environment)<ul> <li>Each EPAC Environment should have a separate service principal with the Azure RBAC Role <code>Role Based Access Control Administrator</code> assigned at the EPAC environment root. This service Principal will be used for the Azure RBAC role assignment phase.</li> </ul> </li> </ul> <p>Tip</p> <p>For the EPAC Development Environment, a single service principal can be used for both the Policy Deployment &amp; Role Deployment to simplify management. While it is recommended to separate these to maintain a separation of duties and enable additional security controls, the nature and isolation of the EPAC Development environment does not create the need for separation. Note: If you wish to use a single Service Principal for EPAC Development, both role assignments are still required.</p> <p>Tip</p> <p>To further improve security posture, conditions can be used for the RBAC assignment for each role deployment service principal to restrict the assignment of privileged roles such as <code>Owner</code>, <code>User Access Admin</code> and <code>Role Based Access Control Administrator</code>. In general, policy assignments should never require the use of an additional role assignment that will create other role assignments. For more information on conditions for role assignments, please refer to the Azure RBAC Documentation</p>"},{"location":"ci-cd-app-registrations/#create-service-principals","title":"Create Service Principals","text":"<p>For guidance creating Service Principals in Entra ID, please refer to the [Entra ID Documentation](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#register-an-application-with-microsoft-entra-id-and-create-a-service-principal</p>"},{"location":"ci-cd-app-registrations/#assign-service-principals-permissions-in-azure","title":"Assign Service Principals Permissions in Azure","text":"<p>For guidance assigning Service Principals Azure RBAC roles, please refer to the Azure RBAC Documentation</p>"},{"location":"ci-cd-app-registrations/#example-setup","title":"Example Setup","text":"<p>Given the following screenshot of a Management Group hierarchy for Contoso.</p> <p></p> <p>Contoso has decided to utilize two EPAC Environments. One for EPAC Development (EPAC-Dev) and one for the remainder of their environment (Tenant), which has resulted the following global settings file:</p> <pre><code>{\n    \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/global-settings-schema.json\",\n    \"pacOwnerId\": \"{{guid}}\",\n    \"pacEnvironments\": [\n        {\n            \"pacSelector\": \"epac-dev\",\n            \"cloud\": \"AzureCloud\",\n            \"tenantId\": \"{{tenant-id}}\",\n            \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/epac-contoso\"\n        },\n        {\n            \"pacSelector\": \"tenant\",\n            \"cloud\": \"AzureCloud\",\n            \"tenantId\": \"{{tenant-id}}\",\n            \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/contoso\"\n        }\n    ]\n}\n</code></pre> <p>The following Service Principals &amp; Role assignments would be created to support this structure:</p> Service Principal Azure Role Assignment Assignment Scope spn-epac-plan Reader Tenant Root Group spn-epac-dev Resource Policy Contributor  Role Based Access Control Administrator epac-contoso spn-epac-tenant-deploy Resource Policy Contributor Contoso spn-epac-tenant-roles Role Based Access Control Administrator Contoso"},{"location":"ci-cd-app-registrations/#application-credentials","title":"Application Credentials","text":"<p>Credentials will need to be created for each Service Principal to be used in the CI/CD process. Traditionally, this is accomplished by creating a Client Secret on the associated Entra ID Application, and providing the CI/CD tool with the Application's ID and Secret. Secrets present an automation challenge as they need to be managed, secured, and rotated as they eventually expire. To solve this, some tools, including Azure DevOps, now support the use of Federated Credentials as described below.</p>"},{"location":"ci-cd-app-registrations/#azure-federated-identity-credentials","title":"Azure Federated Identity Credentials","text":"<p>Federated identity credentials are a new type of credential that enables workload identity federation for software workloads. Workload identity federation allows you to access Microsoft Entra protected resources without needing to manage secrets (for supported scenarios).</p> <p>Within your Registered App create a <code>Federated Credential</code></p> <p></p> <p>(Example below is for a GitLab Implementation) </p> <p><code>Federated credential scenario</code> \u2014 List of supported Scenarios for leveraging Federated Credentials. </p> <p><code>Audience</code> \u2014 The audience that can appear in the external token. This field is mandatory and should be set to <code>api://AzureADTokenExchange</code> for Microsoft Entra ID. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Microsoft Entra ID in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token.</p> <p><code>Issuer</code> \u2014 The URL of the external identity provider. Must match the issuer claim of the external token being exchanged.</p> <p><code>Subject identifier</code> \u2014 The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Microsoft Entra ID.</p>"},{"location":"ci-cd-branching-flows/","title":"Branching Overview","text":"<p>The following section covers two branching strategies for EPAC that are supported by the starter kits - <code>GitHub Flow</code> and <code>Release Flow</code>. Both strategies follow their respective general guidance as documented for GitHub Flow, and Release Flow, however, the method you choose may be dependent on the EPAC environment structure you choose to use. In general, <code>GitHub Flow</code> is recommended for simple EPAC deployments that contain an EPAC Development Environment and a Main/Tenant Environment. If you wish to utilize multiple additional environments, and/or deploy to those environments in a staged/ring-based fashion (Deploy to Environment A then Deploy to Environment B), the <code>Release Flow</code> model may provide greater flexibility.</p> <p>Important</p> <p>Please review the App Registrations Setup for information on the permissions and Service Principals (SPNs) recommended for deployments.</p>"},{"location":"ci-cd-branching-flows/#develop-policy-resources-in-a-feature-branch","title":"Develop Policy Resources in a Feature Branch","text":"<p>Developing Policy resources is the same for <code>GitHub Flow</code> and <code>Release Flow</code>. The following steps are recommended:</p> <ol> <li>Developers create feature branches from <code>main</code> branch with a name <code>feature/*user-id*/*feature-name*</code>.</li> <li>Developers create or update Policy definitions, Policy Set definitions, Policy Assignment, and Policy Exemptions files in the <code>Definitions</code> folder. Developers push changes to the feature branch.</li> <li>A \"Development\" CI/CD pipeline/action is triggered from the push to the feature branch. This pipeline will perform the following steps:<ul> <li>Build Deployment Plans for the EPAC Development Environment (e.g. <code>EPAC-Dev</code>), showing any changes made.</li> <li>Deploy Policy Plans to the EPAC Development Environment (e.g. <code>EPAC-Dev</code>), providing an end-to-end test in development and allowing developers to validate the changes.</li> <li>Deploy Policy Roles to the EPAC Development Environment (e.g. <code>EPAC-Dev</code>) to create the role assignments for the Managed Identities required for any <code>DeployIfNotExists</code> and <code>Modify</code> Policies.</li> <li>Build Deployment Plans for all remaining environments (e.g. <code>Prod</code>). This accounts for a \"Shift-Left\" deployment mindset and helps validate changes against the other environments to surface any potential issues as the change is rolled out past the EPAC Development environment. The Plans are stored in the <code>Output</code> folder.</li> </ul> </li> <li>When the feature is ready, the developer creates a Pull Request (PR) to merge the feature branch into the <code>main</code> branch.</li> <li>Set the pull request to be auto completed. Ensure that you select <code>Delete feature/*user-id*/*feature-name* after merging</code>.</li> </ol> <p></p> <ol> <li>After the merge completes, cleanup your local clone by:<ul> <li>Switching the branch to main</li> <li>Pull the latest changes from main</li> <li>Delete the feature branch</li> <li>Run <code>git remote prune origin</code> to remove the remote tracking branch.</li> </ul> </li> </ol> <p>Steps 1 to 3 are repeated during the development process. In both models, this helps ensure short lived feature branches, with a constant push to <code>main</code>, while providing a baseline validation of the change against all environments.</p>"},{"location":"ci-cd-branching-flows/#simplified-github-flow-for-deployment","title":"Simplified <code>GitHub Flow</code> for Deployment","text":"<p>The diagram below shows the use of GitHub Flow in Policy as Code. The diagram uses GitHub workflow terminology; however, the concepts apply equally to other CI/CD technologies.</p> <p>Once Development is completed, as noted above, the merge of the PR into the <code>main</code> branch triggers the CI/CD pipeline/action to deploy the changes to the main environment. The following steps are recommended:</p> <ul> <li>Build Deployment Plans for the Prod Environment (e.g. <code>Prod</code>), showing any changes made.</li> <li>Approval gate for Policy resources deployment.</li> <li>Deploy Policy Plans to the Prod Environment (e.g. <code>Prod</code>)</li> <li>Approval gate for Role assignments deployment.</li> <li>Deploy Policy Roles to the Prod Environment (e.g. <code>Prod</code>) to create the role assignments for the Managed Identities required for any <code>DeployIfNotExists</code> and <code>Modify</code> Policies.</li> </ul> <p></p>"},{"location":"ci-cd-branching-flows/#github-flow-variations","title":"<code>GitHub Flow</code> Variations","text":"<p>EPAC can handle any flow you like. For <code>GitHub Flow</code>, the following variations are possible.</p> <ul> <li>Adding a deployment plan from the feature branch to the production environment in step 3 above during the development process (see steps 1 through 3 in the diagram above) by adding a step using Build-DeploymentPlans.ps1. This is useful to test the deployment plan in the production environment before creating a PR. We recommend using a separate SPN for this step (job).</li> <li>PR creation trigger for a CI/CD pipeline/action deploying the changes to an <code>epac-test</code> environment with the same steps as the deployment to <code>epac-dev</code> environment in steps 3 above.</li> </ul>"},{"location":"ci-cd-branching-flows/#advanced-deployment-with-release-flow","title":"Advanced Deployment with Release Flow","text":"<p>In some cases, especially when using multiple EPAC Environments, it may be desirable to deploy the Policy changes in a ring-based model, deploying to one environment before deploying to all remaining environments. This can help limit risk and impact should an update cause unintended issues. While there are many ways to implement a ring-based deployment, the Release Flow branching strategy as described below, can be an effective model with EPAC. For the following, lets assume Contoso has three (3) EPAC environments, <code>EPAC-Dev</code>, <code>nonprod</code>, and <code>prod</code>. They wish to deploy all policy changes as soon as they are ready into the <code>nonprod</code> environment, while waiting to deploy to <code>prod</code> and batching deployments into larger \"releases\" once they are sure there are no impacts.</p> <ul> <li>Initial policy development follows the same process as outlined in Develop Policy Resources in a Feature Branch above.</li> <li>The merge of the PR into the <code>main</code> branch triggers a NonProd specific CI/CD pipeline/action to deploy the changes to the EPAC <code>nonprod</code> environment. This pipeline would follow the general deployment steps, but targeted only to the <code>nonprod</code> EPAC environment.</li> <li>Build Deployment Plans for the nonprod Environment (e.g. <code>nonprod</code>), showing any changes made.</li> <li>Approval gate for Policy resources deployment.</li> <li>Deploy Policy Plans to the nonprod Environment (e.g. <code>nonprod</code>)</li> <li>Approval gate for Role assignments deployment.</li> <li>Deploy Policy Roles to the nonprod Environment (e.g. <code>nonprod</code>) to create the role assignments for the Managed Identities required for any <code>DeployIfNotExists</code> and <code>Modify</code> Policies.</li> <li>Wait to verify that the Policies in the EPAC <code>nonprod</code> environment are working as expected, and/or wait for additional policies/development cycles to finish.</li> <li>Create a <code>releases-prod</code> branch to trigger a Prod specific CI/CD pipeline/action to deploy the changes to the EPAC <code>prod</code> environment. The pipeline would follow the same general deployment steps as the nonprod pipeline, but targeted to the <code>prod</code> EPAC environment.</li> <li>Keep n-1 <code>releases-prod</code> branches to allow for quick rollback in case of issues.</li> <li>Sometimes, Exemptions need to be granted while keeping a regular lifecycle for Definitions and Assignments. To accomplish this, follow the general steps below:</li> <li>The exemption should be committed to <code>main</code> through the standard development process. This is critical as it provides the standard development plans to run, ensures a code review, and guarantees the change is in <code>main</code> so it does not re-occur in future deployments</li> <li>Once merged to <code>main</code> use the PR page to cherry-pick the changes into the active <code>releases-prod</code> branch, which creates a new pull request. This ensures traceability and allows for approval before the change is deployed. </li> <li>This process is documented in further detail on the Microsoft Release Flow Documentation</li> </ul> <p></p>"},{"location":"ci-cd-branching-flows/#release-flow-variations","title":"<code>Release Flow</code> Variations","text":"<p>EPAC can handle any flow you like. For <code>Release Flow</code>, the following variations are possible.</p> <ul> <li>Adding a deployment plan from the feature branch to the production environment in step 3 above during the development process (see steps 1 through 3 in the diagram above) by adding a step using Build-DeploymentPlans.ps1. This is useful to test the deployment plan in the production environment before creating a PR. We recommend using a separate SPN for this step (job).</li> <li>PR creation trigger for a CI/CD pipeline/action deploying the changes to an <code>epac-test</code> environment with the same steps as the deployment to <code>epac-dev</code> environment in steps 3 above.</li> </ul>"},{"location":"ci-cd-branching-flows/#multiple-tenants","title":"Multiple Tenants","text":"<p>For multiple tenants simply apply each of the flows (except for the <code>feature</code> branch) above to each tenant's EPAC environments. This works for both simplified GitHub flow and Microsoft Release flow.</p>"},{"location":"ci-cd-github-actions/","title":"Github Actions","text":"<p>This page covers the specifics for the GitHub Actions pipelines created by using the Starter Kit. Pipelines can be further customized based on requirements. We have revised our approach to GitHub Actions simplifying the process and make it easier to understand. The new approach is documented below and is included in the starter kit with v8.5 and later.</p> <p>Note</p> <p>To find all examples of GitHub Actions Pipelines, please visit StarterKit/Pipelines/GitHubActions.</p> <p>The previous version is still available in the starter kit in folder <code>Legacy</code> and the documentation is retained at the end of this page.</p>"},{"location":"ci-cd-github-actions/#setup-in-github","title":"Setup in GitHub","text":""},{"location":"ci-cd-github-actions/#create-github-deployment-environments","title":"Create GitHub Deployment Environments","text":"<p>Create two labels in the project called <code>PolicyDeployment</code> and <code>RoleDeployment</code>. Instructions to create new labels are here.</p> <p>You will need one GitHub deployment environment for the <code>epac-dev</code> workflow and three environments each for your epac-prod or tenant workflows. This documentation assumes the use of the included starter kit pipelines.</p> Environment Purpose App Registration (SPN) EPAC-DEV Plan and deploy to <code>epac-dev</code> ci-cd-epac-dev-owner TENANT-PLAN Build deployment plan for <code>tenant</code> ci-cd-root-policy-reader TENANT-DEPLOY-POLICY Deploy Policy resources for <code>tenant</code> ci-cd-root-policy-contributor TENANT-DEPLOY-ROLES Deploy Roles for <code>tenant</code> ci-cd-root-user-assignments <p>Add the environment secrets for the Service Principal listed below to the GitHub repository. These are used to authenticate to Azure, and should be added to each Environment listed above.</p> Secret Name Value AZURE_CLIENT_ID Application ID for SPN AZURE_TENANT_ID Azure AD Tenant"},{"location":"ci-cd-github-actions/#hardening-each-environment","title":"Hardening each Environment","text":"<ul> <li>Global setting for the repo: protect the <code>main</code> branch with branch protection rules.</li> <li>Configure required reviewers for TENANT-DEPLOY-POLICY and TENANT-DEPLOY-ROLES environments.</li> <li>Restrict branch to <code>main</code> branch for TENANT-DEPLOY-POLICY and TENANT-DEPLOY-ROLES environments.</li> <li>Do not allow administrators to bypass configured protection rules for TENANT-DEPLOY-POLICY and TENANT-DEPLOY-ROLES environments.</li> </ul>"},{"location":"ci-cd-github-actions/#legacy-github-cicd-workflows","title":"Legacy GitHub CI/CD Workflows","text":"<p>This section is retained from the previous documentation to enable you to continue using the previous approach. It is recommended that you migrate to the new approach as soon as possible.</p>"},{"location":"ci-cd-github-actions/#action-flow-legacy","title":"Action Flow -- Legacy","text":"<ol> <li>Changes are made to files in the Definitions folder (e.g. new policy definition/assignment, removing files) and pushed to GitHub</li> <li>The <code>Build Deployment Plan</code> action is triggered. This runs the <code>Build-DeploymentPlans</code> function against the environment specified in the <code>pacEnvironment</code> variable in <code>global-settings.jsonc</code></li> <li>If there are changes detected the plan is committed to a new branch and a pull request is created. A label of <code>PolicyDeployment</code> is attached and a reviewer is added.</li> <li>At this stage you can browse the plan created by the action before approving. It is important to not merge this branch as it will remove the <code>.gitignore</code> file from the base branch and will cause the <code>Output</code> folder to be permanently committed to the project.</li> <li>If the changes are ready to be deployed - the pull request must be approved.</li> <li>The approval action will start the <code>Deploy Policy Plan and Roles</code> workflow.</li> <li>The policy plan will be deployed using <code>Deploy-RolesPlan</code>. When this is complete one of two things can happen.<ul> <li>If there are no role changes to be processed the PR is closed (not merged) and the branch containing the plan is deleted. (End of process)</li> <li>If there are role changes a label of <code>RoleDeployment</code> is added - and the reviewer is removed and re-added. This triggers another review on the pipeline which must be approved before role changes are deployed.</li> </ul> </li> <li>For role changes when the PR is approved again the same action runs - this time using the <code>Deploy-RolesPlan</code> for deployment.</li> <li>When complete the PR is closed and the branch containing the plan is deleted.</li> </ol>"},{"location":"ci-cd-github-actions/#setup-in-github-legacy","title":"Setup in GitHub -- Legacy","text":"<p>There are some steps to be performed in GitHub to ensure the action runs correctly.</p> <ol> <li>Create two labels in the project called <code>PolicyDeployment</code> and <code>RoleDeployment</code>. Instructions to create new labels are here.</li> <li> <p>An Environment should be created for each SPN created</p> Secret Name Value AZURE_CLIENT_ID Application ID for SPN AZURE_TENANT_ID Azure AD Tenant </li> <li> <p>In the <code>.github\\workflows\\build.yaml</code> and <code>.github\\workflows\\deploy.yaml</code> file updated the <code>env:</code> section as below.</p> Environment Variable Name Value Notes REVIEWER Add a GitHub user to review the PR definitionsRootFolder The folder containing <code>global-settings.jsonc</code> and definitions pacEnvironment The policy as code environment specified in <code>global-settings.jsonc</code> planFolder A folder that plans will be saved to and deployed from Must be the same folder in <code>deploy.yaml</code> </li> <li> <p>In the <code>.github\\workflows\\build.yaml</code> and <code>.github\\workflows\\deploy.yaml</code> file updated the trigger's path setting to ensure it is triggered when a file change is made.</p> </li> </ol>"},{"location":"ci-cd-github-actions/#skipping-a-workflow-run-legacy","title":"Skipping a Workflow Run -- Legacy","text":"<p>To skip the workflow run add a file called <code>NO_ACTIONS</code> in the definitions folder. An action will be started on push however the build will not occur.</p>"},{"location":"ci-cd-github-actions/#generating-build-results-only-legacy","title":"Generating Build Results Only -- Legacy","text":"<p>If you want to run just the <code>Build-DeploymentPlans</code> but not save the output - add a file called <code>NO_DEPLOY</code>. This will run the build step and then cancel the action. You can review the summary output by checking the logs in the cancelled action.</p>"},{"location":"ci-cd-overview/","title":"CI/CD Overview","text":"<p>Since EPAC is based on PowerShell scripts, any CI/CD tool with the ability to execute scripts can be used. The starter kits currently include pipeline definitions for Azure DevOps and GitHub Actions. Additional starter kits are being implemented and will be added in future releases.</p> <p>The authors are interested in supporting other deployment pipelines. If you have developed pipelines for other technologies, such as GitLab, Jenkins, etc., please contribute them to the project as additional starter kits.</p> <p>This repository contains starter pipelines and instructions for can be found here:</p> <ul> <li>Azure DevOps Pipelines</li> <li>GitHub Actions</li> </ul>"},{"location":"ci-cd-overview/#general-epac-deployment-steps","title":"General EPAC Deployment Steps","text":"<p>EPAC has three major steps in the Deployment process for each environment. - Build Deployment Plans - Policy Deployment - Role Deployment</p> <p>Each step can be called by using the <code>EnterprisePolicyAsCode</code> PowerShell module (recommended), or calling the script directly. For more details on EPAC installation options, please refer to the Start Implementation section.</p> <p>Tip</p> <p>EPAC is declarative and idempotent: this means, that regardless how many times it is run, EPAC will always push all changes that were implemented in the JSON files to the Azure environment, i.e. if a JSON file is newly created/updated/deleted, EPAC will create/update/delete the Policy and/or Policy Set and/or Policy Assignments definition in Azure. If there are no changes, EPAC can be run any number of times, as it won't make any changes to Azure.</p>"},{"location":"ci-cd-overview/#build-deployment-plans","title":"Build Deployment Plans","text":"<p>Analyzes changes in Policy definition, Policy Set definition, Policy Assignment &amp; Policy Exemption files for a given environment. It calculates and displays any deltas, while creating the deployment plan(s) to apply any changes. A \"Policy Plan\" will be created for use by the Policy Deployment step if any changes are found to the policy objects, assignments, or exemptions while a \"Role Plan\" will be created for use by the Role deployment step should there be any changes to role assignments for the deployed policies. If no changes are found, no plans are created.</p> <p>For saving the output related to <code>Build-DeploymentPlans</code> there is global variable called <code>$epacInfoStream</code> which captures all output from the commands. If required, this can be used as a PR message or to present a summary of the plan.</p> <p>Deployment Mechanism</p> Deployment Mode Command/Script Module (Recommended) Build-DeploymentPlans Script Build-DeploymentPlans.ps1 <p>Parameters</p> Parameter Explanation <code>PacEnvironmentSelector</code> Selects the EPAC environment for this plan. If omitted, interactively prompts for the value. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It must contain the file <code>global-settings.jsonc</code>. <code>Interactive</code> Defaults to <code>$false</code>. <code>OutputFolder</code> Output folder path for plan files. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Output</code>. <code>DevOpsType</code> If set, outputs variables consumable by conditions in a DevOps pipeline. Default: not set. <code>BuildExemptionsOnly</code> If set, only builds the Exemptions plan. This useful to fast-track Exemption when utilizing Release Flow Default: not set."},{"location":"ci-cd-overview/#policy-deployment","title":"Policy Deployment","text":"<p>Deploys Policies, Policy Sets, Policy Assignments, and Policy Exemptions at their desired scope based on the plan.</p> <p>Deployment Mechanism</p> Deployment Mode Command/Script Module (Recommended) Deploy-PolicyPlan Script Deploy-PolicyPlan.ps1 <p>Parameters</p> Parameter Explanation <code>PacEnvironmentSelector</code> Selects the EPAC environment for this plan. If omitted, interactively prompts for the value. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It must contain the file <code>global-settings.jsonc</code>. <code>Interactive</code> Defaults to <code>$false</code>. <code>InputFolder</code> Input folder path for plan files. Defaults to environment variable <code>$env:PAC_INPUT_FOLDER</code>, <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Output</code>."},{"location":"ci-cd-overview/#role-deployment","title":"Role Deployment","text":"<p>Creates the role assignments for the Managed Identities required for <code>DeployIfNotExists</code> and <code>Modify</code> Policies.</p> <p>Deployment Mechanism</p> Deployment Mode Command/Script Module (Recommended) Deploy-RolesPlan Script Deploy-RolesPlan.ps1 <p>Parameters</p> Parameter Explanation <code>PacEnvironmentSelector</code> Selects the EPAC environment for this plan. If omitted, interactively prompts for the value. <code>DefinitionsRootFolder</code> Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It must contain the file <code>global-settings.jsonc</code>. <code>Interactive</code> Defaults to <code>$false</code>. <code>InputFolder</code> Input folder path for plan files. Defaults to environment variable <code>$env:PAC_INPUT_FOLDER</code>, <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Output</code>."},{"location":"ci-cd-overview/#create-azure-devops-pipelines-or-github-workflows-from-starter-pipelines","title":"Create Azure DevOps Pipelines or GitHub Workflows from Starter Pipelines.","text":"<p>Starter Pipelines have been created to orchestrate the EPAC deployment steps listed above. The scripts <code>New-PipelinesFromStarterKit</code> create Azure DevOps Pipelines or GitHub Workflows from the starter kit. You select the type of pipeline to create, the branching flow to implement, and the ScriptType to use. - The starter kits support two branching/release strategies (<code>GitHub</code> and <code>Release</code>). More details on these branching flows refer to the Branching Flow Guidance. - The recommended <code>ScriptType</code> is <code>module</code>, which utilizes the <code>EnterprisePolicyAsCode</code> Powershell module. For more details on EPAC installation options, please refer to the Start Implementation section.</p>"},{"location":"ci-cd-overview/#azure-devops-pipelines","title":"Azure DevOps Pipelines","text":"<p>The following commands create Azure DevOps Pipelines from the starter kit; use one of the commands:</p> <pre><code>New-PipelinesFromStarterKit -StarterKitFolder .\\StarterKit -PipelinesFolder .\\pipelines -PipelineType AzureDevOps -BranchingFlow GitHub -ScriptType script\nNew-PipelinesFromStarterKit -StarterKitFolder .\\StarterKit -PipelinesFolder .\\pipelines -PipelineType AzureDevOps -BranchingFlow Release -ScriptType script\nNew-PipelinesFromStarterKit -StarterKitFolder .\\StarterKit -PipelinesFolder .\\pipelines -PipelineType AzureDevOps -BranchingFlow GitHub -ScriptType module\nNew-PipelinesFromStarterKit -StarterKitFolder .\\StarterKit -PipelinesFolder .\\pipelines -PipelineType AzureDevOps -BranchingFlow Release -ScriptType module\n</code></pre>"},{"location":"ci-cd-overview/#github-workflows","title":"GitHub Workflows","text":"<p>The following commands create GitHub Workflows from the starter kit; use one of the commands:</p> <pre><code>New-PipelinesFromStarterKit -StarterKitFolder .\\StarterKit -PipelinesFolder .\\.github/workflows -PipelineType GitHubActions -BranchingFlow GitHub -ScriptType script\nNew-PipelinesFromStarterKit -StarterKitFolder .\\StarterKit -PipelinesFolder .\\.github/workflows -PipelineType GitHubActions -BranchingFlow Release -ScriptType script\nNew-PipelinesFromStarterKit -StarterKitFolder .\\StarterKit -PipelinesFolder .\\.github/workflows -PipelineType GitHubActions -BranchingFlow GitHub -ScriptType module\nNew-PipelinesFromStarterKit -StarterKitFolder .\\StarterKit -PipelinesFolder .\\.github/workflows -PipelineType GitHubActions -BranchingFlow Release -ScriptType module\n</code></pre>"},{"location":"ci-cd-overview/#general-hardening-guidelines","title":"General Hardening Guidelines","text":"<ul> <li>Least Privilege: Use the least privilege principle when assigning roles to the SPNs used in the CI/CD pipeline. The roles should be assigned at the root or pseudo-root management group level. For more details on the SPNs to use and required permissions refer to App Registrations Setup</li> <li>Require a Pull Request for changes to the <code>main</code> branch. This ensures that changes are reviewed before deployment.</li> <li>Require additional reviewers for yml pipeline and script changes.</li> <li>Require branches to be in a folder <code>feature</code> to prevent accidental deployment of branches.</li> <li>Require an approval step between the Plan stage/job and the Deploy stage/job. This ensures that the changes are reviewed before deployment.</li> <li>[Optional] Require an approval step between the Deploy stage/job and the Role Assignments stage/job. This ensures that the role assignments are reviewed before deployment.</li> <li>For <code>Release Flow</code> only: allow only privileged users to create <code>releases-prod</code> and <code>releases-exemptions-only</code> branches and require those branches to be created from the main branch only.</li> </ul>"},{"location":"integrating-with-alz-monitor/","title":"Azure Baseline Monitor Alerts Integration","text":"<p>For users interested in deploying the Azure Monitor Baseline Alerts project with EPAC - these policies have been extracted and converted to the EPAC format and are available at the amba-export repository.</p> <p>Please review the <code>README</code> available in that repository for usage within EPAC.</p>"},{"location":"integrating-with-alz/","title":"Integrating EPAC with Azure Landing Zones","text":""},{"location":"integrating-with-alz/#rationale","title":"Rationale","text":"<p>Microsoft publishes and maintains a list of Policies, Policy Sets and Assignments which are deployed as part of the Cloud Adoption Framework Azure Landing Zones deployment. The central repository that contains these policies acts as the source of truth for ALZ deployments via the portal, Bicep and Terraform. A current list of policies which are deployed using these solutions is found at this link.</p> <p>To enable customers to use the Enterprise Policy as Code solution and combine Microsoft's policy recommendations there is a script which will pull the Policies, Policy Sets and Policy Assignments from the central repository and allow you to deploy them using this solution.</p> <p>As the policies and assignments change in main repository the base files in this solution can be updated to match.</p>"},{"location":"integrating-with-alz/#why-and-when-should-you-use-epac-to-manage-alz-deployed-policies","title":"Why and when should you use EPAC to manage ALZ deployed policies","text":"<p>EPAC can be used to manage Azure Policy deployed using ALZ Bicep or Terraform using the scenarios below. Some reasons you may want to switch to EPAC policy management include:</p> <ul> <li>You have existing unmanaged policies in a brownfield environment that you want to deploy in the new ALZ environment. Export the existing policies and manage them with EPAC alongside the ALZ policy objects.</li> <li>You have ALZ deployed in a non standard way e.g. multiple management group structures for testing, non-conventional management group structure. The default assignment structure provided by other ALZ deployment methods may not fit your strategy.</li> <li>A team that is not responsible for infrastructure deployment e.g. a security team may want to deploy and manage policies.</li> <li>You require features from policy not available in the ALZ deployments e.g. policy exemptions, documentation, assignment customization.</li> <li>Non-compliance reporting and remediation task management.</li> </ul> <p>Instructions are provided below for integrating with Bicep and Terraform deployments.</p>"},{"location":"integrating-with-alz/#scenarios","title":"Scenarios","text":"<p>There are two scenarios for integrating EPAC with ALZ.</p> <ol> <li>Existing Azure Landing Zone deployment and EPAC is to be used as the policy engine moving forward.</li> <li>Using EPAC to deploy and manage the Azure Landing Zone policies.</li> </ol>"},{"location":"integrating-with-alz/#scenario-1-existing-deployment","title":"Scenario 1 - Existing Deployment","text":"<p>With an existing Azure Landing Zone deployment you can use EPAC's extract scripts to extract the existing policies and assignments.</p> <ol> <li> <p>Install the EnterprisePolicyAsCode module from the PowerShell gallery and import it.</p> <pre><code>Install-Module EnterprisePolicyAsCode\nImport-Module EnterprisePolicyAsCode\n</code></pre> </li> <li> <p>Create a new policy definition folder structure using the command below.</p> <pre><code>New-HydrationDefinitionFolder -DefinitionsRootFolder .\\Definitions\n</code></pre> </li> <li> <p>Update the <code>global-settings.json</code> file in the Definitions folder as described here</p> </li> <li> <p>Extract the existing policies from the environment by using the extract functionality as described here</p> <p>This will create in the <code>Output</code> folder a group of folders containing the extracted policies. Note that it extracts all policies in the environment including ones not deployed by any of the Azure Landing Zone deployments.</p> </li> <li> <p>Copy each of the folders in the <code>Output\\Definitions</code> folder to the <code>Definitions</code> folder you created above.</p> </li> <li> <p>At this point you can run the build script and generate a plan to validate what is going to be changed in the existing environment.</p> <pre><code>Build-DeploymentPlans -DefinitionsRootFolder Definitions -OutputFolder Output\n</code></pre> <p>In a newly deployed CAF environment with no other policies the results of the plan should be similar to below - EPAC will update each policy definition, set definition and assignment with a pacOwnerId</p> <pre><code>===================================================================================================\nSummary\n===================================================================================================\nPolicy counts:\n    0 unchanged\n    116 changes:\n        new     = 0\n        update  = 116\n        replace = 0\n        delete  = 0\nPolicy Set counts:\n    0 unchanged\n    7 changes:\n        new     = 0\n        update  = 7\n        replace = 0\n        delete  = 0\nPolicy Assignment counts:\n    0 unchanged\n    30 changes:\n        new     = 0\n        update  = 30\n        replace = 0\n        delete  = 0\nRole Assignment counts:\n    0 changes\n</code></pre> </li> <li> <p>Run the generated plan to deploy the policy objects</p> <pre><code>Deploy-PolicyPlan -DefinitionsRootFolder .\\Definitions -InputFolder .\\Output\n</code></pre> </li> <li> <p>Run the generated plan to update the role assignment objects</p> <pre><code>Deploy-RolesPlan -DefinitionsRootFolder .\\Definitions -InputFolder .\\Output\n</code></pre> </li> </ol> <p>If you have deployed the Azure Landing Zone accelerator using Bicep or Terraform - they support incremental updates as new features are released. If you are going to use EPAC to manage policies in the environment then follow the steps below depending on which tool you have used to do the landing zone deployment.</p>"},{"location":"integrating-with-alz/#bicep","title":"Bicep","text":"<ul> <li>Do not deploy the policy modules when upgrading the Azure Landing Zones. Use the process below to keep in sync with changes to ALZ policies.</li> </ul>"},{"location":"integrating-with-alz/#terraform","title":"Terraform","text":"<ul> <li>You must override the built-in management group archetypes to tell the Terraform module not to deploy policies. Sample files to replace the built-in archetypes are available in a repository here</li> </ul>"},{"location":"integrating-with-alz/#scenario-2-alz-policy-deployment-with-epac","title":"Scenario 2 - ALZ Policy Deployment with EPAC","text":"<p>To deploy the ALZ policies using EPAC follow the steps below.</p> <ol> <li> <p>Install the EnterprisePolicyAsCode module from the PowerShell gallery and import it.</p> <pre><code>Install-Module EnterprisePolicyAsCode\nImport-Module EnterprisePolicyAsCode\n</code></pre> </li> <li> <p>Create a new policy definition folder structure using the command below.</p> <pre><code>New-HydrationDefinitionFolder -DefinitionsRootFolder .\\Definitions\n</code></pre> </li> <li> <p>Update the <code>global-settings.json</code> file in the Definitions folder as described here</p> </li> <li> <p>Synchronize the policies from the upstream repository. You should ensure that you are running the latest version of the EPAC module before running this script each time.</p> <pre><code>Sync-ALZPolicies -DefinitionsRootFolder .\\Definitions -CloudEnvironment AzureCloud\n# Also accepts AzureUSGovernment or AzureChinaCloud\n</code></pre> </li> <li> <p>Update the assignments scopes. Each assignment file has a default scope assigned to it - this need to be updated to reflect your environment and <code>global-settings.jsonc</code> file.</p> <p>For example:</p> <pre><code>{\n    \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-assignment-schema.json\",\n    \"nodeName\": \"/Root/\",\n    \"scope\": {\n        \"tenant1\": [ // Replace with your EPAC environment name and validate the management group listed below exists\n            \"/providers/Microsoft.Management/managementGroups/toplevelmanagementgroup\"\n        ]\n    },\n    \"parameters\": {\n        \"logAnalytics\": \"\", // Replace with your central Log Analytics workspace ID\n        \"logAnalytics_1\": \"\", // Replace with your central Log Analytics workspace ID\n        \"emailSecurityContact\": \"\", // Security contact email address for Microsoft Defender for Cloud\n        \"ascExportResourceGroupName\": \"mdfc-export\", // Resource group to export Microsoft Defender for Cloud data to\n        \"ascExportResourceGroupLocation\": \"\" // Location of the resource group to export Microsoft Defender for Cloud data to\n}\n</code></pre> <p>If my top level management group had an ID of contoso and my PAC environments specified a production environment I would need to update the block as below.</p> <pre><code>{\n    \"nodeName\": \"/Root/\",\n    \"scope\": {\n        \"production\": [\n            \"/providers/Microsoft.Management/managementGroups/contoso\"\n        ]\n    },\n    \"parameters\": {\n        \"logAnalytics\": \"\",\n        \"logAnalytics_1\": \"\",\n        \"emailSecurityContact\": \"\",\n        \"ascExportResourceGroupName\": \"\",\n        \"ascExportResourceGroupLocation\": \"\"\n    }\n</code></pre> <p>Each assignment file corresponds to a management group deployed as part of the CAF Azure Landing Zone management group structure.</p> </li> <li> <p>Update assignment parameters.</p> </li> </ol> <p>Warning</p> <p>Carefully review the parameters and policies deployed as they have recently changed. Review each assignment file carefully and ensure all parameter values are completed. Due to changes in usage of the Azure Monitor Agent - there are some Data Collection Rules that must be deployed prior to assigning the policies - the source for these DCRs are provided in the assignment file parameter comments.</p> <p>Several of the assignment files also have parameters which need to be in place. Pay attention to the requirements about having a Log Analytics workspace deployed prior to assigning these policies as it is a requirement for several of the assignments. Less generic parameters are also available for modification in the assignment files.</p> <ol> <li>Follow the normal steps to deploy the solution to the environment.</li> </ol>"},{"location":"integrating-with-alz/#keeping-up-to-date-with-changes-manually","title":"Keeping up to date with changes manually","text":"<p>The Azure Landing Zone deployment contains several policies that help provide guardrails to an environment, and the team that works on these policies is always providing updates to the original content to keep in line with Microsoft's best practices and road maps. The EPAC solution contains a function to help synchronize changes from the upstream project.</p> <p>To pull the latest changes from the upstream repository - use the code below.</p> <pre><code>Sync-ALZPolicies -DefinitionsRootFolder .\\Definitions -CloudEnvironment AzureCloud # Also accepts AzureUSGovernment or AzureChinaCloud\n</code></pre> <p>Carefully review the proposed changes before deploying them. It is best to make sure you're project is stored in source control so you can easily see which files have changed before deployment.</p> <p>Warning</p> <p>If you have followed Scenario 1 above, the first time you run the <code>Sync-ALZPolicies</code>, there will be many changes recorded due to formatting. Review the files completely before deploying.</p> <p>Warning</p> <p>Assignments deployed via the ALZ accelerators are kept in sync with the EnterprisePolicyAsCode module so ensure you have the latest PowerShell module installed before running <code>Sync-ALZPolicies</code></p> <p>Tip</p> <p>Rename or copy the default ALZ assignment files - when you do a sync, it makes it easier to compare changes.</p>"},{"location":"integrating-with-alz/#keeping-up-to-date-with-github-actions","title":"Keeping up to date with GitHub Actions","text":"<p>There is a GitHub action workflow which executes the above script. The process for configuring it is below.</p> <ol> <li>Copy the <code>alz-sync.yaml</code> file from here to <code>.github\\workflows\\alz-sync.yaml</code> in your repository.</li> <li> <p>Update the <code>env:</code> section with details below</p> Environment Variable Name Value Notes REVIEWER Add a GitHub user to review the PR definitionsRootFolder The folder containing <code>global-settings.jsonc</code> and definitions </li> <li> <p>Run the workflow - new policies will be synced from the source.</p> </li> <li>Before merging the PR - checkout the branch and confirm that changes. Note that the sync script will overwrite the default assignments so ensure you compare for new functionality before reverting.</li> <li>When changes are confirmed - merge the PR.</li> </ol>"},{"location":"integrating-with-slz/","title":"Sovereign Landing Zone (SLZ) - Sovereignty Policy Baseline Integration","text":"<p>For users interested in deploying the Sovereignty Policy Baseline project with EPAC - these policies have been extracted and converted to the EPAC format and are available at the spb-export repository.</p> <p>Please review the <code>README</code> available in that repository for usage within EPAC.</p>"},{"location":"operational-scripts-documenting-policy/","title":"Documenting Policy Assignments and Sets of Policy Set (Initiative) definitions","text":""},{"location":"operational-scripts-documenting-policy/#overview","title":"Overview","text":"<p>The Documentation feature provides reports on Policy Assignments deployed within an environment, and comparisons of Policy Assignments and Sets of Policy Set definitions for considering differences in policies and effects.  Output is generated as Markdown (<code>.md</code>), and Excel (<code>.csv</code>) files using the script <code>./Scripts/Operations/Build-PolicyDocumentation</code> It retrieves its instruction from the JSON files in this folder; the names of the definition JSON files don't matter as the script reads any file in the folder with a <code>.json</code> or <code>.jsonc</code> extension.</p> <ul> <li>Policy Assignments: Read and process Policy Assignments which are representative of an environment category, such as prod, test, dev, and sandbox. It generates Markdown (<code>.md</code>), and Excel (<code>.csv</code>) files.</li> <li>Policy Sets: Read and process Policy Sets to compare them for Policy and effect overlap. It generates Markdown (<code>.md</code>), Excel (<code>.csv</code>) files, and JSON file (<code>.jsonc</code>).</li> </ul>"},{"location":"operational-scripts-documenting-policy/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-documentation-schema.json\"\n}\n</code></pre> <p>This schema is new in v7.4.x and may not be complete. Please let us know if we missed anything.</p>"},{"location":"operational-scripts-documenting-policy/#example-documentation-specification-file-using-documentallassignments","title":"Example Documentation Specification File using 'documentAllAssignments'","text":"<p>Each file must contain one or both documentation topics. This example file in the StarterKit has both topics. The element <code>pacEnvironment</code> references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the custom Policies and Policy Sets are deployed.</p> <ul> <li><code>documentAssignments</code></li> <li><code>documentPolicySets</code></li> </ul> <pre><code>{\n    \"documentAssignments\": {\n        \"documentAllAssignments\": [\n            {\n                \"pacEnvironment\": \"EPAC-Prod\",\n                \"fileNameStemPrefix\": \"Production\",\n                \"skipPolicyAssignments\": [],\n                \"skipPolicyDefinitions\": [\n                    \"/providers/microsoft.authorization/policysetdefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\" // Azure Security Benchmark v3\n                ],\n                \"overrideEnvironmentCategory\": {\n                    \"DEV\": [ // Any name will suffice - will be header of column, grouping the scopes within the array\n                        \"/providers/Microsoft.Management/managementGroups/DEV-1\",\n                        \"/providers/Microsoft.Management/managementGroups/DEV-2\"\n                    ],\n                    \"PROD\": [\n                        \"/providers/Microsoft.Management/managementGroups/PROD-1\",\n                        \"/providers/Microsoft.Management/managementGroups/PROD-2\"\n                    ]\n                }\n            }\n        ],\n        \"documentationSpecifications\": [\n            {\n                \"fileNameStem\": \"contoso-policy-effects-across-environments\",\n                \"environmentCategories\": [], // when using 'documentAllAssignments', this value will be overwritten\n                \"title\": \"Contoso Policy effects\",\n                \"markdownAdoWiki\": true,\n                \"markdownIncludeComplianceGroupNames\": true,\n                \"markdownSuppressParameterSection\": false,\n                \"markdownMaxParameterLength\": 42, //default is 42\n                \"markdownAdoWikiConfig\": [\n                    {\n                        \"adoOrganization\": \"MyOrganization\",\n                        \"adoProject\": \"EPAC\",\n                        \"adoWiki\": \"EPAC\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"documentPolicySets\": [\n        {\n            \"pacEnvironment\": \"tenant\",\n            \"fileNameStem\": \"contoso-compliance-policy-sets\",\n            \"title\": \"Document interesting Policy Sets\",\n            \"policySets\": [\n                {\n                    \"shortName\": \"ASB\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\" // Azure Security Benchmark v3\n                },\n                {\n                    \"shortName\": \"NIST 800-171\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/03055927-78bd-4236-86c0-f36125a10dc9\" // NIST SP 800-171 Rev. 2\n                },\n                {\n                    \"shortName\": \"NIST 800-53\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\" // NIST SP 800-53 Rev. 5\n                },\n                {\n                    \"shortName\": \"ORG\",\n                    \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Root/providers/Microsoft.Authorization/policySetDefinitions/org-security-benchmark\" // Organization Security Benchmark for Custom Policies\n                }\n            ],\n            \"environmentColumnsInCsv\": [\n                \"prod\",\n                \"test\",\n                \"dev\",\n                \"lab\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"operational-scripts-documenting-policy/#example-documentation-specification-file-using-environmentcategories","title":"Example Documentation Specification File using 'environmentCategories'","text":"<p>Each file must contain one or both documentation topics. This example file in the StarterKit has both topics. The element <code>pacEnvironment</code> references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the custom Policies and Policy Sets are deployed.</p> <ul> <li><code>documentAssignments</code></li> <li><code>documentPolicySets</code></li> </ul> <pre><code>{\n    \"documentAssignments\": {\n        \"environmentCategories\": [\n            {\n                \"pacEnvironment\": \"tenant\",\n                \"environmentCategory\": \"prod\",\n                \"scopes\": [ // Used in Markdown output only\n                    \"Management Groups: Contoso-Prod\"\n                ],\n                \"representativeAssignments\": [\n                    {\n                        \"shortName\": \"ASB\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/prod-asb\"\n                    },\n                    {\n                        \"shortName\": \"ORG\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/prod-org\"\n                    }\n                ]\n            },\n            {\n                \"pacEnvironment\": \"tenant\",\n                \"environmentCategory\": \"test\",\n                \"scopes\": [ // Used in Markdown output only\n                    \"Management Groups: Contoso-NonProd\"\n                ],\n                \"representativeAssignments\": [\n                    {\n                        \"shortName\": \"ASB\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-NonProd/providers/Microsoft.Authorization/policyAssignments/prod-asb\"\n                    },\n                    {\n                        \"shortName\": \"ORG\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-NonProd/providers/Microsoft.Authorization/policyAssignments/prod-org\"\n                    }\n                ]\n            },\n            {\n                \"pacEnvironment\": \"tenant\",\n                \"environmentCategory\": \"dev\",\n                \"scopes\": [ // Used in Markdown output only\n                    \"Management Groups: Contoso-Dev\"\n                ],\n                \"representativeAssignments\": [\n                    {\n                        \"shortName\": \"ASB\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Dev/providers/Microsoft.Authorization/policyAssignments/prod-asb\"\n                    },\n                    {\n                        \"shortName\": \"ORG\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Dev/providers/Microsoft.Authorization/policyAssignments/prod-org\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"documentationSpecifications\": [\n        {\n            \"fileNameStem\": \"contoso-policy-effects-across-environments\",\n            \"environmentCategories\": [\n                \"prod\",\n                \"test\",\n                \"dev\"\n            ],\n            \"title\": \"Contoso Policy effects\",\n            \"markdownAdoWiki\": true,\n            \"markdownIncludeComplianceGroupNames\": true,\n            \"markdownSuppressParameterSection\": false,\n            \"markdownMaxParameterLength\": 42, //default is 42\n            \"markdownAdoWikiConfig\": [\n                {\n                    \"adoOrganization\": \"MyOrganization\",\n                    \"adoProject\": \"EPAC\",\n                    \"adoWiki\": \"EPAC\"\n                }\n            ]\n        }\n    ],\n    \"documentPolicySets\": [\n        {\n            \"pacEnvironment\": \"tenant\",\n            \"fileNameStem\": \"contoso-compliance-policy-sets\",\n            \"title\": \"Document interesting Policy Sets\",\n            \"policySets\": [\n                {\n                    \"shortName\": \"ASB\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\" // Azure Security Benchmark v3\n                },\n                {\n                    \"shortName\": \"NIST 800-171\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/03055927-78bd-4236-86c0-f36125a10dc9\" // NIST SP 800-171 Rev. 2\n                },\n                {\n                    \"shortName\": \"NIST 800-53\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\" // NIST SP 800-53 Rev. 5\n                },\n                {\n                    \"shortName\": \"ORG\",\n                    \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Root/providers/Microsoft.Authorization/policySetDefinitions/org-security-benchmark\" // Organization Security Benchmark for Custom Policies\n                }\n            ],\n            \"environmentColumnsInCsv\": [\n                \"prod\",\n                \"test\",\n                \"dev\",\n                \"lab\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"operational-scripts-documenting-policy/#modifying-the-markdown-output","title":"Modifying the Markdown Output","text":"<p>Markdown processors vary slightly. This script has settings to tune the output to match the Markdown processor you are using.</p>"},{"location":"operational-scripts-documenting-policy/#azure-devops-wiki-markdown","title":"Azure DevOps Wiki Markdown","text":"<ul> <li>Some Markdown processors (including Azure DevOps Wikis) recognize <code>[[_TOC_]]</code> to insert a table of contents. Setting to <code>markdownAddToc</code> to <code>true</code> enables generating the table of contents.</li> <li>Azure DevOps Wikis do not need a heading (title) at level 1. It needs the subheadings at level 1 instead. Setting <code>markdownAdoWiki</code> to true enables formatting the headings for Azure DevOps Wiki and generating the table of contents (implicitly sets <code>markdownAddToc</code> to <code>true</code>).</li> </ul> <pre><code>\"markdownAddToc\": true, // default is false, set to true to add a table of contents\n</code></pre> <pre><code>\"markdownAdoWiki\": true, // default is false, set to true to format headings for Azure DevOps Wiki and generate a table of contents\n</code></pre>"},{"location":"operational-scripts-documenting-policy/#automating-azure-devops-wiki-markdown","title":"Automating Azure DevOps Wiki Markdown","text":"<ul> <li>EPAC can be used to automate the population of your Azure DevOps Wiki pages with the generated markdown files. To do this, you must call \"Build-PolicyDocumentation\" with the parameter \"WikiClonePat\". The parameter's value should be the name of the Personal Access Token (PAT) set in your pipeline variable. Example:</li> </ul> <pre><code>Build-PolicyDocumentation.ps1 -WikiClonePat $(WikiClonePat)\n</code></pre> <ul> <li> <p>This PAT only requires \"Read &amp; write\" permissions for \"Code\", as it will modify and push these markdown files to your Wiki. For more information, please see \"Azure DevOps: Use personal access tokens\"</p> </li> <li> <p>To ensure your EPAC reaches your Wiki, you must configure the \"markdownAdoWikiConfig\" property within your policy documentation file.</p> </li> <li>adoOrganization: Name of your ADO Organization</li> <li>adoProject: Name of your ADO Project</li> <li>adoWiki: Name of your Wiki (If Wiki was not manually set up, it will be created for you based on the name given here)</li> </ul> <pre><code>\"markdownAdoWikiConfig\": [\n                    {\n                        \"adoOrganization\": \"MyOrganization\",\n                        \"adoProject\": \"EPAC\",\n                        \"adoWiki\": \"EPAC\"\n                    }\n                ]\n</code></pre> <ul> <li>For a full implementation using an example pipeline, please see \"EPAC GitHub: epac-dev-pipeline-with-adowiki.yml\"</li> </ul>"},{"location":"operational-scripts-documenting-policy/#embedded-html-in-markdown-tables","title":"Embedded HTML in Markdown Tables","text":"<p>EPAC uses embedded HTML to format Markdown tables. Some Markdown processors, such as SharePoint, do not recognize embedded HTML. Setting <code>markdownNoEmbeddedHtml</code> to <code>true</code> emits commas <code>,</code> instead of the HTML tag <code>&lt;br/&gt;</code>.</p> <pre><code>\"markdownNoEmbeddedHtml\": true, // default is false, set to true to remove embedded HTML in Markdown tables\n</code></pre>"},{"location":"operational-scripts-documenting-policy/#improve-markdown-readability","title":"Improve Markdown Readability","text":"<p>Policy definition group names are not included in Markdown to reduce clutter. You can include a column by setting <code>markdownIncludeComplianceGroupNames</code> to <code>true</code>,</p> <pre><code>\"markdownIncludeComplianceGroupNames\": true, // default is false, set to true to include compliance group names\n</code></pre> <p>In some markdown processors, very long parameter names break the display. You can set <code>markdownSuppressParameterSection</code> to true to completely suppress the parameter section in the Markdown output.</p> <pre><code>\"markdownSuppressParameterSection\": true, // default is false, set to true to suppress the parameter section in the Markdown output\n</code></pre> <p>Alternatively, you can set <code>markdownMaxParameterLength</code> to a maximum length. EPAC will truncate the name at that length and append an ellipsis. The default is 42 characters. The minimum is 16 characters.</p> <pre><code>\"markdownMaxParameterLength\": 42, // default is 42\n</code></pre>"},{"location":"operational-scripts-documenting-policy/#assignment-documentation","title":"Assignment Documentation","text":""},{"location":"operational-scripts-documenting-policy/#option-1-element-documentallassignments","title":"OPTION 1: Element <code>documentAllAssignments</code>","text":"<p>Best used when all Policy Assignments need to be documented.</p> <p>When enabled, this section lists all Policy Assignments across all scopes where Policy is directly assigned. In many organizations, the same Policies and effects are applied to multiple Management Groups and even Azure tenants with the parameters consistent, therefore there is an option to group scopes by environment category.</p> <p><code>documentAllAssignments</code> entry specifies:</p> <ul> <li><code>pacEnvironment</code>: references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the Policies and Policy Sets are deployed.</li> <li><code>fileNameStemPrefix</code>: add a prefix to the fileNameStem set in \"documentationSpecifications\". Useful when needing to avoid overwriting files.</li> <li><code>skipPolicyAssignments</code>: list of Policy Assignment ID's used to define Policy Assignments that do not want to be included in the output.</li> <li><code>skipPolicyDefinitions</code>: list of Policy Definition and Policy Set ID's used to define Policy Assignments that do not want to be included in the output.</li> <li><code>overrideEnvironmentCategory</code>: list of custom-defined Environment Categories that will overwrite the auto-generated values. By default, all Policy Assignment scopes are treated as an individual \"Environment Category\", therefore leverage this section to override these Environment Categories and create custom groupings. (For an example see <code>Example Documentation Specification File using 'documentAllAssignments'</code>)</li> </ul>"},{"location":"operational-scripts-documenting-policy/#element-documentationspecifications","title":"Element <code>documentationSpecifications</code>","text":"<p>Each entry in the array defines a set of outputs:</p> <ul> <li><code>fileNameStem</code>: the file name stem used to construct the filenames.</li> <li><code>environmentCategories</code> listed as effect columns.</li> <li><code>title</code>: Heading 1 text for Markdown.</li> </ul>"},{"location":"operational-scripts-documenting-policy/#option-2-element-environmentcategories","title":"OPTION 2: Element <code>environmentCategories</code>","text":"<p>Best used when specific Policy Assignments need to be documented.</p> <p>For any given environment category, such as <code>prod</code>, <code>test</code>, <code>dev</code>, this section lists Policy Assignments which are representative of those environments. In many organizations, the same Policies and effects are applied to multiple Management Groups and even Azure tenants with the parameters consistent by environment category.</p> <p>Each <code>environmentCategories</code> entry specifies:</p> <ul> <li><code>pacEnvironment</code>: references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the Policies and Policy Sets are deployed.</li> <li><code>environmentCategory</code>: name used for column headings and referenced in <code>documentationSpecifications</code> below.</li> <li><code>scopes</code>:  used in Markdown output only for the Scopes section as unprocessed text.</li> <li><code>representativeAssignments</code>: list Policy Assignment <code>id</code>s representing this <code>environmentCategory</code>. The <code>shortName</code> is used for CSV column headings and markdown output.</li> </ul>"},{"location":"operational-scripts-documenting-policy/#element-documentationspecifications_1","title":"Element <code>documentationSpecifications</code>","text":"<p>Each entry in the array defines a set of outputs:</p> <ul> <li><code>fileNameStem</code>: the file name stem used to construct the filenames.</li> <li><code>environmentCategories</code> listed as effect columns.</li> <li><code>title</code>: Heading 1 text for Markdown.</li> </ul>"},{"location":"operational-scripts-documenting-policy/#output-files","title":"Output files","text":"<ul> <li> <p><code>&lt;fileNameStem&gt;-full.csv</code>: Lists Policies across environments and multiple Policy Sets sorted by <code>category</code> and <code>`displayName</code>.</p> Column Description <code>name</code> Policy name (must be unique - a GUID for built-in Policies) <code>referencePath</code> Disambiguate Policies included multiple times in a Policy Set definition with different <code>referenceId</code>s. It is blank if not needed or formatted as <code>&lt;policy-set.name&gt;\\\\&lt;referenceId&gt;</code>. <code>category</code> Policy <code>category</code> from Policy <code>metadata</code>. <code>displayName</code> <code>description</code> <code>groupNames</code> Union of (compliance Policy Sets) <code>groupNames</code> for this Policy. <code>allowedEffects</code> List of allowed Policy <code>effect</code>s. Note: Some Policy Sets may have hardcoded the effect which is not represented here. <code>&lt;environmentCategory&gt;_Effect</code> One column per <code>environmentCategory</code> listing the highest enforcement level across the Policy Sets assigned in this environment category. <code>&lt;environmentCategory&gt;_Parameters</code> One column per <code>environmentCategory</code> listing the parameters (JSON - excluding the effect parameter) for this Policy and <code>environmentCategory</code>. <code>&lt;environmentCategory&gt;-</code><code>&lt;policy-set-short name&gt;-Effect</code> Detailed effect per <code>environmentCategory</code> and Policy Set. The next table shows examples of the different patterns for this value. An actual document will reflect the actual value in your environment. <code>&lt;policy-set-short name&gt;-ParameterDefinitions</code> Parameter definitions (JSON) per Policy Set containing this Policy. <p>Examples of effects:</p> Value Description <code>Deny (assignment: secretsExpirationSetEffect)</code> Effect is <code>Deny</code> specified in a user-defined value for parameter <code>secretsExpirationSetEffect</code> <code>Audit (default: useRbacRulesMonitoringEffect)</code> Effect is <code>Audit</code> default value for Policy Set parameter <code>useRbacRulesMonitoringEffect</code>. <code>Audit (Initiative Fixed)</code> Effect is parameterized in the Policy definition. Policy Set definition is setting it to a fixed value of <code>Audit</code>. <code>Audit (Policy Default)</code> Effect is parameterized in Policy definition with a default value of <code>Audit</code>. The Policy Set definition does not override or surface this value. <code>Modify (Policy Fixed)</code> Effect is not parameterized in Policy definition. It is set to a fixed value of <code>Modify</code>. </li> <li> <p><code>&lt;fileNameStem&gt;-parameters.csv</code>: This file is intended for a future enhancement to EPAC which will allow the effect values and parameter values to be specified in a spreadsheet instead of JSON. This file is generated to make it usable as the starting list, or to round-trip the values. It lists Policies across environments and Initiatives sorted by <code>category</code> and <code>`displayName</code>. Columns (see above for descriptions):</p> </li> <li> <p><code>name</code></p> </li> <li><code>referencePath</code></li> <li><code>category</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>displayName</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>description</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>allowedEffects</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>&lt;environmentCategory&gt;_Effect</code></li> <li> <p><code>&lt;environmentCategory&gt;_Parameters</code></p> </li> <li> <p><code>&lt;fileNameStem&gt;-summary.md</code>: This Markdown file is intended for developers for a quick overview of the effects and parameters in place for each <code>environmentCategory</code>. It does not provide details about the individual Initiatives assigned. It is equivalent to <code>&lt;fileNameStem&gt;-parameters.csv</code>. The Policies are sorted by <code>category</code> and <code>displayName</code>. Each <code>environmentCategory</code> column shows the current enforcement level in bold. If the value is fixed, the value is also in italics. If it is parametrized, the other allowed values are shown in italics.</p> </li> <li> <p><code>&lt;fileNameStem&gt;-full.md</code>: This Markdown file is intended for security teams requiring more details about the Assignments and Policies. It displays the same information as the summary plus the additional details equivalent to <code>&lt;fileNameStem&gt;-full.csv</code>. The Policies are sorted by <code>category</code> and <code>displayName</code>. Each <code>environmentCategory</code> column shows the current enforcement level in bold. If the value is fixed, the value is also in italics. If it is parametrized, the other allowed values are shown in italics. The additional details are:</p> </li> <li>Group Names</li> <li> <p>Effects per <code>environmentCategory</code> and Policy Set with additional details on the origin of the effect.</p> </li> <li> <p><code>Folder: services</code>: Individual Markdown files generated off of the main Policy Assignment Markdown file. These files are based on each \"Service Category\" and can be used as sub-pages with Azure DevOps Wiki pages.</p> </li> </ul>"},{"location":"operational-scripts-documenting-policy/#policy-set-documentation","title":"Policy Set Documentation","text":"<p>Compares multiple Policy Set definitions for Policy and effect overlap as Markdown and Excel (<code>.csv</code>) files.</p>"},{"location":"operational-scripts-documenting-policy/#element-documentpolicysets","title":"Element <code>documentPolicySets</code>","text":"<ul> <li><code>pacEnvironment</code>: references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the Policy and Policy Set definitions are deployed.</li> <li><code>fileNameStem</code>: the file name without the extension (.md, .csv, .jsonc)</li> <li><code>title</code>: Heading 1 text for Markdown.</li> <li><code>policySets</code>: list Policy Sets (<code>id</code>) to be compared and included in the parameter JSON file. The <code>shortName</code> is used for column headings.</li> <li><code>environmentColumnsInCsv</code>: list of columns to generate a parameter file starter equivalent to <code>&lt;fileNameStem&gt;-parameters.csv</code> above in the assignment documentation section.</li> </ul>"},{"location":"operational-scripts-documenting-policy/#output-files_1","title":"Output files","text":"<ul> <li> <p><code>&lt;fileNameStem&gt;-full.md</code>: Markdown file with Policies sorted by Policy category and display name with effect columns for each Initiative.</p> </li> <li> <p>Each effect column starts with the bolded display Name followed by the description and lines grouped by bolded Initiative short name with the effect parameter name in italics and the group names in normal text.</p> </li> <li> <p>The text below the description contains details on parameters and group names for each initiative.</p> </li> <li> <p><code>&lt;fileNameStem&gt;-full.csv</code>: Excel file with the same information as the Markdown file.</p> </li> <li><code>&lt;fileNameStem&gt;-parameters.csv</code>: Excel parameter file starter equivalent to <code>&lt;fileNameStem&gt;-parameters.csv</code> above in the assignment documentation section.</li> <li><code>&lt;fileNameStem&gt;.jsonc</code>: Parameter file starter in JSON format to simplify parameter settings for Assignments (traditional approach).</li> </ul>"},{"location":"operational-scripts-hydration-kit/","title":"Hydration Kit","text":""},{"location":"operational-scripts-hydration-kit/#create-policy-reader-role","title":"Create Policy Reader Role","text":"<p><code>New-AzPolicyReaderRole</code> creates a custom role EPAC Resource Policy Reader with Id <code>2baa1a7c-6807-46af-8b16-5e9d03fba029</code>. It provides read access to all Policy resources for the purpose of planning the EPAC deployments at the scope selected with PacEnvironmentSelector. The permissions granted are:</p> <ul> <li>Microsoft.Authorization/policyassignments/read</li> <li>Microsoft.Authorization/policydefinitions/read</li> <li>Microsoft.Authorization/policyexemptions/read</li> <li>Microsoft.Authorization/policysetdefinitions/read</li> <li>Microsoft.Authorization/roleAssignments/read</li> <li>Microsoft.PolicyInsights/*</li> <li>Microsoft.Management/register/action</li> <li>Microsoft.Management/managementGroups/read</li> </ul>"},{"location":"operational-scripts-hydration-kit/#create-azure-devops-pipeline-or-github-workflow","title":"Create Azure DevOps Pipeline or GitHub Workflow","text":"<p><code>New-PipelinesFromStarterKit</code> creates a new Azure DevOps Pipeline or GitHub Workflow from the starter kit. This script copies pipelines and templates from the starter kit to a new folder. The script assembles the pipelines/workflows based on the type of pipeline to create, the branching flow to implement, and the type of script to use.</p> <p><code>-StarterKitFolder &lt;String&gt;</code></p> <p><code>-PipelinesFolder &lt;String&gt;</code></p> <p><code>-PipelineType &lt;String&gt;</code> - AzureDevOps or GitHubActions; default is AzureDevOps</p> <p><code>-BranchingFlow &lt;String&gt;</code> - Release or GitHub (flow); default is Release</p> <p><code>-ScriptType &lt;String&gt;</code> - scripts (in your repo) or module (from PowerShell gallery); default is module</p>"},{"location":"operational-scripts-reference/","title":"Scripts References","text":""},{"location":"operational-scripts-reference/#script-build-policydocumentation","title":"Script <code>Build-PolicyDocumentation</code>","text":"<p>Builds documentation from instructions in policyDocumentations folder reading the deployed Policy Resources from the EPAC environment.</p> <pre><code>Build-PolicyDocumentation [[-DefinitionsRootFolder] &lt;String&gt;] [[-OutputFolder] &lt;String&gt;] [-WindowsNewLineCells] [-Interactive &lt;Boolean&gt;] [-SuppressConfirmation] [-IncludeManualPolicies] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-definitionsrootfolder-string","title":"<code>-DefinitionsRootFolder &lt;String&gt;</code>","text":"<p>Definitions folder path. Defaults to environment variable `$env:PAC_DEFINITIONS_FOLDER or './Definitions'.</p>"},{"location":"operational-scripts-reference/#-outputfolder-string","title":"<code>-OutputFolder &lt;String&gt;</code>","text":"<p>Output Folder. Defaults to environment variable `$env:PAC_OUTPUT_FOLDER or './Outputs'.</p>"},{"location":"operational-scripts-reference/#-windowsnewlinecells-switchparameter","title":"<code>-WindowsNewLineCells [&lt;SwitchParameter&gt;]</code>","text":"<p>Formats CSV multi-object cells to use new lines and saves it as UTF-8 with BOM - works only for Excel in Windows. Default uses commas to separate array elements within a cell</p>"},{"location":"operational-scripts-reference/#-interactive-boolean","title":"<code>-Interactive &lt;Boolean&gt;</code>","text":"<p>Set to false if used non-interactive</p>"},{"location":"operational-scripts-reference/#-suppressconfirmation-switchparameter","title":"<code>-SuppressConfirmation [&lt;SwitchParameter&gt;]</code>","text":"<p>Suppresses prompt for confirmation to delete an existing file in interactive mode</p>"},{"location":"operational-scripts-reference/#-includemanualpolicies-switchparameter","title":"<code>-IncludeManualPolicies [&lt;SwitchParameter&gt;]</code>","text":"<p>Include Policies with effect Manual. Default: do not include Policies with effect Manual.</p>"},{"location":"operational-scripts-reference/#script-new-azremediationtasks","title":"Script <code>New-AzRemediationTasks</code>","text":"<p>The New-AzRemediationTasks PowerShell creates remediation tasks for all non-compliant resources in the current AAD tenant. If one or multiple remediation tasks fail, their respective objects are added to a PowerShell variable that is outputted for later use in the Azure DevOps Pipeline.</p> <pre><code>New-AzRemediationTasks [[-PacEnvironmentSelector] &lt;String&gt;] [-DefinitionsRootFolder &lt;String&gt;] [-Interactive &lt;Boolean&gt;] [-OnlyCheckManagedAssignments] [-PolicyDefinitionFilter &lt;String[]&gt;] [-PolicySetDefinitionFilter &lt;String[]&gt;] [-PolicyAssignmentFilter &lt;String[]&gt;] [-PolicyEffectFilter &lt;String[]&gt;] [-NoWait] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_1","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-pacenvironmentselector-string","title":"<code>-PacEnvironmentSelector &lt;String&gt;</code>","text":"<p>Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from `$DefinitionsRootFolder/global-settings.jsonc.</p>"},{"location":"operational-scripts-reference/#-definitionsrootfolder-string_1","title":"<code>-DefinitionsRootFolder &lt;String&gt;</code>","text":"<p>Definitions folder path. Defaults to environment variable `$env:PAC_DEFINITIONS_FOLDER or './Definitions'.</p>"},{"location":"operational-scripts-reference/#-interactive-boolean_1","title":"<code>-Interactive &lt;Boolean&gt;</code>","text":"<p>Set to false if used non-interactive</p>"},{"location":"operational-scripts-reference/#-onlycheckmanagedassignments-switchparameter","title":"<code>-OnlyCheckManagedAssignments [&lt;SwitchParameter&gt;]</code>","text":"<p>Include non-compliance data only for Policy assignments owned by this Policy as Code repo</p>"},{"location":"operational-scripts-reference/#-policydefinitionfilter-string","title":"<code>-PolicyDefinitionFilter &lt;String[]&gt;</code>","text":"<p>Filter by Policy definition names (array) or ids (array).</p>"},{"location":"operational-scripts-reference/#-policysetdefinitionfilter-string","title":"<code>-PolicySetDefinitionFilter &lt;String[]&gt;</code>","text":"<p>Filter by Policy Set definition names (array) or ids (array).</p>"},{"location":"operational-scripts-reference/#-policyassignmentfilter-string","title":"<code>-PolicyAssignmentFilter &lt;String[]&gt;</code>","text":"<p>Filter by Policy Assignment names (array) or ids (array).</p>"},{"location":"operational-scripts-reference/#-policyeffectfilter-string","title":"<code>-PolicyEffectFilter &lt;String[]&gt;</code>","text":"<p>Filter by Policy effect (array).</p>"},{"location":"operational-scripts-reference/#-nowait-switchparameter","title":"<code>-NoWait [&lt;SwitchParameter&gt;]</code>","text":"<p>Indicates that the script should not wait for the remediation tasks to complete.</p>"},{"location":"operational-scripts-reference/#-whatif-switchparameter","title":"<code>-WhatIf [&lt;SwitchParameter&gt;]</code>","text":"<p>Simulates the actions of the command without actually performing them. Useful for testing.</p>"},{"location":"operational-scripts-reference/#-confirm-switchparameter","title":"<code>-Confirm [&lt;SwitchParameter&gt;]</code>","text":"<p>Prompts for confirmation before executing the command.</p>"},{"location":"operational-scripts-reference/#script-new-azuredevopsbug","title":"Script <code>New-AzureDevOpsBug</code>","text":"<p>Creates a Bug on the current Iteration of a team when one or multiple Remediation Tasks fail. The Bug is formatted as an HTML table and contains information on the name and URL properties. As a result, the team can easily locate and resolve the Remediation Tasks that failed.</p> <pre><code>New-AzureDevOpsBug [-FailedPolicyRemediationTasksJsonString] &lt;String&gt; [-ModuleName] &lt;String&gt; [-OrganizationName] &lt;String&gt; [-ProjectName] &lt;String&gt; [-PersonalAccessToken] &lt;String&gt; [-TeamName] &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_2","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-failedpolicyremediationtasksjsonstring-string","title":"<code>-FailedPolicyRemediationTasksJsonString &lt;String&gt;</code>","text":"<p>Specifies the JSON string that contains the objects of one or multiple failed Remediation Tasks.</p>"},{"location":"operational-scripts-reference/#-modulename-string","title":"<code>-ModuleName &lt;String&gt;</code>","text":"<p>Specifies the name of the PowerShell module installed at the beginning of the PowerShell script. By default, this is the VSTeam PowerShell Module.</p>"},{"location":"operational-scripts-reference/#-organizationname-string","title":"<code>-OrganizationName &lt;String&gt;</code>","text":"<p>Specifies the name of the Azure DevOps Organization.</p>"},{"location":"operational-scripts-reference/#-projectname-string","title":"<code>-ProjectName &lt;String&gt;</code>","text":"<p>Specifies the name of the Azure DevOps Project.</p>"},{"location":"operational-scripts-reference/#-personalaccesstoken-string","title":"<code>-PersonalAccessToken &lt;String&gt;</code>","text":"<p>Specifies the Personal Access Token that is used for authentication purposes. Make sure that you use the AzureKeyVault@2 task (link below) for this purpose.</p>"},{"location":"operational-scripts-reference/#-teamname-string","title":"<code>-TeamName &lt;String&gt;</code>","text":"<p>Specifies the name of the Azure DevOps team.</p>"},{"location":"operational-scripts-reference/#script-new-githubissue","title":"Script <code>New-GitHubIssue</code>","text":"<p>Creates an Issue in a GitHub Repository that is located under a GitHub Organization when one or multiple Remediation Tasks fail. The Bug is formatted as an HTML table and contains information on the name and URL properties. As a result, the team can easily locate and resolve the Remediation Tasks that failed.</p> <pre><code>New-GitHubIssue [-FailedPolicyRemediationTasksJsonString] &lt;String&gt; [-OrganizationName] &lt;String&gt; [-RepositoryName] &lt;String&gt; [-PersonalAccessToken] &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_3","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-failedpolicyremediationtasksjsonstring-string_1","title":"<code>-FailedPolicyRemediationTasksJsonString &lt;String&gt;</code>","text":"<p>Specifies the JSON string that contains the objects of one or multiple failed Remediation Tasks.</p>"},{"location":"operational-scripts-reference/#-organizationname-string_1","title":"<code>-OrganizationName &lt;String&gt;</code>","text":"<p>Specifies the name of the GitHub Organization.</p>"},{"location":"operational-scripts-reference/#-repositoryname-string","title":"<code>-RepositoryName &lt;String&gt;</code>","text":"<p>Specifies the name of the GitHub Repository.</p>"},{"location":"operational-scripts-reference/#-personalaccesstoken-string_1","title":"<code>-PersonalAccessToken &lt;String&gt;</code>","text":""},{"location":"operational-scripts-reference/#script-export-azpolicyresources","title":"Script <code>Export-AzPolicyResources</code>","text":"<p>Exports Azure Policy resources in EPAC format or raw format. It also generates documentation for the exported resources (can be suppressed with <code>-SuppressDocumentation</code>).</p> <pre><code>Export-AzPolicyResources [[-DefinitionsRootFolder] &lt;String&gt;] [[-OutputFolder] &lt;String&gt;] [[-Interactive] &lt;Boolean&gt;] [-IncludeChildScopes] [-IncludeAutoAssigned] [[-ExemptionFiles] &lt;String&gt;] [[-FileExtension] &lt;String&gt;] [[-Mode] &lt;String&gt;] [[-InputPacSelector] &lt;String&gt;] [-SuppressDocumentation] [-SuppressEpacOutput] [-PSRuleIgnoreFullScope] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_4","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-definitionsrootfolder-string_2","title":"<code>-DefinitionsRootFolder &lt;String&gt;</code>","text":"<pre><code>    Definitions folder path. Defaults to environment variable $env:PAC_DEFINITIONS_FOLDER or './Definitions'.\n</code></pre>"},{"location":"operational-scripts-reference/#-outputfolder-string_1","title":"<code>-OutputFolder &lt;String&gt;</code>","text":"<p>Output Folder. Defaults to environment variable $env:PAC_OUTPUT_FOLDER or './Outputs'.</p>"},{"location":"operational-scripts-reference/#-interactive-boolean_2","title":"<code>-Interactive &lt;Boolean&gt;</code>","text":"<p>Set to false if used non-interactive. Defaults to $true.</p>"},{"location":"operational-scripts-reference/#-includechildscopes-switchparameter","title":"<code>-IncludeChildScopes [&lt;SwitchParameter&gt;]</code>","text":"<p>Switch parameter to include Policies and Policy Sets definitions in child scopes</p>"},{"location":"operational-scripts-reference/#-includeautoassigned-switchparameter","title":"<code>-IncludeAutoAssigned [&lt;SwitchParameter&gt;]</code>","text":"<p>Switch parameter to include Assignments auto-assigned by Defender for Cloud</p>"},{"location":"operational-scripts-reference/#-exemptionfiles-string","title":"<code>-ExemptionFiles &lt;String&gt;</code>","text":"<p>Create Exemption files (none=suppress, csv=as a csv file, json=as a json or jsonc file). Defaults to 'csv'.</p>"},{"location":"operational-scripts-reference/#-fileextension-string","title":"<code>-FileExtension &lt;String&gt;</code>","text":"<p>File extension type for the output files. Defaults to '.jsonc'.</p>"},{"location":"operational-scripts-reference/#-mode-string","title":"<code>-Mode &lt;String&gt;</code>","text":"<p>Operating mode:</p> <ul> <li><code>export</code> exports EPAC environments in EPAC format, which should be used with -Interactive $true in a multi-tenant scenario, or used with an inputPacSelector to limit the scope to one EPAC environment.</li> <li><code>collectRawFile</code> exports the raw data only; Often used with 'inputPacSelector' when running non-interactive in a multi-tenant scenario to collect the raw data once per tenant into a file named after the EPAC environment</li> <li><code>exportFromRawFiles</code> reads the files generated with one or more runs of b) and outputs the files the same as normal 'export'.</li> <li><code>exportRawToPipeline</code> exports EPAC environments in EPAC format, which should be used with <code>-Interactive</code> $true in a multi-tenant scenario, or used with an inputPacSelector to limit the scope to one EPAC environment.</li> <li><code>psrule</code> exports EPAC environment into a file which can be used to create policy rules for PSRule for Azure</li> </ul>"},{"location":"operational-scripts-reference/#-inputpacselector-string","title":"<code>-InputPacSelector &lt;String&gt;</code>","text":"<p>Limits the collection to one EPAC environment, useful for non-interactive use in a multi-tenant scenario, especially with -Mode 'collectRawFile'.         The default is '*' which will execute all EPAC-Environments.</p>"},{"location":"operational-scripts-reference/#-suppressdocumentation-switchparameter","title":"<code>-SuppressDocumentation [&lt;SwitchParameter&gt;]</code>","text":"<p>Suppress documentation generation.</p>"},{"location":"operational-scripts-reference/#-suppressepacoutput-switchparameter","title":"<code>-SuppressEpacOutput [&lt;SwitchParameter&gt;]</code>","text":"<p>Suppress output generation in EPAC format.</p>"},{"location":"operational-scripts-reference/#-psruleignorefullscope-switchparameter","title":"<code>-PSRuleIgnoreFullScope [&lt;SwitchParameter&gt;]</code>","text":"<p>Ignore full scope for PsRule Extraction</p>"},{"location":"operational-scripts-reference/#script-export-noncompliancereports","title":"Script <code>Export-NonComplianceReports</code>","text":"<p>Exports Non-Compliance Reports in CSV format</p> <pre><code>Export-NonComplianceReports [[-PacEnvironmentSelector] &lt;String&gt;] [-DefinitionsRootFolder &lt;String&gt;] [-OutputFolder &lt;String&gt;] [-WindowsNewLineCells] [-Interactive &lt;Boolean&gt;] [-OnlyCheckManagedAssignments] [-PolicyDefinitionFilter &lt;String[]&gt;] [-PolicySetDefinitionFilter &lt;String[]&gt;] [-PolicyAssignmentFilter &lt;String[]&gt;] [-PolicyEffectFilter &lt;String[]&gt;] [-ExcludeManualPolicyEffect] [-RemediationOnly] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_5","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-pacenvironmentselector-string_1","title":"<code>-PacEnvironmentSelector &lt;String&gt;</code>","text":"<p>Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from `$DefinitionsRootFolder/global-settings.jsonc.</p>"},{"location":"operational-scripts-reference/#-definitionsrootfolder-string_3","title":"<code>-DefinitionsRootFolder &lt;String&gt;</code>","text":"<pre><code>    Definitions folder path. Defaults to environment variable `$env:PAC_DEFINITIONS_FOLDER or './Definitions'.\n</code></pre>"},{"location":"operational-scripts-reference/#-outputfolder-string_2","title":"<code>-OutputFolder &lt;String&gt;</code>","text":"<p>Output Folder. Defaults to environment variable `$env:PAC_OUTPUT_FOLDER or './Outputs'.</p>"},{"location":"operational-scripts-reference/#-windowsnewlinecells-switchparameter_1","title":"<code>-WindowsNewLineCells [&lt;SwitchParameter&gt;]</code>","text":"<p>Formats CSV multi-object cells to use new lines and saves it as UTF-8 with BOM - works only fro Excel in Windows. Default uses commas to separate array elements within a cell</p>"},{"location":"operational-scripts-reference/#-interactive-boolean_3","title":"<code>-Interactive &lt;Boolean&gt;</code>","text":"<p>Set to false if used non-interactive</p>"},{"location":"operational-scripts-reference/#-onlycheckmanagedassignments-switchparameter_1","title":"<code>-OnlyCheckManagedAssignments [&lt;SwitchParameter&gt;]</code>","text":"<p>Include non-compliance data only for Policy assignments owned by this Policy as Code repo</p>"},{"location":"operational-scripts-reference/#-policydefinitionfilter-string_1","title":"<code>-PolicyDefinitionFilter &lt;String[]&gt;</code>","text":"<p>Filter by Policy definition names (array) or ids (array).</p>"},{"location":"operational-scripts-reference/#-policysetdefinitionfilter-string_1","title":"<code>-PolicySetDefinitionFilter &lt;String[]&gt;</code>","text":"<p>Filter by Policy Set definition names (array) or ids (array).</p>"},{"location":"operational-scripts-reference/#-policyassignmentfilter-string_1","title":"<code>-PolicyAssignmentFilter &lt;String[]&gt;</code>","text":"<p>Filter by Policy Assignment names (array) or ids (array).</p>"},{"location":"operational-scripts-reference/#-policyeffectfilter-string_1","title":"<code>-PolicyEffectFilter &lt;String[]&gt;</code>","text":"<p>Filter by Policy Effect (array).</p>"},{"location":"operational-scripts-reference/#-excludemanualpolicyeffect-switchparameter","title":"<code>-ExcludeManualPolicyEffect [&lt;SwitchParameter&gt;]</code>","text":"<p>Switch parameter to filter out Policy Effect Manual</p>"},{"location":"operational-scripts-reference/#-remediationonly-switchparameter","title":"<code>-RemediationOnly [&lt;SwitchParameter&gt;]</code>","text":"<p>Filter by Policy Effect \"deployifnotexists\" and \"modify\" and compliance status \"NonCompliant\"</p>"},{"location":"operational-scripts-reference/#script-get-azexemptions","title":"Script <code>Get-AzExemptions</code>","text":"<p>Retrieves Policy Exemptions from an EPAC environment and saves them to files.</p> <pre><code>Get-AzExemptions [[-PacEnvironmentSelector] &lt;String&gt;] [-DefinitionsRootFolder &lt;String&gt;] [-OutputFolder &lt;String&gt;] [-Interactive &lt;Boolean&gt;] [-FileExtension &lt;String&gt;] [-ActiveExemptionsOnly] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_6","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-pacenvironmentselector-string_2","title":"<code>-PacEnvironmentSelector &lt;String&gt;</code>","text":"<p>Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from `$DefinitionsRootFolder/global-settings.jsonc.</p>"},{"location":"operational-scripts-reference/#-definitionsrootfolder-string_4","title":"<code>-DefinitionsRootFolder &lt;String&gt;</code>","text":"<p>Definitions folder path. Defaults to environment variable `$env:PAC_DEFINITIONS_FOLDER or './Definitions'.</p>"},{"location":"operational-scripts-reference/#-outputfolder-string_3","title":"<code>-OutputFolder &lt;String&gt;</code>","text":"<p>Output Folder. Defaults to environment variable `$env:PAC_OUTPUT_FOLDER or './Outputs'.</p>"},{"location":"operational-scripts-reference/#-interactive-boolean_4","title":"<code>-Interactive &lt;Boolean&gt;</code>","text":"<p>Set to false if used non-interactive</p>"},{"location":"operational-scripts-reference/#-fileextension-string_1","title":"<code>-FileExtension &lt;String&gt;</code>","text":"<p>File extension type for the output files. Valid values are json or jsonc. The default output file is json.</p>"},{"location":"operational-scripts-reference/#-activeexemptionsonly-switchparameter","title":"<code>-ActiveExemptionsOnly [&lt;SwitchParameter&gt;]</code>","text":"<p>Set to true to only generate files for active (not expired and not orphaned) exemptions. Defaults to false.</p>"},{"location":"operational-scripts-reference/#script-get-azmissingtags","title":"Script <code>Get-AzMissingTags</code>","text":"<p>Gets all resources that are missing tags in the current subscription.</p> <pre><code>Get-AzMissingTags [[-PacEnvironmentSelector] &lt;String&gt;] [-DefinitionsRootFolder &lt;String&gt;] [-OutputFileName &lt;String&gt;] [-Interactive &lt;Boolean&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_7","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-pacenvironmentselector-string_3","title":"<code>-PacEnvironmentSelector &lt;String&gt;</code>","text":"<p>Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from `$DefinitionsRootFolder/global-settings.jsonc.</p>"},{"location":"operational-scripts-reference/#-definitionsrootfolder-string_5","title":"<code>-DefinitionsRootFolder &lt;String&gt;</code>","text":"<p>Definitions folder path. Defaults to environment variable `$env:PAC_DEFINITIONS_FOLDER or './Definitions'.</p>"},{"location":"operational-scripts-reference/#-outputfilename-string","title":"<code>-OutputFileName &lt;String&gt;</code>","text":"<p>Output file name. Defaults to environment variable `$env:PAC_OUTPUT_FOLDER/Tags/missing-tags-results.csv or './Outputs/Tags/missing-tags-results.csv'.</p>"},{"location":"operational-scripts-reference/#-interactive-boolean_5","title":"<code>-Interactive &lt;Boolean&gt;</code>","text":"<p>Set to false if used non-interactive</p>"},{"location":"operational-scripts-reference/#script-get-azpolicyaliasoutputcsv","title":"Script <code>Get-AzPolicyAliasOutputCSV</code>","text":"<p>Gets all aliases and outputs them to a CSV file.</p> <pre><code>Get-AzPolicyAliasOutputCSV [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#script-new-azpolicyreaderrole","title":"Script <code>New-AzPolicyReaderRole</code>","text":"<p>Creates a custom role 'Policy Reader' that provides read access to all Policy resources to plan the EPAC deployments.</p> <pre><code>New-AzPolicyReaderRole [[-PacEnvironmentSelector] &lt;String&gt;] [-DefinitionsRootFolder &lt;String&gt;] [-Interactive &lt;Boolean&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_8","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-pacenvironmentselector-string_4","title":"<code>-PacEnvironmentSelector &lt;String&gt;</code>","text":"<p>Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from `$DefinitionsRootFolder/global-settings.jsonc.</p>"},{"location":"operational-scripts-reference/#-definitionsrootfolder-string_6","title":"<code>-DefinitionsRootFolder &lt;String&gt;</code>","text":"<pre><code>Definitions folder path. Defaults to environment variable `$env:PAC_DEFINITIONS_FOLDER or './Definitions'.\n</code></pre>"},{"location":"operational-scripts-reference/#-interactive-boolean_6","title":"<code>-Interactive &lt;Boolean&gt;</code>","text":"<p>Set to false if used non-interactive</p>"},{"location":"operational-scripts-reference/#script-new-hydrationdefinitionfolder","title":"Script <code>New-HydrationDefinitionFolder</code>","text":"<p>Creates a definitions folder with the correct folder structure and blank global settings file.</p> <pre><code>New-HydrationDefinitionFolder [[-DefinitionsRootFolder] &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#description","title":"Description","text":"<p>Creates a definitions folder with the correct folder structure and blank global settings file.</p>"},{"location":"operational-scripts-reference/#parameters_9","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-definitionsrootfolder-string_7","title":"<code>-DefinitionsRootFolder &lt;String&gt;</code>","text":"<p>The folder path to create the definitions root folder (./Definitions)</p>"},{"location":"operational-scripts-reference/#script-new-epacglobalsettings","title":"Script <code>New-EpacGlobalSettings</code>","text":"<p>Creates a global-settings.jsonc file with a new GUID, managed identity location and tenant information</p> <pre><code>New-EpacGlobalSettings [-ManagedIdentityLocation] &lt;String&gt; [-TenantId] &lt;String&gt; [-DefinitionsRootFolder] &lt;String&gt; [-DeploymentRootScope] &lt;String&gt; [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_10","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-managedidentitylocation-string","title":"<code>-ManagedIdentityLocation &lt;String&gt;</code>","text":"<p>The Azure location to store the managed identities (Get-AzLocation|Select Location)</p>"},{"location":"operational-scripts-reference/#-tenantid-string","title":"<code>-TenantId &lt;String&gt;</code>","text":"<p>The Azure tenant id</p>"},{"location":"operational-scripts-reference/#-definitionsrootfolder-string_8","title":"<code>-DefinitionsRootFolder &lt;String&gt;</code>","text":"<p>The folder path to where the New-EpacDefinitionsFolder command created the definitions root folder (C:\\definitions)</p>"},{"location":"operational-scripts-reference/#-deploymentrootscope-string","title":"<code>-DeploymentRootScope &lt;String&gt;</code>","text":"<p>The root management group to export definitions and assignments (/providers/Microsoft.Management/managementGroups/)</p>"},{"location":"operational-scripts-reference/#script-new-epacpolicyassignmentdefinition","title":"Script <code>New-EpacPolicyAssignmentDefinition</code>","text":"<p>Exports a policy assignment from Azure to a local file in the EPAC format.</p> <pre><code>New-EpacPolicyAssignmentDefinition [-PolicyAssignmentId] &lt;String&gt; [[-OutputFolder] &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_11","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-policyassignmentid-string","title":"<code>-PolicyAssignmentId &lt;String&gt;</code>","text":"<p>The policy assignment id</p>"},{"location":"operational-scripts-reference/#-outputfolder-string_4","title":"<code>-OutputFolder &lt;String&gt;</code>","text":"<p>The folder path for the Policy Assignment.</p>"},{"location":"operational-scripts-reference/#script-new-epacpolicydefinition","title":"Script <code>New-EpacPolicyDefinition</code>","text":"<p>Exports a Policy definition from Azure to a local file in the EPAC format</p> <pre><code>New-EpacPolicyDefinition [-PolicyDefinitionId] &lt;String&gt; [[-OutputFolder] &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_12","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-policydefinitionid-string","title":"<code>-PolicyDefinitionId &lt;String&gt;</code>","text":"<p>The Policy definition id.</p>"},{"location":"operational-scripts-reference/#-outputfolder-string_5","title":"<code>-OutputFolder &lt;String&gt;</code>","text":"<p>The folder path for the Policy Definition.</p>"},{"location":"operational-scripts-reference/#script-new-pipelinefromstarterkit","title":"Script <code>New-PipelineFromStarterKit</code>","text":"<p>This script copies pipelines and templates from the starter kit to a new folder. The script assembles the pipelines/workflows based on the type of pipeline to create, the branching flow to implement, and the type of script to use.</p> <pre><code>New-PipelineFromStarterKit [[-StarterKitFolder] &lt;String&gt;] [[-PipelinesFolder] &lt;String&gt;] [[-PipelineType] &lt;String&gt;] [[-BranchingFlow] &lt;String&gt;] [[-ScriptType] &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"operational-scripts-reference/#parameters_13","title":"Parameters","text":""},{"location":"operational-scripts-reference/#-starterkitfolder-string","title":"<code>-StarterKitFolder &lt;String&gt;</code>","text":"<p>Starter kit folder</p>"},{"location":"operational-scripts-reference/#-pipelinesfolder-string","title":"<code>-PipelinesFolder &lt;String&gt;</code>","text":"<p>New pipeline folder</p>"},{"location":"operational-scripts-reference/#-pipelinetype-string","title":"<code>-PipelineType &lt;String&gt;</code>","text":"<p>Type of DevOps pipeline to create AzureDevOps or GitHubActions?</p>"},{"location":"operational-scripts-reference/#-branchingflow-string","title":"<code>-BranchingFlow &lt;String&gt;</code>","text":"<p>Implementing branching flow Release or GitHub</p>"},{"location":"operational-scripts-reference/#-scripttype-string","title":"<code>-ScriptType &lt;String&gt;</code>","text":"<p>Using Powershell module or script?</p>"},{"location":"operational-scripts/","title":"Operational Scripts","text":"<p>The scripts are detailed in the reference page including  syntax, descriptions and parameters.</p>"},{"location":"operational-scripts/#batch-creation-of-remediation-tasks","title":"Batch Creation of Remediation Tasks","text":"<p>The script <code>New-AzRemediationTasks</code> creates remediation tasks for all non-compliant resources for EPAC environments in the <code>global-settings.jsonc</code> file.</p> <p>This script executes all remediation tasks in a Policy as Code environment specified with parameter <code>PacEnvironmentSelector</code>. The script will interactively prompt for the value if the parameter is not supplied. The script will recurse the Management Group structure and subscriptions from the defined starting point.</p> <ul> <li>Find all Policy assignments with potential remediation capable resources</li> <li>Query Policy Insights for non-complaint resources</li> <li>Start remediation task for each Policy with non-compliant resources</li> <li>Switch parameter <code>-OnlyCheckManagedAssignments</code> includes non-compliance data only for Policy assignments owned by this Policy as Code repo.</li> </ul>"},{"location":"operational-scripts/#links","title":"Links","text":"<ul> <li>Remediate non-compliant resources with Azure Policy</li> <li>Start-AzPolicyRemediation</li> </ul>"},{"location":"operational-scripts/#documenting-policy","title":"Documenting Policy","text":"<p><code>Build-PolicyDocumentation</code> builds documentation from instructions in the <code>policyDocumentations</code> folder reading the deployed Policy Resources from the EPAC environment. It is also used to generate parameter/effect CSV files for Policy Assignment files. See usage documentation in Documenting Policy.</p>"},{"location":"operational-scripts/#policy-resources-exports","title":"Policy Resources Exports","text":"<ul> <li><code>Export-AzPolicyResources</code> exports Azure Policy resources in EPAC. See usage documentation in Extract existing Policy Resources.</li> <li><code>Get-AzExemptions</code> retrieves Policy Exemptions from an EPAC environment and saves them to files.</li> <li><code>Get-AzPolicyAliasOutputCSV</code> exports Policy Aliases to CSV format.</li> </ul>"},{"location":"operational-scripts/#hydration-kit","title":"Hydration Kit","text":"<p>The Hydration Kit is a set of scripts that can be used to deploy an EPAC environment from scratch. The scripts are documented in the Hydration Kit page.</p>"},{"location":"operational-scripts/#cicd-helpers","title":"CI/CD Helpers","text":"<p>The scripts <code>New-AzureDevOpsBug</code> and <code>New-GitHubIssue</code> create a Bug or Issue when there are one or multiple failed Remediation Tasks.</p>"},{"location":"operational-scripts/#export-from-azadvertizer","title":"Export from AzAdvertizer","text":"<p>The script <code>Export-PolicyToEPAC.ps1</code> creates for you the policyAssignments, policyDefinitions, and policySetDefinitions based on the provided URL in an Output folder under 'ALZ-Export'.</p> <p>Parameters:</p> <ul> <li> <p>PolicyDefinitionId: Mandatory url of the policy or policy set from AzAdvertizer.</p> </li> <li> <p>PolicySetDefinitionId: Mandatory url of the policy or policy set from AzAdvertizer.</p> </li> <li> <p>ALZPolicyDefinitionId: Mandatory url of the policy or policy set from AzAdvertizer.</p> </li> <li> <p>ALZPolicySetDefinitionId: Mandatory url of the policy or policy set from AzAdvertizer.</p> </li> <li> <p>OutputFolder: Output Folder. Defaults to the path 'Output'.</p> </li> <li> <p>AutoCreateParameters: Automatically create parameters for Azure Policy Sets and Assignment Files.</p> </li> <li> <p>UseBuiltIn: Default to using builtin policies rather than local versions.</p> </li> <li> <p>Scope: Used to set scope value on each assignment file.</p> </li> <li> <p>PacSelector: Used to set PacEnvironment for each assignment file.</p> </li> <li> <p>OverwriteOutput: Used to Overwrite the contents of the output folder with each run. Helpful when running consecutively.</p> </li> </ul>"},{"location":"operational-scripts/#non-compliance-reports","title":"Non-compliance Reports","text":"<p><code>Export-NonComplianceReports</code> exports non-compliance reports for EPAC environments . It outputs the reports in the <code>$OutputFolders/non-compliance-reports</code> folder.</p> <ul> <li><code>summary-by-policy.csv</code> contains the summary of the non-compliant resources by Policy definition. The columns contain the resource counts.</li> <li><code>summary-by-resource.csv</code> contains the summary of the non-compliant resources. The columns contain the number of Policies causing the non-compliance.</li> <li><code>details-by-policy.csv</code> contains the details of the non-compliant resources by Policy definition including the non-compliant resource ids. Assignments are combined by Policy definition.</li> <li><code>details-by-resource.csv</code> contains the details of the non-compliant resources sorted by Resource id. Assignments are combined by Resource id.</li> <li><code>full-details-by-assignment.csv</code> contains the details of the non-compliant resources sorted by Policy Assignment id.</li> <li><code>full-details-by-resource.csv</code> contains the details of the non-compliant resources sorted by Resource id including the Policy Assignment details.</li> </ul>"},{"location":"operational-scripts/#sample-summary-by-policycsv","title":"Sample <code>summary-by-policy.csv</code>","text":"Category Policy Name Policy Id Non Compliant Unknown Not Started Exempt Conflicting Error Assignment Ids Group Names General Audit usage of custom RBAC roles /providers/microsoft.authorization/policydefinitions/a451c1ef-c6ca-483d-87ed-f49761e3ffb5 9 0 0 0 0 0 /providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-nist-800-53-r5,/providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-asb azure_security_benchmark_v3.0_pa-7,nist_sp_800-53_r5_ac-6(7),nist_sp_800-53_r5_ac-2(7),nist_sp_800-53_r5_ac-6,nist_sp_800-53_r5_ac-2 Regulatory Compliance Control use of portable storage devices /providers/microsoft.authorization/policydefinitions/0a8a1a7d-16d3-4d8e-9f2c-6b8d9e1c7c1d 0 0 0 0 0 0 /providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-nist-800-53-r5,/providers/microsoft.management/managementgroups/pac-heinrich-dev-dev/providers/microsoft.authorization/policyassignments/dev-asb azure_security_benchmark_v3.0_pa-7,nist_sp_800-53_r5_ac-6(7),nist_sp_800-53_r5_ac-2(7),nist_sp_800-53_r5_ac-6,nist_sp_800-53_r5_ac-2"},{"location":"operational-scripts/#sample-summary-by-resourcecsv","title":"Sample <code>summary-by-resource.csv</code>","text":"Resource Id Subscription Id Subscription Name Resource Group Resource Type Resource Name Resource Qualifier Non Compliant Unknown Not Started Exempt Conflicting Error /subscriptions/******** ******** PAC-DEV-001 subscriptions 25 481 0 0 0 0 /subscriptions/********/providers/microsoft.authorization/roledefinitions/0b00bc79-2207-410c-b9d5-d5d182ad514f ******** PAC-DEV-001 microsoft.authorization/roledefinitions 0b00bc79-2207-410c-b9d5-d5d182ad514f 0 0 0 0 0 0"},{"location":"policy-assignments-csv-parameters/","title":"Policy Assignment Parameters from a CSV File","text":"<p>Assigning single or multiple security and compliance focused Policy Sets (Initiatives), such as Microsoft cloud security benchmark, NIST 800-53 R5, PCI, NIST 800-171, etc, with just JSON parameters becomes very complex fast. Add to this the complexity of overriding the effect if it is not surfaced as a parameter in the <code>Policy Set</code>. Finally, adding the optional <code>nonComplianceMessages</code> further increases the complexity.</p> <p>To address the problem of reading and maintaining hundreds or thousands of JSON lines, EPAC can use the content of a spreadsheet (CSV) to create <code>parameters</code>, <code>overrides</code> and optionally <code>nonComplianceMessages</code> for a single Policy assignment <code>definitionEntry</code> or multiple Policy definitions (<code>definitionEntryList</code>).</p> <p>Tip</p> <p>This approach is best for large Policy Sets such as Azure Security Benchmark, NIST 800-53, etc. Smaller Policy Sets should still be handled with JSON <code>parameters</code>, <code>overrides</code> and <code>nonComplianceMessages</code>.</p>"},{"location":"policy-assignments-csv-parameters/#generate-the-csv-file","title":"Generate the CSV File","text":""},{"location":"policy-assignments-csv-parameters/#from-a-list-of-policy-sets","title":"From a list of Policy Sets","text":"<p>Generating documentation for one or more Policy Sets, then modify the effect and parameter columns for each environment type you will use.</p>"},{"location":"policy-assignments-csv-parameters/#from-a-list-of-deployed-policy-assignments","title":"From a list of deployed Policy Assignments","text":"<p>If you want to switch from JSON to CSV or start EPAC from an existing deployment, generate this CSV file frm your already deployed Assignment(s).</p>"},{"location":"policy-assignments-csv-parameters/#csv-file","title":"CSV File","text":"<p>In the example header below the infrastructure environments prod, test, dev, and sandbox are used as prefixes to the columns for Effect and Parameters respectively. Optionally you can add a column for <code>nonComplianceMessages</code></p> <p>The CSV file generated contains the following headers/columns:</p> <ul> <li><code>name</code> is the name of the policyDefinition referenced by the Policy Sets being assigned.</li> <li><code>referencePath</code> is only used if the Policy is used more than once in at least one of the Policy Sets to disambiguate them. The format is <code>&lt;policySetName&gt;//&lt;policyDefinitionReferenceId&gt;</code>.</li> <li><code>policyType</code>,<code>category</code>,<code>displayName</code>,<code>description</code>,<code>groupNames</code>,<code>policySets</code>,<code>allowedEffects</code> are optional and not used for deployment planning. They assist you in filling out the <code>&lt;env&gt;Effect</code> columns. The CSV file is sorted alphabetically by <code>category</code> and <code>displayName</code>.</li> <li><code>&lt;env&gt;Effect</code> columns must contain one of the allowedValues or allowedOverrides values. You define which scopes define each type of environment and what short name you give the environment type to use as a column prefix.</li> <li><code>&lt;env&gt;Parameters</code> can contain additional parameters. You can also specify such parameters in JSON. EPAC will use the union of all parameters.</li> <li><code>nonComplianceMessages</code> column is optional. The documentation script does not generate this column.</li> </ul> <p>Note</p> <p>Additional columns are allowed and ignored by EPAC.</p> <p>EPAC will find the effect parameter name for each Policy in each Policy Set and use them. If no effect parameter is defined by the Policy Set, EPAC will use <code>overrides</code> to set the effect. EPAC will generate the <code>policyDefinitionReferenceId</code> for <code>nonComplianceMessages</code>.</p> <p>After building the spreadsheet, you must reference the CSV file and the column prefix in each tree branch. <code>parameterFile</code> must occur once per tree branch. Define it adjacent to the <code>'definitionEntry</code> or <code>definitionEntryList</code> to improve readability.</p> <pre><code>\"parameterFile\": \"security-baseline-parameters.csv\",\n\"definitionEntryList\": [\n    {\n        \"policySetName\": \"1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"asb\",\n            \"displayName\": \"Azure Security Benchmark\",\n            \"description\": \"Azure Security Benchmark Initiative. \"\n        }\n    },\n    {\n        \"policySetName\": \"179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"nist-800-53-r5\",\n            \"displayName\": \"NIST SP 800-53 Rev. 5\",\n            \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n        }\n    }\n],\n</code></pre> <p>In the child nodes specifying the scope(s) specify which column prefix to use for selecting the CSV columns with <code>parameterSelector</code>. The actual prefix names have no meaning; they only need to match between the JSON below and the CSV file.</p> <pre><code>{\n    \"nodeName\": \"Prod/\",\n    \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with initiative \"\n    },\n    \"parameterSelector\": \"prod\",\n    \"scope\": {\n        \"epac-dev\": [\n            \"/providers/Microsoft.Management/managementGroups/Epac-Mg-Prod\"\n        ],\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n    }\n},\n</code></pre> <p>The element <code>nonComplianceMessageColumn</code> may appear anywhere in the tree. Definitions at a child override the previous setting. If no <code>nonComplianceMessageColumn</code> is specified, the spreadsheet is not used for the (optional) <code>nonComplianceMessages</code>.</p> <pre><code>{\n    \"nodeName\": \"Prod/\",\n    \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with initiative \"\n    },\n    \"parameterSelector\": \"prod\",\n    \"nonComplianceMessageColumn\": \"nonComplianceMessages\"\n    \"scope\": {\n        \"epac-dev\": [\n            \"/providers/Microsoft.Management/managementGroups/Epac-Mg-Prod\"\n        ],\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n    }\n},\n</code></pre>"},{"location":"policy-assignments-csv-parameters/#effects-for-definitionentrylist-policy-sets-with-overlapping-policies","title":"Effects for <code>definitionEntryList</code> Policy Sets with Overlapping Policies","text":"<p>Policy Set definitions often have a large overlap. In CSV files the Policy only shows up once. When EPAC processes the CSV file, it will use the effect from the first Policy Set definition in the <code>definitionEntryList</code> that contains the Policy.</p> <p>For the next Policy Set in the <code>definitionEntryList</code> that contains the same Policy, EPAC will adjust the effect: - <code>Append</code>, <code>Modify</code> and <code>Deny</code> will be adjusted to <code>Audit</code> - <code>DeployIfNotExists</code> will be adjusted to <code>AuditIfNotExists</code></p>"},{"location":"policy-assignments-csv-parameters/#updating-the-csv-file","title":"Updating the CSV File","text":"<p>Policy Set definitions for built-in or custom Policy Sets are sometimes updated. When this happens, the CSV file must be updated to reflect the changes. EPAC displays a Warning  when this happens.</p>"},{"location":"policy-assignments-csv-parameters/#policy-removed-policy-from-row-in-the-csv-file-is-not-used-in-any-policy-set","title":"Policy Removed (Policy from Row in the CSV File is not used in any Policy Set)","text":"<p>If a Policy is removed from every Policy Set, remove the row from the spreadsheet or regenerate the CSV file from the deployed Policy Assignments.</p>"},{"location":"policy-assignments-csv-parameters/#policy-added-policy-entry-is-missing-in-the-csv-file","title":"Policy Added (Policy Entry is missing in the CSV file)","text":"<p>If a Policy is added to a Policy Set, add the row manually to the CSV file. The Policy will be assigned with the default effect.</p> <p>Better, regenerate the CSV file from the deployed Policy Assignments. This will ensure that all Policies are included in the CSV file. However, this does not generate the <code>nonComplianceMessages</code> column or any additional columns you added.</p> <p>Note</p> <p>We have planned to add a feature to generate the CSV file from the Policy Assignments and merge them with your existing CSV File to preserve extra columns.</p>"},{"location":"policy-assignments/","title":"Policy Assignments","text":"<p>This chapter describes how Policy Assignments are handled by EPAC. Policy Assignments are the actual assignments of Policies and Policy Sets to scopes in Azure.</p>"},{"location":"policy-assignments/#assignment-json-structure","title":"Assignment JSON structure","text":"<p>Assignment JSON is hierarchical for efficient definitions, avoiding duplication (copy/paste) of JSON. Each branch of the tree is cumulative. Each tree node must include a <code>nodeName</code> - an arbitrary string exclusively used by EPAC to display an error location. EPAC concatenates a leading <code>/</code> and the nodeName entries encountered in the tree to create a \"breadcrumbs\" trail; therefore, we recommend that you use <code>/</code> to help separate the concatenated <code>nodeName</code>. The following partial and invalid assignment tree would create this error message.</p> <pre><code>{\n  \"nodeName\": \"/Security/\",\n  \"definitionEntry\": {\n    \"policySetName\": \"org-sec-initiative\",\n  },\n  \"children\": [\n    {\n      \"nodeName\": \"Prod/\",\n      \"parameters\": {\n        \"some-effect\": \"Deny\",\n      }\n    }\n  ]\n}\n</code></pre> <p></p>"},{"location":"policy-assignments/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-assignment-schema.json\"\n}\n</code></pre>"},{"location":"policy-assignments/#policy-assignment-file-folder-structure-guidelines","title":"Policy Assignment File Folder Structure Guidelines","text":"<p>In any EPAC deployment you will have a number of assignment files. When a deployment plan is built EPAC does a recursive search for all the files in the <code>policyAssignments</code> folder. This means that you are free to use any folder structure you think is appropriate to help organise the files. For example if you have a multi-tenant or multi-environment setup you might choose to create folders representing each tenant or environment and then store the assignment files for each environment in that folder.</p>"},{"location":"policy-assignments/#key-points","title":"Key Points","text":"<ul> <li>Every tree branch must accumulate a <code>definitionEntry</code> (or <code>definitionEntryList</code>), Assignment naming (<code>name</code> and <code>displayName</code>) and <code>scope</code> element.</li> <li>The elements <code>parameters</code>, <code>overrides</code>, <code>resourceSelectors</code>, <code>notScope</code>, <code>enforcementMode</code>, <code>metadata</code>, <code>userAssignedIdentity</code>, <code>managedIdentityLocations</code>,<code>additionalRoleAssignments</code>and<code>nonComplianceMessages</code> are optional.</li> <li>For Policy Sets with large numbers of included Policies you should use a spreadsheet (CSV file) to manage effects (parameterized or effect <code>overrides</code>), <code>parameters</code> and optional <code>nonComplianceMessages</code>. We recommend the CSV approach for Policy Sets with more than 10 included Policies.</li> <li>EPAC continues to support deprecated elements <code>initiativeId</code>, <code>initiativeName</code> and <code>ignoreBranch</code>, Consider using their replacements <code>policySetId</code>, <code>policySetName</code> and <code>enforcementMode</code> instead.</li> <li>Role Assignments for user-assigned Managed Identities (UAMI) are not managed by EPAC, and will not generate a <code>roles-plan.json</code> file.</li> <li><code>additionalRoleAssignments</code> are used when a resource required is not in the current scope. For example, a Policy Assignment that requires a Event Hub to be managed in a subscription not contained in the current management group.</li> </ul> <p>Tip</p> <p>The tree is not required to be balanced. The number of levels is not restricted; however, anything beyond 3 levels is unnecessary in real scenarios and would be difficult to read and manage as the depth increases.</p>"},{"location":"policy-assignments/#assignment-element-and-metadata","title":"Assignment Element and Metadata","text":"<p>Each Assignment is required to have a <code>name</code> which is used in its resource Id. EPAC also requires a <code>displayName</code>. The <code>description</code> is optional. For the allowed location assignment you specify the component with:</p> <pre><code>\"assignment\": {\n    \"name\": \"allowed-locations\",\n    \"displayName\": \"Allowed Locations\",\n    \"description\": \"Sets the allowed locations.\"\n},\n</code></pre> <p>Multiple <code>assignment</code> naming components in a tree branch are string concatenated for each of the three fields.</p> <p>Warning</p> <p>Azure has a limit of 24 characters for the concatenated <code>name</code> string. EPAC displays an error if this limit is exceeded. Azure also has a limit of 128 characters for <code>displayName</code> and 512 characters for <code>description</code> (For additional information see Assignment Structure: Display name and description).</p>"},{"location":"policy-assignments/#defining-metadata","title":"Defining <code>metadata</code>","text":"<p><code>metadata</code> is sometimes used to assign categories for changes. Do NOT specify EPAC-reserved elements <code>roles</code> and <code>pacOwnerId</code>. For the final <code>metadata</code> EPAC creates the union of instances in the entire tree branch.</p> <pre><code>\"metadata\": {\n    \"category\": \"Security\"\n}\n</code></pre> <p>Not recommended: Adding <code>assignedBy</code> to the <code>metadata</code> overrides the <code>deployedBy</code> value from the <code>global-settings.jsonc</code> file normally used for <code>assignedBy</code>. It defaults to <code>\"epac/$pacOwnerId/$pacSelector\"</code>.</p> <pre><code>\"metadata\": {\n    \"category\": \"Security\",\n    \"assignedBy\": \"security-team@epac/epac/00000000-0000-0000-0000-000000000000/tenant\"\n}\n</code></pre>"},{"location":"policy-assignments/#metadata-for-role-assignments","title":"Metadata for Role Assignments","text":"<p>Role assignments do not contain a <code>metadata</code> field. Instead, the <code>description</code> field is used to populate the <code>deployedBy</code> value. The <code>description</code> field is populated with the Policy Assignment Id, reason and <code>deployedBy</code> value. This is useful for tracking the source of the Role Assignment.</p> <p>Reasons is one of:</p> <ul> <li><code>Role Assignment required by Policy</code> - Policy definition(s) specify the required Role Definition Ids.</li> <li><code>additional Role Assignment</code> - from filed \"additionalRoleAssignments\" in the Policy Assignment file.</li> <li><code>additional cross tenant Role Assignment</code> - from filed \"additionalRoleAssignments\" with <code>crossTenant</code> set to <code>$true</code> in the Policy Assignment file.</li> </ul>"},{"location":"policy-assignments/#assigning-policy-sets-or-policies","title":"Assigning Policy Sets or Policies","text":""},{"location":"policy-assignments/#assigning-a-single-policy-or-policy-set","title":"Assigning a single Policy or Policy Set","text":"<p>Each assignment assigns either a Policy or Policy Set. In EPAC this is done with a <code>definitionEntry</code> or a <code>definitionEntryList</code>. Exactly one occurrence must exist in any collated tree branch. For each entry, you need to specify one of the following:</p> <ul> <li><code>policyName</code> - custom Policy. Specifying just the name allows EPAC to inject the correct definition scope.</li> <li><code>policySetName</code> - custom Policy Set. Specifying just the name allows EPAC to inject the correct definition scope</li> <li><code>policyId</code> - resource id for builtin Policy.</li> <li><code>policySetId</code> - resource id for builtin Policy Set.</li> </ul> <p><code>displayName</code> is an optional field to document the entry if the Policy name is a GUID. Builtin Policies and Policy Sets use a GUID.</p> <pre><code>\"definitionEntry\": {\n    \"policySetName\": \"general-allowed-locations-policy-set\",\n    \"displayName\": \"Use this if the Policy name is a GUID\"\n},\n</code></pre>"},{"location":"policy-assignments/#assigning-multiple-policies-or-policy-sets","title":"Assigning multiple Policies or Policy Sets","text":"<p>Using <code>definitionEntryList</code> allows you to save on copy/paste tree branches. Without it, the number of branches would need to be duplicated as many times as the list has entries.</p> <p>Each entry in the list creates an Assignment at each leaf of the tree. Since assignments must have unique names at a specific scope, the Assignment naming component must be amended for each list entry. In this sub-component you can decide if you want to concatenate the string by appending or prepending them by specifying <code>append</code> boolean value.</p> <pre><code>\"definitionEntryList\": [\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"asb\",\n            \"displayName\": \"Azure Security Benchmark\",\n            \"description\": \"Azure Security Benchmark Initiative. \"\n        }\n    },\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"nist-800-53-r5\",\n            \"displayName\": \"NIST SP 800-53 Rev. 5\",\n            \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n        }\n    }\n],\n</code></pre> <p>In the above example one of the children (leaf node) has the following Assignment name.</p> <pre><code>\"assignment\": {\n    \"name\": \"pr-\",\n    \"displayName\": \"Prod \",\n    \"description\": \"Prod Environment controls enforcement with \"\n},\n</code></pre> <p>This example generates two assignments at the \"prod\" leaf per scope:</p> <ul> <li>/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/pr-asb</li> <li><code>displayName</code> = \"Prod Azure Security Benchmark\"</li> <li><code>description</code> = \"Prod Environment controls enforcement with Azure Security Benchmark Initiative.\"</li> <li>/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/pr-nist-800-53-r5</li> <li><code>displayName</code> = \"Prod NIST SP 800-53 Rev. 5\"</li> <li><code>description</code> = \"Prod Environment controls enforcement with NIST SP 800-53 Rev. 5 Initiative.\"</li> </ul>"},{"location":"policy-assignments/#assignment-scopes-and-excluded-scopes","title":"Assignment scopes and excluded scopes","text":"<p><code>scope</code> is required exactly once in each tree branch. Excluded scopes (<code>notScope</code>) are cumulative from <code>global-settings.json</code> and the entire tree branch; however, once a scope is defined <code>notScopes</code> may not be defined at any child node.</p> <p>Both <code>scope</code> and <code>notScopes</code> are specific to an EPAC Environment using the pacSelector name, e.g., <code>epac-dev</code> and <code>tenant</code>.</p> <pre><code>\"scope\": {\n    \"epac-dev\": [\n        \"/providers/Microsoft.Management/managementGroups/Epac-Prod\"\n    ],\n    \"tenant\": [\n        \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        \"/providers/Microsoft.Management/managementGroups/Contoso-Prod2\"\n    ]\n}\n</code></pre> <p><code>notScopes</code> works the same. In addition <code>\"*\"</code> means all EPAC Environments.</p> <pre><code>\"notScopes\": {\n    \"*\": [\n        \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-pattern*\"\n    ],\n    \"tenant\": [\n        \"/providers/Microsoft.Management/managementGroups/&lt;mg-id&gt;\"\n    ]\n}\n</code></pre>"},{"location":"policy-assignments/#managed-identities-and-role-assignments","title":"Managed Identities and role assignments","text":"<p>Policies with a <code>DeployIfNotExists</code> or <code>Modify</code> effect need a Managed Identity (MI) and role assignments to execute remediation tasks. EPAC calculates the necessary role assignments based on the <code>roleDefinitionIds</code> in the policy definition. By default EPAC uses a system-assigned Managed Identity. The team maintaining EPAC recommend using system-assigned identities; however, your organization may have role assignment reasons to use user-assigned Managed Identities.</p>"},{"location":"policy-assignments/#defining-managedidentitylocations","title":"Defining <code>managedIdentityLocations</code>","text":"<p>Policy assignments requiring a Managed Identity (system-assigned or user-assigned) require a location <code>managedIdentityLocations</code>. You must specify the location based on EPAC Environment or use <code>\"*\"</code> to use the same location for all of the EPAC Environments. You can specify them in <code>global-settings.jsonc</code> or at any node in the tree. The last (closest to the leaf node) is the one chosen if multiple <code>managedIdentityLocations</code> entries are encountered in a tree branch.</p> <pre><code>\"managedIdentityLocations\": {\n    \"*\": \"eastus2\"\n},\n</code></pre>"},{"location":"policy-assignments/#defining-optional-additionalroleassignments","title":"Defining optional <code>additionalRoleAssignments</code>","text":"<p>In some scenarios you will need <code>additionalRoleAssignments</code>; e.g., for diagnostics settings to Event Hubs, the target resource might be in a different Management Group and therefore the Managed Identity requires additional role assignments. You must specify the <code>additionalRoleAssignments</code> based on EPAC Environment or use <code>\"*\"</code>to use the same <code>additionalRoleAssignments</code>for all of the EPAC Environments.  If the pacEnvironment under deployment is specified in the additionalRoleAssignments, the <code>\"*\"</code> assignments will be ignored.</p> <p>If the additional assignment is to made to a managing tenant in the scenario where the pacEnvironment under deployment is a managed (Azure Lighthouse) tenant, you must specify <code>\"\"crossTenant\": true\"</code> for that assignment.  Ensure all necessary ABAC permissions are in place for the executing SPN.</p> <pre><code>\"additionalRoleAssignments\": {\n    \"*\": [\n        {\n            \"roleDefinitionId\": \"/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c\",\n            \"scope\": \"/subscriptions/&lt;id&gt;/resourceGroups/&lt;example&gt;\"\n        }\n    ],\n    \"prod\": [\n        {\n            \"roleDefinitionId\": \"/providers/microsoft.authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635\",\n            \"scope\": \"/subscriptions/&lt;id&gt;/resourceGroups/&lt;example&gt;\"\n        }\n    ],\n    \"lighthouse\": [\n        {\n            \"roleDefinitionId\": \"/providers/microsoft.authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7\",\n            \"scope\": \"/subscriptions/945a01ac-ae61-41da-81b4-640a8441da7b\",\n            \"crossTenant\": true\n        }\n    ]\n  },\n</code></pre>"},{"location":"policy-assignments/#user-assigned-managed-identities","title":"User-assigned Managed Identities","text":"<p>Azure Policy can use a user-defined Managed Identity and EPAC allows you to use this functionality. You must specify the user-defined Managed Identity based on EPAC Environment or use <code>\"*\"</code> to use the same identity for all of the EPAC Environments (only possible in single tenant scenarios). Within each EPAC Environment entry, you can specify just the URI string indicating to use the same identity even if we are using a <code>definitionEntryList</code>, or in the case of a <code>definitionEntryList</code> can assign a different identity based on the definitionEntryList by specifying a matching <code>policyName</code>, <code>policyId</code>, <code>policySetName</code> or <code>policySetId</code>.</p> <pre><code>\"userAssignedIdentity\": {\n    // For single definitionEntry or when using the same identity for all definitions being assigned\n    \"tenant1\": \"/subscriptions/id/resourceGroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-1\",\n    \"tenant2\": [\n      // differentiate by assigned definition\n      {\n          \"policySetName\": \"somePolicySetName\",\n          \"identity\": \"/subscriptions/id/resourceGroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-2\"\n      },\n      {\n          \"policySetId\": \"somePolicySetId\",\n          \"identity\": \"/subscriptions/id/resourceGroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-3\"\n      }\n    ]\n}\n</code></pre> <p></p>"},{"location":"policy-assignments/#defining-parameters-overrides-and-noncompliancemessages","title":"Defining <code>parameters</code>, <code>overrides</code> and <code>nonComplianceMessages</code>","text":""},{"location":"policy-assignments/#utilizing-a-csv-file-to-define-parameters-overrides-and-noncompliancemessages","title":"Utilizing a CSV File to define <code>parameters</code>, <code>overrides</code> and <code>nonComplianceMessages</code>","text":"<p>Assigning single or multiple security and compliance focused Policy Sets (Initiatives), such as Microsoft Cloud Security Benchmark, NIST 800-53 R5, PCI, NIST 800-171, etc, with just JSON parameters becomes very complex. Add to this the complexity of overriding the effect if it is not surfaced as a parameter in the <code>Policy Set</code>. Finally, adding the optional <code>nonComplianceMessages</code> further increases the complexity.</p> <p>To address the problem of reading and maintaining hundreds or thousands of JSON lines, EPAC can use the content of a CSV file to create <code>parameters</code>, <code>overrides</code> and optionally <code>nonComplianceMessages</code> for a single Policy assignment <code>definitionEntry</code> or multiple Policy definitions (<code>definitionEntryList</code>).</p> <p>Tip</p> <p>This approach is best for large Policy Sets such as Azure Security Benchmark, NIST 800-53, etc. Smaller Policy Sets should still be handled with JSON <code>parameters</code>, <code>overrides</code> and <code>nonComplianceMessages</code>.</p> <p>Implement these steps as documented in Managing Policy Assignment Parameters with a CSV file.</p> <ul> <li>Generate the CSV file from your already deployed Assignment(s) or Policy Set(s).</li> <li>Modify the effect and parameter columns for each type of environment type you will use.</li> <li>Modify the Policy Assignment file to reference the CSV file and the column prefix.</li> <li>Update the CSV file with the new effect and parameter values.</li> </ul>"},{"location":"policy-assignments/#defining-parameters-with-json","title":"Defining <code>parameters</code> with JSON","text":"<p>Warning</p> <p><code>parameters</code> have a simplified JSON structure. You do not need the additional <code>value</code> indirection that Azure requests (EPAC will inject that indirection).</p> <pre><code>\"parameters\": {\n  \"aksClusterContainersAllowedImagesExcludedNamespaces\": [\n    \"kube-system\",\n    \"gatekeeper-system\",\n    \"azure-arc\"\n  ],\n  \"kvKeysActiveMaximumNumberOfDays\": 90,\n  \"publicNetworkAccessShouldBeDisabledForContainerRegistriesEffect\": \"Audit\",\n  \"mysqlDisablePublicNetworkAccessEffect\": \"Deny\",\n  \"kvRsaCryptographyMinimumKeySizeEffect\": \"Deny\",\n},\n</code></pre> <p>Note</p> <p>To enable <code>definitionEntryList</code>, parameters not present in the Policy or Policy Set definition are quietly ignored.</p>"},{"location":"policy-assignments/#advanced-elements","title":"Advanced Elements","text":""},{"location":"policy-assignments/#defining-overrides-with-json","title":"Defining <code>overrides</code> with JSON","text":"<p><code>overrides</code> are in the same format as documented by Azure. They are  cumulative in each tree branch. The <code>selectors</code> element is only used for Assignments of Policy Sets. They are not valid for Assignments of a single Policy.</p> <p>If using <code>definitionEntryList</code>, you must add the <code>policyName</code>, <code>policyId</code>, <code>policySetName</code> or <code>policySetId</code> as used in the <code>definitionEntryList</code> item.</p> <pre><code>\"overrides\": [\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"kind\": \"policyEffect\",\n        \"value\": \"AuditIfNotExists\",\n        \"selectors\": [\n            {\n                \"kind\": \"policyDefinitionReferenceId\",\n                \"in\": [\n                    \"331e8ea8-378a-410f-a2e5-ae22f38bb0da\",\n                    \"385f5831-96d4-41db-9a3c-cd3af78aaae6\"\n                ]\n            }\n        ]\n    },\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"kind\": \"policyEffect\",\n        \"value\": \"AuditIfNotExists\",\n        \"selectors\": [\n            {\n                \"kind\": \"policyDefinitionReferenceId\",\n                \"in\": [\n                    \"cddd188c-4b82-4c48-a19d-ddf74ee66a01\",\n                    \"3cf2ab00-13f1-4d0c-8971-2ac904541a7e\"\n                ]\n            }\n        ]\n    }\n],\n</code></pre>"},{"location":"policy-assignments/#defining-noncompliancemessages-with-json","title":"Defining <code>nonComplianceMessages</code> with JSON","text":"<p>Assign a non-compliance message to the assignment, or individual non-compliance messages if the assignment is for an Policy Set. This value is an array of objects - each containing a message, and in the case of an initiative a policyDefinitionReferenceId. See this link for details.</p> <p>If you use single <code>definitionEntry</code>, place them normally. If you use a <code>definitionEntryList</code> place them in the respective list entry.</p> <pre><code>\"nonComplianceMessages\": [\n    {\n        \"message\": \"Update main message\"\n        // Default nonComplianceMessage\n    },\n    {\n        \"message\": \"Individual policy message\",\n        // Policy specific nonComplianceMessage. You must include the policyDefinitionReferenceId as defined in the Policy Set.\n        \"policyDefinitionReferenceId\": \"ASC_DeployAzureDefenderForSqlAdvancedThreatProtectionWindowsAgent\"\n    }\n],\n</code></pre>"},{"location":"policy-assignments/#defining-resourceselectors","title":"Defining <code>resourceSelectors</code>","text":"<p><code>resourceSelectors</code> may appear anywhere in the tree and are cumulative in any branch. They follow the standard Azure Format.</p> <pre><code>\"resourceSelectors\": [\n    {\n        \"name\": \"SDPRegions\",\n        \"selectors\": [\n            {\n                \"kind\": \"resourceLocation\",\n                \"in\": [ \"eastus\", \"westus\", \"centralus\", \"southcentralus\" ]\n            }\n        ]\n    }\n]\n</code></pre>"},{"location":"policy-assignments/#defining-enforcementmode","title":"Defining <code>enforcementMode</code>","text":"<p><code>enforcementMode</code> is similar to the deprecated <code>ignoreBranch</code>; it deploys the assignment and sets the assignment to <code>Default</code> or <code>DoNotEnforce</code>. <code>DoNotEnforce</code> allows a what-if analysis. <code>enforcementMode</code> may appear anywhere in the tree. Definitions at a child override the previous setting.</p> <pre><code>\"enforcementMode\": \"DoNotEnforce\",\n</code></pre>"},{"location":"policy-assignments/#example-assignment-files","title":"Example assignment files","text":""},{"location":"policy-assignments/#simple-policy-assignment-allowed-locations","title":"Simple Policy Assignment (Allowed Locations)","text":"<p>In the simple case an assignment is a single node with no difference in <code>assignment</code>, <code>parameters</code>, and <code>definitionEntry</code> across multiple scopes. In many scenarios \"Allowed Locations\" is such a simple Assignment. Such Assignments do not have child nodes, just the root node. Example</p> <pre><code>{\n  \"nodeName\": \"/root\",\n  \"definitionEntry\": {\n    \"displayName\": \"Allowed Locations Initiative\",\n    \"policySetName\": \"general-allowed-locations-policy-set\"\n  },\n  \"assignment\": {\n    \"name\": \"allowed-locations\",\n    \"displayName\": \"Allowed Locations\",\n    \"description\": \"Sets the allowed locations\"\n  },\n  \"metadata\": {},\n  \"enforcementMode\": \"Default\",\n  \"parameters\": {\n    \"AllowedLocations\": [\n      \"centralus\",\n      \"eastus\",\n      \"eastus2\",\n      \"southcentralus\"\n    ]\n  },\n  \"scope\": {\n    \"epac-dev\": [\n      \"/providers/Microsoft.Management/managementGroups/Epac-Mg-1\"\n    ],\n    \"tenant\": [\n      \"/providers/Microsoft.Management/managementGroups/c\"\n    ]\n  }\n}\n</code></pre> <ul> <li><code>nodeName</code> is required for error messages; its value is immaterial. EPAC concatenates them in the current tree branch.</li> <li><code>definitionEntry</code> specifies that the custom Policy Set <code>general-allowed-locations-policy-set</code> from our starter kit. <code>displayName</code> has no meaning - it is for readability and in this instance is superfluous.</li> <li><code>assignment</code> fields <code>name</code>, <code>displayName</code> and <code>description</code> are used when creating the assignment.</li> <li>This assignment has no <code>metadata</code>. You don't need an empty collection. EPAC will add <code>pacOwnerId</code> and <code>roles</code> <code>metadata</code>. Do not add them manually.</li> <li>enforcementMode is set to default - it is superfluous.</li> <li><code>parameters</code> are obvious. Note: you don't add the <code>value</code> layer Azure inserts - EPAC takes care of that.</li> <li><code>scope</code>:</li> <li>During Policy resource development (called <code>epac-dev</code>) the Assignment is deployed to an EPAC development Management Group <code>Epac-Mg-1</code>.</li> <li>During Policy prod deployments (<code>tenant</code>-wide), it is deployed to the tenant Management Group <code>Epac-Mg-1</code>.</li> <li>No <code>notScope</code> entries are specified.</li> </ul>"},{"location":"policy-assignments/#security-focused-policy-assignment-with-json-parameters","title":"Security-Focused Policy Assignment with JSON parameters","text":"<ul> <li>In the following example we named our root node (<code>nodeName</code>) <code>/security/</code>. Since it is only used in case of error messages produced by EPAC during planning its actual value doesn't matter as long as its unique.</li> <li>We use a <code>definitionEntryList</code> to create two assignments at every leaf (six assignments total).</li> <li>For <code>assignment</code> string concatenation we append the strings in the <code>definitionEntryList</code> to the strings in the child nodes. You can see this best when you look at the <code>description</code> string in the child  nodes. It will form a sentence when concatenated by <code>append</code>ing the <code>definitionEntryList</code> <code>assignment</code> field <code>description</code>.</li> <li>The <code>parameters</code> specified in the children are specific to the IaC environment types and their <code>scope</code>. Note: a real assignment would define many more parameters. The set here is abbreviated since the actual set could easily exceed a hundred entries for each of the IaC environments. We'll see in the next example how to simplify large Policy Set parameters with a CSV file.</li> </ul> <pre><code>{\n  \"nodeName\": \"/Security/\",\n  \"definitionEntryList\": [\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n      \"displayName\": \"Azure Security Benchmark\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"asb\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"description\": \"Azure Security Benchmark Initiative.\"\n      }\n    },\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n      \"displayName\": \"NIST SP 800-53 Rev. 5\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"nist-800-53-r5\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n      }\n    }\n  ],\n  \"children\": [\n    {\n      \"nodeName\": \"Prod/\",\n      \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with \"\n      },\n      \"parameters\": {\n        \"classicComputeVMsMonitoringEffect\": \"Deny\",\n        \"disallowPublicBlobAccessEffect\": \"deny\",\n        \"azureCosmosDBAccountsShouldHaveFirewallRulesMonitoringEffect\": \"Deny\",\n        \"allowedContainerImagesInKubernetesClusterEffect\": \"Audit\",\n        \"AllowedHostNetworkingAndPortsInKubernetesClusterEffect\": \"Disabled\",\n        \"clusterProtectionLevelInServiceFabricMonitoringEffect\": \"Deny\",\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-prod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"NonProd/\",\n      \"assignment\": {\n        \"name\": \"np-\",\n        \"displayName\": \"NonProd \",\n        \"description\": \"Non Prod Environment controls enforcement with \"\n      },\n      \"parameters\": {\n        \"classicComputeVMsMonitoringEffect\": \"Deny\",\n        \"disallowPublicBlobAccessEffect\": \"deny\",\n        \"azureCosmosDBAccountsShouldHaveFirewallRulesMonitoringEffect\": \"Audit\",\n        \"allowedContainerImagesInKubernetesClusterEffect\": \"Audit\",\n        \"AllowedHostNetworkingAndPortsInKubernetesClusterEffect\": \"Disabled\",\n        \"clusterProtectionLevelInServiceFabricMonitoringEffect\": \"Audit\",\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-nonprod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-nonprod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"Sandbox/\",\n      \"assignment\": {\n        \"name\": \"sbx-\",\n        \"displayName\": \"Sandbox \",\n        \"description\": \"Sandbox Environment controls enforcement with \"\n      },\n      \"parameters\": {\n        \"classicStorageAccountsMonitoringEffect\": \"Deny\",\n        \"allowedServicePortsInKubernetesClusterEffect\": \"Disabled\",\n        \"certificatesValidityPeriodInMonths\": 13,\n        \"AllowedAppArmorProfilesInKubernetesClusterEffect\": \"Disabled\",\n        \"certificatesValidityPeriodMonitoringEffect\": \"disabled\",\n        \"cognitiveServicesAccountsShouldRestrictNetworkAccessMonitoringEffect\": \"Disabled\",\n        \"AllowedCapabilitiesInKubernetesClusterEffect\": \"Disabled\"\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-sandbox\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Sandbox\"\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#inverted-policy-assignment-tag-inheritance-and-required-tags","title":"Inverted Policy Assignment (Tag Inheritance and Required Tags)","text":"<p>As mentioned above sometimes it is advantageous (to reduce the number of repetitions) to turn a definition on its head:</p> <ul> <li>Common <code>parameters</code>, <code>scope</code>, <code>definitionEntryList</code> (with two Policies) at the root (<code>nodeName</code> is <code>/Tags/</code>).</li> <li>Start of the <code>assignment</code> strings (<code>append</code> is defaulted to <code>false</code>). Again look at description which will be a concatenated sentence.</li> <li>The children define the <code>tagName</code> parameter and the second part of the strings for <code>assignment</code>. The set of <code>parameters</code> is the union of the root node and the child node.</li> <li>This creates six Assignments (number of Policies assigned times number of children).</li> </ul> <pre><code>{\n  \"nodeName\": \"/Tags/\",\n  \"parameters\": {\n    \"excludedRG\": [\n      \"synapseworkspace-managedrg-*\",\n      \"databricks-rg-*\",\n      \"managed*\"\n    ]\n  },\n  \"scope\": {\n      \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-mg-1\"\n      ],\n      \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Root\"\n      ]\n  },\n  \"definitionEntryList\": [\n                    {\n                    \"policyName\": \"7ce92201-8036-4d55-938e-0dce0a5bc475\",\n                    \"displayName\": \"Require Tag on Resource Group with dynamic notScope\",\n                    \"assignment\": {\n                        \"name\": \"rgtag-\",\n                        \"displayName\": \"Require Tag on Resource Group - \",\n                        \"description\": \"Require Tag for Resource Groups when any resource group (not listed in in excludedRg) is created or updated - \"\n                    }\n                },\n                {\n                    \"policyName\": \"5cc2cbfc-e306-4ec6-a141-eea3c79bb2ae\",\n                    \"displayName\": \"Inherit Tag from Resource Group with dynamic notScope\",\n                    \"assignment\": {\n                        \"name\": \"taginh-\",\n                        \"displayName\": \"Inherit Tag from Resource Group - \",\n                        \"description\": \"Modify Tag to comply with governance goal of enforcing Tags by inheriting Tags from RG - \"\n                    }\n                }\n  ],\n  \"children\": [\n      {\n          \"nodeName\": \"AppName\",\n          \"assignment\": {\n              \"name\": \"AppName\",\n              \"displayName\": \"AppName\",\n              \"description\": \"AppName.\"\n          },\n          \"parameters\": {\n              \"tagName\": \"AppName\"\n          }\n      },\n      {\n          \"nodeName\": \"Environment\",\n          \"assignment\": {\n              \"name\": \"Environment\",\n              \"displayName\": \"Environment\",\n              \"description\": \"Environment.\"\n          },\n          \"parameters\": {\n              \"tagName\": \"Environment\"\n          }\n      },\n      {\n          \"nodeName\": \"Project\",\n          \"assignment\": {\n              \"name\": \"Project\",\n              \"displayName\": \"Project\",\n              \"description\": \"Project.\"\n          },\n          \"parameters\": {\n              \"tagName\": \"Project\"\n          }\n      }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#non-compliance-messages-in-a-policy-definition-assignment","title":"Non-Compliance Messages in a Policy Definition Assignment","text":"<pre><code>{\n    \"nodeName\": \"test\",\n    \"scope\": {\n        \"issue48\": [\n            \"/providers/Microsoft.Management/managementGroups/issue48\"\n        ]\n    },\n    \"assignment\": {\n        \"displayName\": \"Audit virtual machines without disaster recovery configured\",\n        \"description\": \"Some description\",\n        \"name\": \"46332f3a51cb4bf2b4de78a7\"\n    },\n    \"definitionEntry\": {\n        \"policyName\": \"0015ea4d-51ff-4ce3-8d8c-f3f8f0179a56\" // Single policy definition\n    },\n    \"nonComplianceMessages\": [ // Array of nonComplianceMessages\n        {\n            \"message\": \"Update non-compliance message\" // Default nonComplianceMessage\n        }\n    ],\n    \"parameters\": {}\n}\n</code></pre>"},{"location":"policy-assignments/#non-compliance-messages-in-a-policy-set-definition-assignment","title":"Non-Compliance Messages in a Policy Set Definition Assignment","text":"<pre><code>{\n    \"nodeName\": \"test\",\n    \"scope\": {\n        \"issue48\": [\n            \"/providers/Microsoft.Management/managementGroups/issue48\"\n        ]\n    },\n    \"assignment\": {\n        \"displayName\": \"Configure Azure Defender for SQL agents on virtual machines\",\n        \"description\": \"Some other description\",\n        \"name\": \"39a366e6\"\n    },\n    \"definitionEntry\": {\n        \"initiativeName\": \"39a366e6-fdde-4f41-bbf8-3757f46d1611\" // Policy set definition\n    },\n    \"nonComplianceMessages\": [ // Array of nonComplianceMessages\n        {\n            \"message\": \"Update main message\" // Default nonComplianceMessage\n        },\n        {\n            \"message\": \"Individual policy message\", // Policy specific nonComplianceMessage. You must include the policyDefinitionReferenceId as defined in the initiative.\n            \"policyDefinitionReferenceId\": \"ASC_DeployAzureDefenderForSqlAdvancedThreatProtectionWindowsAgent\"\n        }\n    ],\n    \"parameters\": {}\n}\n</code></pre>"},{"location":"policy-assignments/#non-compliance-messages-in-a-policy-set-definition-assignment-with-a-definitionentrylist","title":"Non-Compliance Messages in a Policy Set Definition Assignment with a <code>definitionEntryList</code>","text":"<pre><code>{\n    \"nodeName\": \"test\",\n    \"scope\": {\n        \"issue48\": [\n            \"/providers/Microsoft.Management/managementGroups/issue48\"\n        ]\n    },\n    \"definitionEntryList\": [\n        {\n            \"initiativeName\": \"62329546-775b-4a3d-a4cb-eb4bb990d2c0\",\n            \"assignment\": {\n                \"displayName\": \"Flow logs should be configured and enabled for every network security group\",\n                \"description\": \"Audit for network security groups to verify if flow logs are configured and if flow log status is enabled. Enabling flow logs allows to log information about IP traffic flowing through network security group. It can be used for optimizing network flows, monitoring throughput, verifying compliance, detecting intrusions and more.\",\n                \"name\": \"62329546\"\n            },\n            \"nonComplianceMessages\": [ // nonComplianceMessages must be in the definitionEntryList object for each policy/initiative deployed.\n                {\n                    \"message\": \"Updated Default message\"\n                },\n                {\n                    \"message\": \"Individual policy message\",\n                    \"policyDefinitionReferenceId\": \"NetworkWatcherFlowLog_Enabled_Audit\"\n                }\n            ]\n        },\n        {\n            \"initiativeName\": \"cb5e1e90-7c33-491c-a15b-24885c915752\",\n            \"assignment\": {\n                \"displayName\": \"Enable Azure Cosmos DB throughput policy\",\n                \"description\": \"Enable throughput control for Azure Cosmos DB resources in the specified scope (Management group, Subscription or resource group). Takes max throughput as parameter. Use this policy to help enforce throughput control via the resource provider.\",\n                \"name\": \"cb5e1e90\"\n            }\n        }\n    ],\n    \"parameters\": {\n        \"throughputMax\": 400\n    }\n}\n</code></pre>"},{"location":"policy-definitions/","title":"Policy Definitions","text":""},{"location":"policy-definitions/#policy-definition-files","title":"Policy Definition Files","text":"<p>Policy definition files are managed within the folder <code>policyDefinitions</code> under <code>Definitions</code>.  The Policy definition files are structured based on the official Azure Policy definition structure published by Microsoft. There are numerous definition samples available on Microsoft's GitHub repository for azure-policy.</p> <p>The names of the definition JSON files don't matter, the Policy and Policy Set definitions are registered based on the <code>name</code> attribute. The solution also allows the use of JSON with comments by using <code>.jsonc</code> instead of <code>.json</code> for the file extension.</p>"},{"location":"policy-definitions/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-definition-schema.json\"\n}\n</code></pre> <p>This schema is new in v7.4.x and may not be complete. Please let us know if we missed anything.</p>"},{"location":"policy-definitions/#recommendations","title":"Recommendations","text":"<ul> <li><code>\"name\"</code> is required and should be unique. It can be a GUID or a unique short name.</li> <li><code>\"category\"</code> should be one of the standard ones defined in built-in Policies.</li> <li>Do not specify an <code>id</code>. The solution will ignore it.</li> <li>Make the <code>effect</code> parameterized. Always use the parameter name <code>effect</code>.</li> <li>Whenever feasible, provide a <code>defaultValue</code> for parameters, especially for the <code>effect</code> parameter.</li> <li>Policy aliases are used by Azure Policy to refer to resource type properties in the <code>if</code> condition and in <code>existenceCondition</code>: https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#aliases.</li> </ul>"},{"location":"policy-definitions/#metadata","title":"Metadata","text":"<p>It is customary to include a <code>category</code> and a <code>version</code> in the <code>metadata</code> section. The <code>category</code> should be one of the standard ones defined in built-in Policies. The <code>version</code> should be a semantic version number.</p> <p>EPAC injects <code>deployedBy</code> into the <code>metadata</code> section. This is a string that identifies the deployment source. It defaults to <code>epac/$pacOwnerId/$pacSelector</code>. You can override this value in <code>global-settings.jsonc</code></p> <p>Not recommended: Adding <code>deployedBy</code> to the <code>metadata</code> section in the Policy definition file will override the value for this definition only from <code>global-settings.jsonc</code> or default value.</p>"},{"location":"policy-definitions/#example","title":"Example","text":"<pre><code>{\n    \"name\": \"Newly created GUID\",\n    \"properties\": {\n        \"displayName\": \"Policy Display Name\",\n        \"policyType\": \"Custom\",\n        \"mode\": \"All\",\n        \"description\": \"Policy Description\",\n        \"metadata\": {\n            \"version\": \"1.0.0\",\n            \"category\": \"Your Category\"\n        },\n        \"parameters\": {\n            \"effect\": {\n                \"type\": \"String\",\n                \"metadata\": {\n                    \"displayName\": \"Effect\",\n                    \"description\": \"Enable or disable the execution of the policy\",\n                },\n                \"allowedValues\": [\n                    \"Audit\",\n                    \"Deny\",\n                    \"Disabled\"\n                ],\n                \"defaultValue\": \"Audit\"\n            },\n            \"YourParameter\": {\n                \"type\": \"String\",\n                \"metadata\": {\n                    \"displayName\": \"YourParameter\",\n                    \"description\": \"Your Parameter Description\"\n                }\n            }\n        },\n        \"policyRule\": {\n            \"if\": {\n                \"Insert Logic Here\"\n            },\n            \"then\": {\n                \"effect\": \"[parameters('effect')]\",\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"policy-exemptions/","title":"Policy Exemptions","text":"<p>Tip</p> <p>The changes implementing Option A below makes JSON files easier to read than CSV files. We recommend using Policy definition Ids or Names for new exemptions and JSON files  instead of CSV files. Of course, CSV files are still supported. You may even mix and match the two formats in the same folder.</p>"},{"location":"policy-exemptions/#exemption-folder-structure","title":"Exemption Folder Structure","text":"<p>Exemptions can be defined as JSON or CSV files (we recommend that you use CSV files). The names of the definition files don't matter. If multiple files exists in a folder, the lists from all the files are added together.</p> <p>The pacEnvironment (see global-settings.jsonc) is represented with a folder structure under the folder policyExemptions, such as epac-dev, tenant, ... A missing folder indicates that the pacEnvironment's Exemptions are not managed by this solution. To extract existing exemptions, the operations script Get-AzExemptions.ps1 can be used to generate JSON and CSV files. The output may be used to start the Exemption definitions. This same output is also created when Extract existing Policy Resources from an Environment.</p> <p>A typical folder structure might look like this:</p> <pre><code>Definitions\n  policyExemptions\n    epac-dev\n      &lt;name&gt;.csv of &lt;name&gt;.json\n    tenant\n      &lt;name&gt;.csv of &lt;name&gt;.json\n</code></pre>"},{"location":"policy-exemptions/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-exemption-schema.json\"\n}\n</code></pre>"},{"location":"policy-exemptions/#defining-exemptions","title":"Defining Exemptions","text":"<p>Tip</p> <p>In v10.0.0, exemptions can be defined by specifying the Policy definition Ids or Names instead of Policy Assignment Ids. This significantly reduces the complexity of defining exemptions for Policy Sets with overlapping Policy definitions. </p> <p>Each exemption must define the following properties:</p> <ul> <li><code>name</code> - unique name, we recommend a short human readable name.</li> <li><code>displayName</code> - descriptive name displayed on portal.</li> <li><code>exemptionCategory</code> - <code>Waiver</code> or <code>Mitigated</code>.</li> <li>Item to exempt; one of the following:</li> <li><code>policyDefinitionId</code>, or <code>policyDefinitionName</code> - exempts the Policy definition in all applicable Policy Assignments.</li> <li><code>policySetDefinitionId</code>, or <code>policySetDefinitionName</code> - exempts all Policies in the Policy Set, or a subset if <code>policyDefinitionsReferenceIds</code> are specified.</li> <li><code>policyAssignmentId</code>to be exempted. For Assignments of a Policy Set, you may add <code>policyDefinitionReferenceIds</code> to exempt specific Policies within the Policy Set.</li> <li><code>scope</code> or <code>scopes</code> - Management Group, subscription, Resource Group or resource.</li> <li>Optional</li> <li><code>expiresOn</code> - empty or expiry date.</li> <li><code>assignmentScopeValidation</code> - <code>Default</code> or <code>DoNotValidate</code></li> <li><code>resourceSelectors</code> - valid JSON (see JSON format below)</li> <li><code>metadata</code> - valid JSON (see JSON format below)</li> </ul>"},{"location":"policy-exemptions/#metadata","title":"Metadata","text":"<p>You can use <code>metadata</code> for additional information.</p> <p>EPAC injects <code>deployedBy</code> into the <code>metadata</code> section. This is a string that identifies the deployment source. It defaults to <code>epac/$pacOwnerId/$pacSelector</code>. You can override this value in <code>global-settings.jsonc</code></p> <p>Not recommended: Adding <code>deployedBy</code> to the <code>metadata</code> section in the Policy definition file will override the value for this Exemption only from <code>global-settings.jsonc</code> or default value.</p>"},{"location":"policy-exemptions/#specifying-policy-or-policies-to-be-exempted","title":"Specifying Policy or Policies to be Exempted","text":"<p>The following properties can be used to specify the Policy or Policies to be exempted.</p> <p>Caution</p> <p><code>assignmentScopeValidation</code> value <code>DoNotValidate</code> only works for Option B. It may work for Option A and C in some cases, but it is not recommended. EPAC cannot gracefully handle this and display a specific error message. Instead, it will display a generic error message with the following text <code>\"Exemption entry $($entryNumber): No assignments found for scope $($currentScope), skipping entry.\"</code>.</p>"},{"location":"policy-exemptions/#option-a-policy-definition-ids-or-names","title":"Option A: Policy definition Ids or Names","text":"<p>Tip</p> <p>We recommend using this option for new exemptions, except when exempting multiple Policies in a Policy Set.</p> <p>It creates one exemption per Assignment containing the Policy definition (direct or indirect through a Policy Sets). <code>policyDefinitionReferenceIds</code> must be empty (omitted). This is the simplest and most readable way to define exemptions. Specify one of the following:</p> <ul> <li><code>policyDefinitionId</code> for built-in Policy definitions in the form <code>\"/providers/Microsoft.Authorization/policyDefinitions/00000000-0000-0000-0000-000000000000\"</code>.</li> <li><code>policyDefinitionName</code> for custom Policy definitions. In CSV files specify the cell in <code>assignmentReferenceId</code> as <code>\"policyDefinitions/{{policyDefinitionName}}\"</code>.</li> </ul>"},{"location":"policy-exemptions/#option-b-policy-assignment-id","title":"Option B: Policy Assignment Id","text":"<p>It creates one exemption for the specified Policy Assignment. This is the traditional way of defining an Exemption. It is still useful for exempting multiple Policies in an assigned Policy Set with one exemption. Specify the following:</p> <ul> <li><code>policyAssignmentId</code> for the Policy Assignment in the form <code>/providers/Microsoft.Management/managementGroups/{{managementGroupId}}/providers/Microsoft.Authorization/policyAssignments/{{policyAssignmentName}}</code>.</li> <li>Optionally, for Policy Set Assignments only, <code>policyDefinitionReferenceIds</code> containing an array of strings as detailed below.</li> </ul> <p>In CSV files, the column <code>policyAssignmentId</code> is still supported for backward compatibility for Option B only.</p> <p>Tip</p> <p>We recommend using the column <code>assignmentReferenceId</code> for every options, including option B.</p>"},{"location":"policy-exemptions/#option-c-policy-set-definition-ids-or-names","title":"Option C: Policy Set definition Ids or Names","text":"<p>It creates one exemption per Assignment assigning the Policy Set definition. It is useful for exempting multiple Policies in a Policy Set with one exemption. Specify the following:</p> <ul> <li><code>policySetDefinitionId</code> for built-in Policy Set definitions in the form <code>\"/providers/Microsoft.Authorization/policySetDefinitions/00000000-0000-0000-0000-000000000000\"</code>.</li> <li><code>policySetDefinitionName</code> for custom Policy Set definitions. In CSV files specify the cell in <code>assignmentReferenceId</code> as <code>\"policySetDefinitions/{{policySetDefinitionName}}\"</code>.</li> <li>Optionally, for Policy Set Assignments only, <code>policyDefinitionReferenceIds</code> containing an array of strings as detailed below.</li> </ul> <p>In CSV files use the column <code>assignmentReferenceId</code>, and optionally <code>policyDefinitionReferenceIds</code>.</p>"},{"location":"policy-exemptions/#specifying-policydefinitionreferenceids","title":"Specifying <code>policyDefinitionReferenceIds</code>","text":"<p><code>policyDefinitionReferenceIds</code> is used to exempt specific Policies within a Policy Set. It is only used explicitly with <code>policyAssignmentId</code> and <code>policySetDefinitionId</code> or <code>policySetDefinitionName</code>. For <code>policyDefinitionId</code> and <code>policyDefinitionName</code>, it is calculated by EPAC and should be empty.</p> <p><code>policyDefinitionReferenceIds</code> is an array of strings. Each string can be one of the following:</p> <ul> <li><code>policyDefinitionReferenceId</code> as specified in the Policy Set definition.</li> <li><code>policyDefinitionId</code> for built-in Policy definitions in the form <code>\"/providers/Microsoft.Authorization/policyDefinitions/00000000-0000-0000-0000-000000000000\"</code>.</li> <li><code>policyDefinitionName</code> for custom Policy definitions in the form <code>\"policyDefinitions/{{policyDefinitionName}}\"</code>.</li> </ul> <p>In CSV files, <code>policyDefinitionReferenceIds</code> is a list of ampersand <code>&amp;</code> separated strings. In JSON files, it is an array of strings.</p>"},{"location":"policy-exemptions/#defining-the-scope-with-scope-or-scopes","title":"Defining the Scope with <code>scope</code> or <code>scopes</code>","text":"<p>The <code>scope</code> property is used to define a single scope. The <code>scopes</code> property is used to define multiple scopes. <code>scopes</code> was introduced in v10.1.0.</p> <p>Tip</p> <p>Using a <code>scopes</code> array creates nicely concatenated values for <code>displayName</code> and <code>description</code> for single scope. We recommend to always use <code>scopes</code>. You can suppress the concatenation by adding a colon <code>:</code> at the beginning of each string before the scope.</p>"},{"location":"policy-exemptions/#scope-defines-a-single-scope","title":"<code>scope</code> defines a single scope","text":"<p>It is unchanged from previous versions.</p>"},{"location":"policy-exemptions/#scopes-defines-multiple-scopes-in-a-single-entry","title":"<code>scopes</code> Defines multiple Scopes in a single Entry","text":"<p>A list of Management Groups, subscriptions, Resource Groups or resource Ids. In CSV files it is a list separated by an ampersand <code>&amp;</code>. In JSON files it is an array of strings.</p> <p>The last part of the scope is used as a postfix in the exemption <code>displayName</code> and <code>description</code> to make it easier to identify the scope. This behavior can be overridden by:</p> <ul> <li>Adding a human readable name followed by a colon <code>:</code> before the scope: <code>humanReadableName:/subscriptions/11111111-2222-3333-4444-555555555555</code>.</li> <li>Adding just a colon <code>:</code> before the scope to suppress the concatenation: <code>:/subscriptions/11111111-2222-3333-4444-555555555555</code>.</li> </ul> <p>In CSV files, the <code>scope</code> column is still supported for backward compatibility. We recommend using the <code>scopes</code> column for all new exemptions. <code>scopes</code> is a list of ampersand <code>&amp;</code> separated strings.</p> <p>In JSON files, <code>scope</code> is a string and <code>scopes</code> is an array of strings.</p>"},{"location":"policy-exemptions/#combining-policy-definitions-at-multiple-scopes","title":"Combining Policy Definitions at multiple Scopes","text":"<p>When using Option A or Option C  and/or <code>scopes</code>, EPAC needs to generate concatenated values for <code>name</code>, <code>displayName</code>, and <code>description</code> to ensure uniqueness and readability.</p> <ul> <li><code>name</code> is generated by concatenating the <code>name</code> with a dash <code>-</code> and the Assignment <code>name</code> (the last part of the <code>policyAssignmentId</code>).</li> <li><code>displayName</code> and <code>description</code> are generated by concatenating the <code>displayName</code> and <code>description</code> with a a space dash space (<code>-</code>), the last part of the scope, or the human readable name before the colon <code>:</code> (if using <code>scopes</code>).</li> </ul> <p>It is best to explain the details with examples. They are based on JSON files, but the same principles apply to CSV files.</p>"},{"location":"policy-exemptions/#example-with-policydefinition-and-scopes","title":"Example with <code>policyDefinition</code> and <code>scopes</code>","text":""},{"location":"policy-exemptions/#definition-file","title":"Definition file:","text":"<pre><code>  {\n      \"exemptions\": [\n          {\n              \"name\": \"short-name\",\n              \"displayName\": \"Descriptive name displayed on portal\",\n              \"description\": \"More details\",\n              \"exemptionCategory\": \"Waiver\",\n              \"scopes\": [\n                  \"/subscriptions/11111111-2222-3333-4444-555555555555\",\n                  \"/subscriptions/11111111-2222-3333-4444-555555555556/resourceGroups/resourceGroupName1\",\n              ],\n              \"policyDefinitionId\": \"/providers/microsoft.authorization/policyDefinitions/00000000-0000-0000-0000-000000000000\",\n          }\n      ]\n  }\n</code></pre>"},{"location":"policy-exemptions/#generated-fields-for-each-assignment-with-the-policy-specified","title":"Generated fields for each assignment with the Policy specified:","text":"<ul> <li><code>name</code> is the same for all the scopes: \"short-name-assignmentName\"</li> <li><code>displayName</code>: \"Descriptive name displayed on portal - 11111111-2222-3333-4444-555555555555 - assignmentName\"</li> <li><code>displayName</code>: \"Descriptive name displayed on portal - resourceGroupName1 - assignmentName\"</li> <li><code>description</code>: \"More details - 11111111-2222-3333-4444-555555555555 - assignmentName\"</li> <li><code>description</code>: \"More details - resourceGroupName1 - assignmentName\"</li> </ul>"},{"location":"policy-exemptions/#example-with-policydefinition-scopes-and-a-human-readable-name","title":"Example with <code>policyDefinition</code>, <code>scopes</code> and a human readable name","text":""},{"location":"policy-exemptions/#definition-file_1","title":"Definition file:","text":"<pre><code>  {\n      \"exemptions\": [\n          {\n              \"name\": \"short-name\",\n              \"displayName\": \"Descriptive name displayed on portal\",\n              \"description\": \"More details\",\n              \"exemptionCategory\": \"Waiver\",\n              \"scopes\": [\n                  \"humanReadableName:/subscriptions/11111111-2222-3333-4444-555555555555\",\n                  \"/subscriptions/11111111-2222-3333-4444-555555555556/resourceGroups/resourceGroupName1\",\n              ],\n              \"policyDefinitionId\": \"/providers/microsoft.authorization/policyDefinitions/00000000-0000-0000-0000-000000000000\",\n          }\n      ]\n  }\n</code></pre>"},{"location":"policy-exemptions/#generated-fields-for-each-assignment-with-the-policy-specified_1","title":"Generated fields for each assignment with the Policy specified:","text":"<ul> <li><code>name</code> is the same for all the scopes: \"short-name-assignmentName\"</li> <li><code>displayName</code>: \"Descriptive name displayed on portal - humanReadableName - assignmentName - humanReadableName\"</li> <li><code>displayName</code>: \"Descriptive name displayed on portal - resourceGroupName1 - assignmentName \"</li> <li><code>description</code>: \"More details - humanReadableName - assignmentName\"</li> <li><code>description</code>: \"More details - resourceGroupName1 - assignmentName\"</li> </ul>"},{"location":"policy-exemptions/#example-with-policydefinition-and-a-single-scope","title":"Example with <code>policyDefinition</code> and a single <code>scope</code>","text":""},{"location":"policy-exemptions/#definition-file_2","title":"Definition file:","text":"<pre><code>  {\n      \"exemptions\": [\n          {\n              \"name\": \"short-name\",\n              \"displayName\": \"Descriptive name displayed on portal\",\n              \"description\": \"More details\",\n              \"exemptionCategory\": \"Waiver\",\n              \"scope\": \"/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/resourceGroupName1\",\n              \"policyDefinitionId\": \"/providers/microsoft.authorization/policyDefinitions/00000000-0000-0000-0000-000000000000\",\n          }\n      ]\n  }\n</code></pre>"},{"location":"policy-exemptions/#generated-fields-for-the-assignment-with-the-policy-specified","title":"Generated fields for the assignment with the Policy specified:","text":"<ul> <li><code>name</code>: \"short-name-assignmentName\" </li> <li><code>displayName</code>: \"Descriptive name displayed on portal - assignmentName\"</li> <li><code>description</code>: \"More details - assignmentName\"</li> </ul>"},{"location":"policy-exemptions/#example-with-policyassignmentid-and-scopes","title":"Example with <code>policyAssignmentId</code> and <code>scopes</code>","text":""},{"location":"policy-exemptions/#definition-file_3","title":"Definition file:","text":"<pre><code>  {\n      \"exemptions\": [\n          {\n              \"name\": \"short-name\",\n              \"displayName\": \"Descriptive name displayed on portal\",\n              \"description\": \"More details\",\n              \"exemptionCategory\": \"Waiver\",\n              \"scopes\": [\n                  \"/subscriptions/11111111-2222-3333-4444-555555555555\",\n                  \"/subscriptions/11111111-2222-3333-4444-555555555556/resourceGroups/resourceGroupName1\",\n              ],\n              \"policyAssignmentId\": \"/providers/Microsoft.Management/managementGroups/{{managementGroupId}}/providers/Microsoft.Authorization/policyAssignments/{{policyAssignmentName}}\",\n          }\n      ]\n  }\n</code></pre>"},{"location":"policy-exemptions/#generated-fields-for-this-assignment","title":"Generated fields for this assignment:","text":"<ul> <li><code>name</code>: \"short-name\"</li> <li><code>displayName</code>: \"Descriptive name displayed on portal - 11111111-2222-3333-4444-555555555555</li> <li><code>displayName</code>: \"Descriptive name displayed on portal - resourceGroupName1\"</li> <li><code>description</code>: \"More details - 11111111-2222-3333-4444-555555555555\"</li> <li><code>description</code>: \"More details - resourceGroupName1\"</li> </ul>"},{"location":"policy-exemptions/#example-with-policyassignmentid-scopes-and-a-human-readable-name","title":"Example with <code>policyAssignmentId</code>, <code>scopes</code> and a human readable name","text":""},{"location":"policy-exemptions/#definition-file_4","title":"Definition file:","text":"<pre><code>  {\n      \"exemptions\": [\n          {\n              \"name\": \"short-name\",\n              \"displayName\": \"Descriptive name displayed on portal\",\n              \"description\": \"More details\",\n              \"exemptionCategory\": \"Waiver\",\n              \"scopes\": [\n                  \"humanReadableName:/subscriptions/11111111-2222-3333-4444-555555555555\",\n                  \"/subscriptions/11111111-2222-3333-4444-555555555556/resourceGroups/resourceGroupName1\",\n              ],\n              \"policyAssignmentId\": \"/providers/Microsoft.Management/managementGroups/{{managementGroupId}}/providers/Microsoft.Authorization/policyAssignments/{{policyAssignmentName}}\",\n          }\n      ]\n  }\n</code></pre>"},{"location":"policy-exemptions/#generated-fields-for-this-assignment_1","title":"Generated fields for this assignment:","text":"<ul> <li><code>name</code>: \"short-name\"</li> <li><code>displayName</code>: \"Descriptive name displayed on portal - humanReadableName\"</li> <li><code>displayName</code>: \"Descriptive name displayed on portal - resourceGroupName1\"</li> <li><code>description</code>: \"More details - humanReadableName\"</li> <li><code>description</code>: \"More details - resourceGroupName1\"</li> </ul>"},{"location":"policy-exemptions/#example-with-policyassignmentid-and-a-single-scope","title":"Example with <code>policyAssignmentId</code> and a single <code>scope</code>","text":""},{"location":"policy-exemptions/#definition-file_5","title":"Definition file:","text":"<pre><code>  {\n      \"exemptions\": [\n          {\n              \"name\": \"short-name\",\n              \"displayName\": \"Descriptive name displayed on portal\",\n              \"description\": \"More details\",\n              \"exemptionCategory\": \"Waiver\",\n              \"scope\": \"/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/resourceGroupName1\",\n              \"policyAssignmentId\": \"/providers/Microsoft.Management/managementGroups/{{managementGroupId}}/providers/Microsoft.Authorization/policyAssignments/{{policyAssignmentName}}\",\n          }\n      ]\n  }\n</code></pre>"},{"location":"policy-exemptions/#generated-fields-for-this-assignment_2","title":"Generated fields for this assignment:","text":"<ul> <li><code>name</code>: \"short-name\"</li> <li><code>displayName</code>: \"Descriptive name displayed on portal\"</li> <li><code>description</code>: \"More details\"</li> </ul>"},{"location":"policy-exemptions/#csv-format","title":"CSV Format","text":"<p>The columns must have the headers as described below. The order of the columns is not important.</p>"},{"location":"policy-exemptions/#regular-columns","title":"Regular Columns","text":"<ul> <li><code>name</code> - unique name, we recommend a GUID.</li> <li><code>displayName</code> - descriptive name displayed on portal.</li> <li><code>exemptionCategory</code> - <code>Waiver</code> or <code>Mitigated</code>.</li> <li><code>scope</code> - individual Management Group, subscription, Resource Group or resource.</li> <li><code>scopes</code> - list of ampersand <code>&amp;</code> separated Management Groups, subscriptions, Resource Groups or resource Ids. Ampersand is used instead of commas since it is not a valid character in a scope name and therefore doesn't conflict.</li> <li>Optional</li> <li><code>expiresOn</code> - empty or expiry date.</li> <li><code>policyDefinitionReferenceIds</code> - list of ampersand <code>&amp;</code> separated strings as defined above.</li> <li><code>assignmentScopeValidation</code> - <code>Default</code> or <code>DoNotValidate</code></li> <li><code>resourceSelectors</code> - valid JSON (see JSON format below)</li> <li><code>metadata</code> - valid JSON (see JSON format below)</li> </ul> <p>Caution</p> <p>Breaking change: v10.1.0 replaced the usual comma in <code>policyDefinitionReferenceIds</code> with an ampersand <code>&amp;</code> to avoid conflicts with the scope Ids. You must replace in-cell commas with ampersands.</p>"},{"location":"policy-exemptions/#option-a-columns-policy-definition-ids-or-names","title":"Option A columns: Policy definition Ids or Names","text":"<ul> <li>Column <code>assignmentReferenceId</code> must be formatted:</li> <li>For Built-in Policy definition: <code>/providers/Microsoft.Authorization/policyDefinitions/00000000-0000-0000-0000-000000000000</code></li> <li>For Custom Policy definition: <code>policyDefinitions/{{policyDefinitionName}}</code></li> <li>Column <code>policyDefinitionReferenceIds</code> must be empty</li> </ul>"},{"location":"policy-exemptions/#option-b-columns-policy-assignment-id","title":"Option B columns: Policy Assignment Id","text":"<ul> <li>Column <code>assignmentReferenceId</code> must be a Policy Assignment Id:</li> <li><code>/providers/Microsoft.Management/managementGroups/{{managementGroupId}}/providers/Microsoft.Authorization/policyAssignments/{{policyAssignmentName}}</code></li> <li>Column <code>policyDefinitionReferenceIds</code> must be an ampersand separated list containing any of the following:</li> <li>Empty for Policy Assignment of a single Policy, or to exempt the scope from every Policy in the assigned Policy Set</li> <li>One of the options as detailed above</li> </ul> <p>Legacy column <code>policyAssignmentId</code> is still supported for backward compatibility for Option B only.</p>"},{"location":"policy-exemptions/#option-c-columns-policy-set-definition-ids-or-names","title":"Option C columns: Policy Set definition Ids or Names","text":"<ul> <li>Column <code>assignmentReferenceId</code> must be a Policy Set definition Id or Name</li> <li>Built-in Policy Set definition: <code>/providers/Microsoft.Authorization/policySetDefinitions/00000000-0000-0000-0000-000000000000</code></li> <li>Custom Policy Set definition: <code>policySetDefinitions/{{policySetDefinitionName}}</code></li> <li>Column <code>policyDefinitionReferenceIds</code> must be an ampersand separated list containing any of the following:</li> <li>Empty to exempt all Policies in the Policy Set</li> <li>One of the options as detailed above</li> </ul>"},{"location":"policy-exemptions/#moving-from-excluded-scopes-to-exemptions","title":"Moving from Excluded Scopes to Exemptions","text":"<p>If you are moving from using excluded scopes to the use of exemptions the by default EPAC will not deploy new exemptions that are part of an assignment excluded scopes. As well as this - EPAC will delete any exemption if finds that is deployed to an excluded scope.</p> <p>You can override this behavior by using the switch <code>-SkipNotScopedExemptions</code> when you call <code>Build-DeploymentPlans</code>.</p>"},{"location":"policy-set-definitions/","title":"Policy Set (Initiative) Definitions","text":""},{"location":"policy-set-definitions/#initiative-policy-set-definition-files","title":"Initiative (Policy Set) Definition Files","text":"<p>Policy Set definition files are managed within the folder <code>policySetDefinitions</code> under <code>Definitions</code>. The definition files are structured based on the official Azure Initiative definition structure published by Microsoft. There are numerous definition samples available on Microsoft's GitHub repository for azure-policy.</p> <p>The names of the definition JSON files don't matter, the Policy Sets are registered based on the <code>name</code> attribute. The solution also allows the use of JSON with comments by using <code>.jsonc</code> instead of <code>.json</code> for the file extension.</p>"},{"location":"policy-set-definitions/#policy-definition-groups","title":"Policy Definition Groups","text":"<p>Optional: Policy definition groups allow custom Policy Sets to map to different regulatory compliance requirements. These will show up in the regulatory compliance blade in Azure Security Center as if they were built-in. In order to use this, the custom Policy Sets must have both policy definition groups and group names defined.</p> <ul> <li>Policy definition groups must be pulled from a built-in Policy Sets, such as, the <code>Microsoft cloud security benchmark</code> Policy Set.</li> <li>Policy definition groups can be imported by using <code>importPolicyDefinitionGroups</code>. The following imports the groups from Azure Security Benchmark.</li> </ul> <pre><code>\"importPolicyDefinitionGroups\": [\n  // built-in Policy Set definition \"Microsoft cloud security benchmark\"\n  \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\"\n],\n</code></pre>"},{"location":"policy-set-definitions/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/policy-set-definition-schema.json\"\n}\n</code></pre>"},{"location":"policy-set-definitions/#recommendations","title":"Recommendations","text":"<ul> <li><code>\"name\"</code> is required and should be unique. It can be a GUID or a unique short name.</li> <li><code>\"category\"</code> should be one of the standard ones defined in built-in Policies.</li> <li>Custom Policies: must use <code>policyDefinitionName</code>. The solution constructs the <code>policyDefinitionId</code> based on the <code>deploymentRootScope</code> in <code>global-settings.jsonc</code>.</li> <li>Builtin Policies: must use <code>policyDefinitionId</code>.</li> <li>Do not specify an <code>id</code>. The solution will ignore it.</li> <li>Make  the <code>effects</code> parameterized</li> </ul>"},{"location":"policy-set-definitions/#metadata","title":"Metadata","text":"<p>It is customary to include a <code>category</code> and a <code>version</code> in the <code>metadata</code> section. The <code>category</code> should be one of the standard ones defined in built-in Policy Sets. The <code>version</code> should be a semantic version number.</p> <p>EPAC injects <code>deployedBy</code> into the <code>metadata</code> section. This is a string that identifies the deployment source. It defaults to <code>epac/$pacOwnerId/$pacSelector</code>. You can override this value in <code>global-settings.jsonc</code></p> <p>Not recommended: Adding <code>deployedBy</code> to the <code>metadata</code> section in the Policy definition file will override the value for this definition only from <code>global-settings.jsonc</code> or default value.</p>"},{"location":"policy-set-definitions/#example","title":"Example","text":"<pre><code>{\n  \"name\": \"Newly created GUID\",\n  \"properties\": {\n    \"displayName\": \"Your Initiative Display Name\",\n    \"description\": \"Initiative Description\",\n    \"metadata\": {\n      \"version\": \"1.0.0\",\n      \"category\": \"Category Name\"\n    },\n    \"policyDefinitionGroups\": [\n      {\n        \"name\": \"Azure_Security_Benchmark_v2.0_NS-1\",\n        \"additionalMetadataId\": \"/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-1\"\n      }\n    ],\n    \"parameters\": {\n      \"Parameter for policy one\": {\n        \"type\": \"Array\",\n        \"defaultValue\": []\n      },\n      \"Parameter for policy two\": {\n        \"type\": \"string\",\n        \"defaultValue\": []\n      }\n    },\n    \"policyDefinitions\": [\n      {\n        \"policyDefinitionReferenceId\": \"Reference to policy number one\",\n        \"policyDefinitionName\": \"Name of Policy Number One\",\n        \"parameters\": {\n          \"Parameter for policy one\": {\n            \"value\": \"[parameters('Parameter for policy one')]\"\n          }\n        }\n      },\n      {\n        \"policyDefinitionReferenceId\": \"Reference to policy number two\",\n        \"policyDefinitionName\": \"Name of Policy Number Two\",\n        \"parameters\": {\n          \"Parameter for policy two\": {\n            \"value\": \"[parameters('Parameter for policy two')]\"\n          }\n        },\n        \"groupNames\": [\n            \"Azure_Security_Benchmark_v2.0_NS-1\"\n        ]\n      },\n      {\n        \"policyDefinitionReferenceId\": \"Reference to policy number two\",\n        \"policyDefinitionId\": \"id of a builtin Policy\",\n        \"parameters\": {\n          \"Parameter for policy two\": {\n            \"value\": \"[parameters('Parameter for policy two')]\"\n          }\n        },\n        \"groupNames\": [\n            \"Azure_Security_Benchmark_v2.0_NS-1\"\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"settings-desired-state/","title":"Desired State Management","text":"<p>Caution</p> <p>EPAC is a true desired state deployment technology. It takes possession of all Policy Resources at the <code>deploymentRootScope</code> and its children. It will delete any Policy resources not defined in the EPAC repo.</p> <p>Desired State strategy enables you to adjust the default behavior to fit more complex scenarios, including shared responsibility scenarios. The use cases below show the archetypical use cases. For complex scenarios it is possible to combine multiple use cases.</p>"},{"location":"settings-desired-state/#the-desiredstate-element","title":"The <code>desiredState</code> Element","text":"<p><code>pacEnvironments</code> must contain a <code>desiredState</code> element.</p> <ul> <li>Required:</li> <li><code>strategy</code>: The strategy to use for managing Policy resources. The following values are supported:<ul> <li><code>full</code>: EPAC manages all Policy resources in the <code>deploymentRootScope</code> and its children. EPAC deletes any Policy resources not defined in the EPAC repo.</li> <li><code>ownedOnly</code>: EPAC manages only Policy resources defined in the EPAC repo. EPAC does not delete any Policy resources not defined in the EPAC repo.</li> </ul> </li> <li> <p><code>keepDfcSecurityAssignments</code>: It is recommended that Security and Compliance Initiatives are managed at management group levels with EPAC. Please read Managing Defender for Cloud Assignments.</p> </li> <li> <p>Optional:</p> </li> <li><code>excludedScopes</code>: An array of scopes to exclude from management by EPAC. The default is an empty array. Wild cards are supported.</li> <li><code>excludedPolicyDefinitions</code>: An array of Policy Definitions to exclude from management by EPAC. The default is an empty array. Wild cards are supported.</li> <li><code>excludedPolicySetDefinitions</code>: An array of Policy Set Definitions to exclude from management by EPAC. The default is an empty array. Wild cards are supported.</li> <li><code>excludedPolicyAssignments</code>: An array of Policy Assignments to exclude from management by EPAC. The default is an empty array. Wild cards are supported.</li> <li><code>doNotDisableDeprecatedPolicies</code>: Automatically set deprecated policies' policy effect to \"Disabled\". This setting can be used to override that behavior by setting it to <code>true</code>. Default is <code>false</code>.</li> <li><code>excludeSubscriptions</code>: Exclude all subscription under the deployment root scope. Designed for environments containing many frequently updated subscriptions that are not requiring management and where using <code>excludedScopes</code> would be impractical to maintain. If resource groups are added <code>excludedScopes</code> they will be ignored as this setting will take precedence. It will not effect excluded management group scopes. Default is <code>false</code></li> </ul> <p>The following example shows the <code>desiredState</code> element with all properties set:</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n    \"keepDfcSecurityAssignments\": false,\n    \"doNotDisableDeprecatedPolicies\": false,\n    \"excludedScopes\": [],\n    \"excludedPolicyDefinitions\": [],\n    \"excludedPolicySetDefinitions\": [],\n    \"excludedPolicyAssignments\": []\n}\n</code></pre>"},{"location":"settings-desired-state/#transitioning-to-epac","title":"Transitioning to EPAC","text":"<p>While transitioning to EPAC, existing Policy resources may need to be kept. Setting <code>desiredState</code> to <code>ownedOnly</code> allows EPAC to remove its own resources while preserving instances requiring (temporary) preservation.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"ownedOnly\",\n    \"keepDfcSecurityAssignments\": false\n}\n</code></pre> <p>After short transitioning period (weeks), it is recommended to set <code>desiredState</code> to <code>full</code> to allow EPAC to manage all Policy resources.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n    \"keepDfcSecurityAssignments\": false\n}\n</code></pre>"},{"location":"settings-desired-state/#exclude-resource-groups","title":"Exclude Resource Groups","text":"<p>Warning</p> <p>Breaking Change in v10.0.0: Policy Assignments at resource groups are managed by EPAC. The element <code>includeResourceGroups</code> has been deprecated and removed.</p> <p>To exclude resource groups from management by EPAC, add an <code>excludedScopes</code> array element with a wild card for the subscription and resourceGroups to <code>desiredState</code>.</p> <pre><code>\"desiredState\": {\n    \"excludedScopes\": [\n        \"/subscriptions/*/resourceGroups/*\"\n    ]\n}\n</code></pre>"},{"location":"settings-desired-state/#use-case-1-centralized-team","title":"Use Case 1: Centralized Team","text":"<p>This original (previously the only) use case assumes one team/repo manages all Policies in a tenant or multiple tenants. Omit <code>desiredState</code> and <code>inheritedDefinitionsScopes</code>.</p>"},{"location":"settings-desired-state/#use-case-2-manage-policy-definitions-assignments-or-exemptions-differently","title":"Use case 2: Manage Policy Definitions, Assignments, or Exemptions differently","text":"<p>In some organizations the lifecycle of different parts may be managed separately. For example, you may want to manage Definitions and Assignments separately from Exemptions.</p>"},{"location":"settings-desired-state/#using-advanced-cicd-pipelines-recommended","title":"Using Advanced CI/CD Pipelines (Recommended)","text":"<p>Advanced CI/CD Pipelines with Release Flow can be used to fast-track Exemptions while keeping a regular lifecycle for Definitions and Assignments. Script <code>Build-DeploymentPlans</code> has a parameter <code>BuildExemptionsOnly</code> to deploy only Exemptions.</p>"},{"location":"settings-desired-state/#using-separate-repos","title":"Using separate Repos","text":"<p>In some organizations the lifecycle of different parts may be managed separately. For example, you may have one repo to manage Definitions and Assignments separately from Exemptions. Changing <code>pacOwnerId</code> is not effective.</p> <p>EPAC only manages items with a directory in the <code>Definitions</code> folder. Therefore, you can use the same <code>pacOwnerId</code> from two repos and remove the folders to separate them. In this example:</p> <ul> <li>Repo1: <code>Definitions</code> contains <code>policyDefinitions</code>, <code>policySetDefinitions</code> and <code>policyAssignments</code> folders.</li> <li>Repo2: <code>Definitions</code> contains <code>policyExemptions</code> folder.</li> </ul> <p>Policy resource that would be defined in the folder. It is important to remove the folders. GitHub repos remove empty folder automatically.</p> <p>If you have an empty folder or a folder with a file extension not recognized by EPAC, EPAC will delete any item which the folder could define from your environment.</p>"},{"location":"settings-desired-state/#use-case-3-multiple-teams-with-shared-responsibility","title":"Use Case 3: Multiple Teams with Shared Responsibility","text":"<p>In a shared responsibility model multiple teams manage the same tenant(s) at the same scope. Additionally, a variant of this use case is well suited to what previously was called <code>brownfield</code> which needs to preserve Policy resources deployed prior to EPAC. The following diagram shows two EPAC solutions managing the same root (tenant). Other Policy as Code solutions can also participate if the solution sets <code>metadata.pacOwnerId</code>.</p> <p></p> <p>For standard behavior where each repo manages, no additional entries in <code>global-settings.jsonc</code> are necessary since the default strategy <code>full</code> is the default. <code>full</code> deletes any Policy resources without a <code>pacOwnerId</code>; however, id does not delete Policy resources with a different <code>pacOwnerId</code>. test</p>"},{"location":"settings-desired-state/#use-case-4-multiple-teams-in-a-hierarchical-organization","title":"Use Case 4:  Multiple Teams in a Hierarchical Organization","text":"<p>The hierarchical model allows a central team to manage the commonality while giving parts of the organization a capability to further restrict resources with Policies. This is a common scenario in multi-national corporations with additional jurisdictional requirements (e.g., data sovereignty, local regulations, ...).</p> <p>This is managed identical to use case 3.</p> <p>Caution</p> <p>Previously, it was possible for a solution at a child scope to inherit Policy definitions form EPAC-A. This feature has been removed in v10.0.0 since it was not possible to manage the dependencies between Policy and Policy Set definitions and Policy Assignments correctly.</p> <p>To replicate the previous functionality, copy/replicate the custom Policy and Policy Set definitions files from EPAC-A repo to EPAC-C repo.</p> <p></p>"},{"location":"settings-desired-state/#use-case-5-exclude-some-scopes-and-policy-resources","title":"Use Case 5: Exclude some Scopes and Policy Resources","text":"<p>In rare cases you may need to exclude individual child scopes, or Policy resources from management by an EPAC solution.</p>"},{"location":"settings-desired-state/#child-scope-not-managed-and-not-subject-to-these-policies","title":"Child Scope not Managed and Not Subject to these Policies","text":"<p>Child scope is managed by some other means. The use of a EPAC development Management Group under the same root is such an example. Another example is a child scope managed by a different organization not subject to the root scope Policies.</p> <p>You use <code>globalNotScopes</code> to exclude a child scope from management by EPAC. The following example excludes the <code>childScope</code> from management by EPAC. See also Global Settings</p> <pre><code>    \"globalNotScopes\": {\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code\"\n        ]\n    },\n</code></pre>"},{"location":"settings-desired-state/#child-scopes-not-managed-by-any-epac-repo-but-subject-to-these-policies","title":"Child Scopes not Managed by any EPAC repo but Subject to these Policies","text":"<p>This happens when EPAC <code>strategy</code> is <code>full</code> and some child scopes contain Policy resources not managed by an EPAC repo (delivered through some other deployment method). You can exclude them based on:</p> <ul> <li>Scopes (Management Groups, subscriptions and Resource Groups) through <code>desiredState.excludedScopes</code></li> <li>Policy Definitions through <code>desiredState.excludedPolicyDefinitions</code></li> <li>Policy Set Definitions through <code>desiredState.excludedPolicySetDefinitions</code></li> <li>Policy Assignments through <code>desiredState.excludedPolicyAssignments</code></li> </ul> <p>You can exclude any combination of <code>excludedScopes</code>, <code>excludedPolicyDefinitions</code>, <code>excludedPolicySetDefinitions</code> and <code>excludedPolicyAssignments</code>. Any of the strings can contain simple wild cards.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n    \"keepDfcSecurityAssignments\": false,\n    \"doNotDisableDeprecatedPolicies\": false,\n    \"excludedScopes\": [ // Management Groups, Subscriptions, Resource Groups\n        \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code/childScope\"\n    ],\n    \"excludedPolicyDefinitions\": [\n        \"/subscriptions/*/providers/Microsoft.Authorization/policyDefinitions/childScope-policy\"\n    ],\n    \"excludedPolicySetDefinitions\": [\n        \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code/providers/Microsoft.Authorization/policySetDefinitions/pattern-policy-set-*\",\n        \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code/providers/Microsoft.Authorization/policySetDefinitions/one-of-policy-set\"\n    ],\n    \"excludedPolicyAssignments\": [\n        \"/subscriptions/*/providers/Microsoft.Authorization/policyAssignments/my-*\"\n    ]\n}\n</code></pre> <p></p>"},{"location":"settings-dfc-assignments/","title":"Managing Defender for Cloud Assignments","text":"<p>Defender for Cloud (DFC) is a suite of Azure Security Center (ASC) capabilities that helps you prevent, detect, and respond to threats. It provides you with integration of Microsoft's threat protection technology and expertise. For more information, see Azure Defender for Cloud.</p>"},{"location":"settings-dfc-assignments/#defender-for-cloud-assignments-for-defender-plans","title":"Defender for Cloud Assignments for Defender Plans","text":"<p>Note</p> <p>DfC manages the Policy Assignments for Defender Plans when a plan is enabled. EPAC v9.0.0 and later never manage these Policy Assignments.</p> <p></p>"},{"location":"settings-dfc-assignments/#defender-for-cloud-security-policy-assignments","title":"Defender for Cloud Security Policy Assignments","text":"<p>DfC automatically assigns <code>Microsoft cloud security benchmark</code> to each new subscription enrolled in Defender for Cloud. It also adds compliance Assignments when a Compliance framework is enabled, such as NIST 800-53 Rev 5, NIST 800-171, etc.</p> <p>These Assignments are enabled/created at the subscription level or at management group level. Since these Policies are set to to <code>Audit</code> and you will want to set many of them to <code>Deny</code>, it is recommended that EPAC manages them at the management group level. This is the default behavior.</p> <p>Warning</p> <p>EPAC behavior for Security Policy is controlled by the <code>keepDfcSecurityAssignments</code> in <code>desiredState</code>.</p> <ul> <li>If set to <code>true</code> or <code>strategy</code> is <code>ownedOnly</code>, EPAC will not remove \"DfC Security Policy Assignments\" created by Defender for Cloud.</li> <li>If omitted or set to <code>false</code> and <code>strategy</code> is <code>full</code>, EPAC will remove \"DfC Security Policy Assignments\" created by Defender for Cloud.</li> </ul> <pre><code>\"desiredState\": {\n    \"keepDfcSecurityAssignments\": true\n}\n</code></pre> <p></p>"},{"location":"settings-global-setting-file/","title":"Global Settings","text":""},{"location":"settings-global-setting-file/#overview","title":"Overview","text":"<p><code>global-settings.jsonc</code> has following sections explained below:</p> <ul> <li><code>telemetryOptOut</code> if set to true disables the collection of usage date for the EPAC repo. The default is false. See Usage Tracking for more information.</li> <li><code>pacOwnerId</code> uniquely identifies deployments from a specific repo. We recommend using a GUID.</li> <li><code>pacEnvironments</code> defines the EPAC environments.</li> </ul>"},{"location":"settings-global-setting-file/#example-with-required-elements","title":"Example with Required Elements","text":"<pre><code>{\n    \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/global-settings-schema.json\",\n    \"pacOwnerId\": \"00000000-0000-0000-0000-000000000000\",\n    \"pacEnvironments\": [\n        {\n            \"pacSelector\": \"epac-dev\",\n            \"cloud\": \"AzureCloud\",\n            \"tenantId\": \"00000000-0000-0000-0000-000000000000\",\n            \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/mg-Epac-Dev\",\n            \"desiredState\": {\n                \"strategy\": \"full\",\n                \"keepDfcSecurityAssignments\": false,\n                \"doNotDisableDeprecatedPolicies\": false\n            },\n            \"skipResourceValidationForExemptions\": false,\n            \"managedIdentityLocation\": \"eastus2\"\n        },\n        {\n            \"pacSelector\": \"tenant\",\n            \"cloud\": \"AzureCloud\",\n            \"tenantId\": \"00000000-0000-0000-0000-000000000000\",\n            \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/mg-Enterprise\",\n            \"desiredState\": {\n                \"strategy\": \"full\",\n                \"keepDfcSecurityAssignments\": false,\n                \"doNotDisableDeprecatedPolicies\": false\n            },\n            \"skipResourceValidationForExemptions\": false,\n            \"managedIdentityLocation\": \"eastus2\",\n            \"globalNotScopes\": [\n                \"/providers/Microsoft.Management/managementGroups/mg-Epac-Dev\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"settings-global-setting-file/#json-schema","title":"JSON Schema","text":"<p>The GitHub repo contains a JSON schema which can be used in tools such as VS Code to provide code completion.</p> <p>To utilize the schema add a <code>$schema</code> tag to the JSON file.</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/global-settings-schema.json\"\n}\n</code></pre>"},{"location":"settings-global-setting-file/#opt-out-of-telemetry-data-collection-telemetryoptout","title":"Opt out of telemetry data collection <code>telemetryOptOut</code>","text":"<p>Starting with v8.0.0, Enterprise Policy as Code (EPAC) is tracking the usage using Customer Usage Attribution (PID). See Usage Tracking for more information on opt out. Default is false.</p> <pre><code>\"telemetryOptOut\": true,\n</code></pre>"},{"location":"settings-global-setting-file/#uniquely-identify-deployments-with-pacownerid","title":"Uniquely identify deployments with <code>pacOwnerId</code>","text":"<p><code>pacOwnerId</code> is required for desired state handling to distinguish Policy resources deployed via this EPAC repo, legacy technology, another EPAC repo, or another Policy as Code solution.</p>"},{"location":"settings-global-setting-file/#define-epac-environments-in-pacenvironments","title":"Define EPAC Environments in <code>pacEnvironments</code>","text":"<p>EPAC has a concept of an environment identified by a string (unique per repository) called <code>pacSelector</code>. The <code>pacSelector</code> is just a name. We highly recommend to call the Policy development environment <code>epac-dev</code>, you can name the EPAC prod environments in a way which makes sense to you in your environment. We use <code>tenant</code>, in our samples and documentation. These names are used and therefore must match:</p> <ul> <li>Defining the association (<code>pacEnvironments</code>) of an EPAC environment.</li> <li>Script parameter when executing different deployment stages in a CI/CD pipeline or semi-automated deployment targeting a specific EPAC environments.</li> <li><code>scopes</code>, <code>notScopes</code>, <code>additionalRoleAssignments</code>, <code>managedIdentityLocations</code>, and <code>userAssignedIdentity</code> definitions in Policy Assignment JSON files.</li> </ul> <p><code>pacEnvironments</code> entries associate:</p> <ul> <li>Required:</li> <li><code>pacSelector</code>: the logical name of the EPAC environment.</li> <li><code>cloud</code>: select cloud environments.</li> <li><code>tenantId</code>: enables multi-tenant scenarios.</li> <li><code>deploymentRootScope</code>: the deployment scope for Policy and Policy Set definitions. Policy Assignments can only defined at this scope and child scopes (recursive). The format for each scope level is as follows:<ul> <li>Management Group: <code>/providers/Microsoft.Management/managementGroups/{management-group-name}</code></li> <li>Subscription: <code>/subscriptions/{subscription-id}</code></li> <li>Resource Group: <code>/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}</code></li> </ul> </li> <li><code>desiredState</code>:  defines the desired state strategy.<ul> <li><code>strategy</code>: see Desired State Strategy.</li> <li><code>keepDfcSecurityAssignments</code>: see Managing Defender for Cloud Policy Assignments.</li> <li><code>doNotDisableDeprecatedPolicies</code>: Automatically set deprecated policies' policy effect to \"Disabled\". This setting can be used to override that behavior by setting it to <code>true</code>. Default is <code>false</code>.</li> </ul> </li> <li><code>managedIdentityLocation</code>: see DeployIfNotExists and Modify Policy Assignments need <code>managedIdentityLocation</code></li> <li>Optional:</li> <li><code>globalNotScopes</code>: see Excluding scopes for all Assignments with <code>globalNotScopes</code></li> <li><code>skipResourceValidationForExemptions</code>: disables checking the resource existence for Policy Exemptions. Default is false. This can be useful if you have a massive amount of exemptions and the validation is taking too long.</li> <li><code>deployedBy</code>: populates the <code>metadata</code> fields. It defaults to <code>epac/$pacOwnerId/$pacSelector</code>. We recommend to use the default.<ul> <li>Policy Definitions, Policy Set Definitions and Policy Exemptions - <code>metadata.deployedBy</code>.</li> <li>Policy Assignments - <code>metadata.assignedBy</code> since Azure Portal displays it as 'Assigned by'.</li> <li>Role Assignments - add the value to the <code>description</code> field since Role assignments do not contain <code>metadata</code>.</li> </ul> </li> <li><code>managedTenant</code>: Used when the <code>pacEnvironment</code> is in a lighthouse managed tenant, see this example It must contain:<ul> <li><code>managingTenantId</code> - The tenantId of the managing tenant.</li> <li><code>managingTenantRootScope</code> - An array of all subscriptions that will need <code>additionalRoleAssignments</code> deployed to them.</li> </ul> </li> <li><code>defaultContext</code>: In rare cases (typically only when deploying to a lighthouse managed tenant) the default context (Get-azContext) of a user/SPN running a plan will be set to a subscription where that user/SPN does not have sufficient privileges.  Some checks have been built in so that in some cases when this happens EPAC is able to fix the context issue.  When it is not, a <code>defaultContext</code> subscription name must be provided.  This can be any subscription within the <code>deploymentRootScope</code>.</li> </ul>"},{"location":"settings-global-setting-file/#deployifnotexists-and-modify-policy-assignments-need-managedidentitylocation","title":"DeployIfNotExists and Modify Policy Assignments need <code>managedIdentityLocation</code>","text":"<p>Policies with <code>Modify</code> and <code>DeployIfNotExists</code> effects require a Managed Identity for the remediation task. This section defines the location of the managed identity. It is often created in the tenant's primary location. This location can be overridden in the Policy Assignment files. The star in the example matches all <code>pacEnvironmentSelector</code> values.</p> <pre><code>    \"managedIdentityLocation\": {\n        \"*\": \"eastus2\"\n    },\n</code></pre>"},{"location":"settings-global-setting-file/#excluding-scopes-for-all-assignments-with-globalnotscopes","title":"Excluding scopes for all Assignments with <code>globalNotScopes</code>","text":"<p>The arrays can have the following entries:</p> Scope type Example <code>managementGroups</code> <code>\"/providers/Microsoft.Management/managementGroups/myManagementGroupId\"</code> <code>subscriptions</code> <code>\"/subscriptions/00000000-0000-0000-000000000000\"</code> <code>resourceGroups</code> <code>\"/subscriptions/00000000-0000-0000-000000000000/resourceGroups/myResourceGroup\"</code> Resource group pattern <code>\"/subscriptions/*/resourceGroups/myResourceGroupPattern*\"</code> <p>Resource Group patterns allow us to exclude \"special\" managed Resource Groups. The exclusion is not dynamic. It is calculated when the deployment scripts execute.</p> <pre><code>\"globalNotScopes\": [\n    \"/subscriptions/*/resourceGroups/synapseworkspace-managedrg-*\",\n    \"/subscriptions/*/resourceGroups/managed-rg-*\",\n    \"/providers/Microsoft.Management/managementGroups/mg-personal-subscriptions\",\n    \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code\"\n]\n</code></pre>"},{"location":"settings-global-setting-file/#example-for-lighthouse-manged-tenant","title":"Example for Lighthouse Manged Tenant","text":"<pre><code>{\n    \"pacOwnerId\": \"00000000-0000-0000-0000-000000000000\",\n    \"pacEnvironments\": [\n        {\n            \"pacSelector\": \"epac-dev\",\n            \"cloud\": \"AzureCloud\",\n            \"tenantId\": \"11000000-0000-0000-0000-000000000000\",\n            \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/PAC-Heinrich-Dev\",\n            \"desiredState\": {\n                \"strategy\": \"full\",\n                \"keepDfcSecurityAssignments\": false,\n                \"doNotDisableDeprecatedPolicies\": false\n            },\n            \"skipResourceValidationForExemptions\": false,\n            \"mangedIdentityLocation\": \"eastus2\"\n        },\n        {\n            \"pacSelector\": \"tenant\",\n            \"cloud\": \"AzureCloud\",\n            \"tenantId\": \"11000000-0000-0000-0000-000000000000\",\n            \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/Contoso-Root\",\n            \"desiredState\": {\n                \"strategy\": \"full\",\n                \"keepDfcSecurityAssignments\": false,\n                \"doNotDisableDeprecatedPolicies\": false\n            },\n            \"globalNotScopes\": [\n                \"/providers/Microsoft.Management/managementGroups/PAC-Heinrich-Dev\"\n            ],\n            \"skipResourceValidationForExemptions\": false,\n            \"managedIdentityLocation\": \"eastus2\"\n        },\n        {\n            \"pacSelector\": \"lightHouseTenant\",\n            \"cloud\": \"AzureCloud\",\n            \"tenantId\": \"22000000-0000-0000-0000-000000000000\",\n            \"managingTenant\": {\n                \"managingTenantId\": \"11000000-0000-0000-0000-000000000000\",\n                \"managingTenantRootScope\": [\n                    \"/subscriptions/00000000-0000-0000-0000-000000000000\",\n                    \"/subscriptions/00000000-0000-0000-0000-000000000000\"\n                ]\n            },\n            \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/Contoso-Root\",\n            \"desiredState\": {\n                \"strategy\": \"full\",\n                \"keepDfcSecurityAssignments\": false,\n                \"doNotDisableDeprecatedPolicies\": false\n            },\n            \"skipResourceValidationForExemptions\": false,\n            \"managedIdentityLocation\": \"eastus2\"\n        }\n    ]\n}\n</code></pre>"},{"location":"start-changes/","title":"Changes in v10.0.0","text":"<p>Caution</p> <p>Read the breaking changes below carefully and adjust your environment accordingly.</p>"},{"location":"start-changes/#breaking-changes-in-v1000","title":"Breaking Changes in v10.0.0","text":""},{"location":"start-changes/#changes-in-globalsettingsjsonc","title":"Changes in <code>globalSettings.jsonc</code>","text":"<p>Warning</p> <p>We heavily reworked the <code>globalSettings.jsonc</code> file. You will need to update the file.</p> <p>Deprecated top-level elements:</p> <ul> <li><code>globalNotScopes</code> is moved as an array into each <code>pacEnvironment</code>. If you used the <code>*</code> notation, copy the array into each <code>pacEnvironment</code>.</li> <li><code>managedIdentityLocations</code> is moved as a string into each <code>pacEnvironment</code>. If you used the <code>*</code> notation, copy the string into each <code>pacEnvironment</code>.</li> </ul> <p>Per <code>pacEnvironment</code>:</p> <ul> <li>New required <code>managedIdentityLocation</code> string.</li> <li>New optional <code>globalNotScopes</code> array.</li> <li>New optional <code>deployedBy</code> string. We recommend against using it and let EPAC generate the default value.</li> <li><code>inheritedDefinitionsScopes</code> has been deprecated and removed. Please review the revised use case Use Case 4:  Multiple Teams in a Hierarchical Organization.</li> <li><code>cloud</code> is now a required field. Previously, it was optional and defaulted to <code>AzureCloud</code>.</li> <li><code>desiredState</code> is now a required field.</li> </ul> <p><code>desiredState</code> has newly required fields:</p> <ul> <li><code>strategy</code>: was optional and defaulted to <code>full</code>. We recommend setting it to <code>full</code>, except during a short transition period to EPAC. This was changed to require an explicit decision.</li> <li><code>keepDfcSecurityAssignments</code>: replaces <code>deleteDfcSecurityAssignments</code>  which defaulted to <code>true</code>. We highly recommend setting it to <code>false</code> and assigning any desired Initiative at management groups.</li> </ul> <p><code>desiredState</code> fields <code>deleteExpiredExemptions</code> and <code>deleteOrphanedExemptions</code> are deprecated and removed. Exemptions with an <code>`unknownOwner</code> are only deleted when <code>strategy</code> is <code>full</code>. </p> <p>The recommended <code>desiredState</code> settings are now as follows:</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n    \"keepDfcSecurityAssignments\": false\n}\n</code></pre> <p>During a brief transition from a pre-EPAC to an EPAC usage, you can set <code>desiredState</code> to <code>ownedOnly</code> to keep existing Policy resources. This is not recommended for long-term use.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"ownedOnly\",\n    \"keepDfcSecurityAssignments\": false\n}\n</code></pre>"},{"location":"start-changes/#desired-state-handling-for-policy-assignments","title":"Desired State Handling for Policy Assignments","text":"<p>Field <code>desiredState.includeResourceGroups</code> is deprecated/removed. This change removes all Policy Assignments in resource groups not defined in the Policy Assignment definition files. To keep the previous behavior, add a pattern <code>\"/subscriptions/*/resourceGroups/*\" to the</code>\"excludedScopes\"` array.</p> <p>Desired state handling for Policy Assignments related to Defender for Cloud (DfC) automatic Policy Assignments has been reworked. DfC creates two different types of Policy Assignments at the subscription level.</p> <ul> <li>Security and Compliance Initiatives, such as, Microsoft cloud security benchmark, NIST SP 800-53, ... EPAC calls them DfC Security Policy Assignments. The PAC owner is listed as <code>managedByDfcSecurityPolicies</code></li> <li>Initiatives assigned by DfC when enrolling a subscription in a DfC workload protection plan. These assignments contain Policies required by DfC for finding vulnerabilities and threats. EPAC calls them DfC Defender Plan Policy Assignments. The PAC owner is listed as <code>managedByDfcDefenderPlans</code>.</li> </ul> <p>Previously, the <code>desiredState.deleteDfcSecurityAssignments</code> field (default <code>true</code>) and was used to control the deletion of DfC both types of auto-assigned Policy Assignments at the subscription level when the <code>desiredState.strategy</code> was <code>\"full\"</code>. The new field is <code>keepDfcSecurityAssignments</code>.</p> <ul> <li>This behavior is now independent of the <code>desiredState.strategy</code> field. Therefore it will  delete DfC Security Policy Assignments at the subscription level, unless <code>desiredState.keepDfcSecurityAssignments</code> is set to <code>true</code>.</li> <li>Assignments created by DfC when enrolling a subscription in a DfC workload protection plan are never deleted starting with v10.0.0</li> </ul>"},{"location":"start-changes/#build-policydocumentationps1-ignores-policies-with-effect-manual","title":"Build-PolicyDocumentation.ps1 ignores Policies with effect <code>Manual</code>","text":"<ul> <li><code>Build-PolicyDocumentation.ps1</code> skips Policies with effect <code>Manual</code>. Using the switch parameter <code>-IncludeManualPolicies</code> overrides this behavior reverting to the previous behavior.</li> </ul>"},{"location":"start-changes/#deprecated-operational-scripts","title":"Deprecated Operational Scripts","text":"<p>EPAC had multiple operational scripts which are not Policy as Code related. These scripts are now deprecated and will be removed in a future release. The scripts have been moved to a new folder <code>Scripts-Deprecated</code> and are not included in the PowerShell module. The scripts are:</p> <ul> <li><code>Get-AzMissingTags.ps1</code></li> <li><code>Get-AzResourceTags.ps1</code></li> <li><code>Get-AzStorageNetworkConfig.ps1</code></li> <li><code>Get-AzUserRoleAssignments.ps1</code></li> </ul> <p>We recommend that you use Azure Governance Visualizer (AzGovViz) for these tasks.</p>"},{"location":"start-changes/#enhancements-planned-for-v1010","title":"Enhancements planned for v10.1.0","text":"<ul> <li>Script to update CSV effect/parameter files preserving extra columns: https://github.com/Azure/enterprise-azure-policy-as-code/issues/498.</li> <li>Automatically disable deprecated Policies: https://github.com/Azure/enterprise-azure-policy-as-code/issues/516.</li> <li>Cleanup/Improve <code>Export-PolicyResources</code> and <code>Build-PolicyDocumentation</code> scripts: https://github.com/Azure/enterprise-azure-policy-as-code/issues/517 and https://github.com/Azure/enterprise-azure-policy-as-code/issues/498.</li> <li>Simplify exemption creation by allowing lists of scopes and Policy definitions: https://github.com/Azure/enterprise-azure-policy-as-code/issues/518.</li> <li>Clarify SPNs, Least Privilege, and environments for CI/CD: https://github.com/Azure/enterprise-azure-policy-as-code/issues/519.</li> </ul>"},{"location":"start-changes/#enhancements-in-v1000","title":"Enhancements in v10.0.0","text":""},{"location":"start-changes/#support-for-cloud-environments-with-limited-support-for-resource-graph-queries","title":"Support for Cloud environments with limited Support for Resource Graph Queries","text":"<ul> <li>US Government Cloud handling of Role Assignments</li> <li>China cloud (21v) handling for Role Assignments and Exemptions.</li> </ul>"},{"location":"start-changes/#cross-tenant-lighthouse-support-for-role-assignments","title":"Cross-tenant (Lighthouse) support for Role Assignments.","text":"<p>Cross-tenant Role Assignments are now supported. This is used if log collection is directed to a resource (Log Analytics, Event Hub. Storage) in a management tenant (e.g, Azure Lighthouse, and similar constructs) which requires you to use <code>additionalRoleAssignments</code> in the Policy Assignment file.</p>"},{"location":"start-changes/#simplified-exemption-definitions","title":"Simplified Exemption definitions","text":"<p>Exemptions can be specified with a <code>policyDefinitionName</code> or <code>policyDefinitionId</code> instead of a <code>policyAssignmentId</code> and <code>policyDefinitionReferenceId</code>. EPAC creates as many Exemptions as needed to cover all Policy Assignments occurrences of the specified Policy - Support for Microsoft release flow in addition to GitHub flow (documentation and starter kit) - Schema updated to latest draft specification</p>"},{"location":"start-changes/#description-field-in-role-assignments","title":"Description field in Role Assignments","text":"<p>The <code>description</code> field in Role Assignments is now populated with the Policy Assignment Id, reason and <code>deployedBy</code> value. This is useful for tracking the source of the Role Assignment.</p> <p>Reasons is one of:</p> <ul> <li><code>Role Assignment required by Policy</code> - Policy definition(s) specify the required Role Definition Ids.</li> <li><code>additional Role Assignment</code> - from filed \"additionalRoleAssignments\" in the Policy Assignment file.</li> <li><code>additional cross tenant Role Assignment</code> - from filed \"additionalRoleAssignments\" with <code>crossTenant</code> set to <code>$true</code> in the Policy Assignment file.</li> </ul>"},{"location":"start-changes/#metadata-deployedby-and-assignedby","title":"Metadata <code>deployedBy</code> and <code>assignedBy</code>","text":"<p><code>deployedBy</code> is a new field in the global settings per pacEnvironment. It is used to populate the <code>metadata</code> fields in the deployed resources.</p> <p>If not defined in global settings, EPAC generates it as <code>\"epac/{{pacOwnerId}}/{{pacSelector}}\"</code>. You can override this value in the Policy resource file by entering it directly to the respective <code>metadata</code> field. It is added to the deployed resources as follows:</p> <ul> <li>Policy Definitions, Policy Set Definitions and Policy Exemptions - <code>metadata.deployedBy</code>.</li> <li>Policy Assignments - <code>metadata.assignedBy</code> since Azure Portal displays it as 'Assigned by'.</li> <li>Role Assignments - add the value to the <code>description</code> field.</li> </ul>"},{"location":"start-changes/#schema-updates","title":"Schema Updates","text":"<p>Updating JSON schema to the latest specification 2020-12.</p>"},{"location":"start-changes/#documentation-updates","title":"Documentation Updates","text":"<p>Reorganized the documentation to make it easier to find information. Added a new section on how to use the starter kit and how to use the Microsoft release flow.</p>"},{"location":"start-extracting-policy-resources/","title":"Start by Extracting existing Policy Resources","text":"<p>Script <code>Export-AzPolicyResources</code> (Operations) extracts existing Policies, Policy Sets, and Policy Assignments and Exemptions outputting them in EPAC format into subfolders in folder <code>$outputFolders/Definitions</code>. The subfolders are <code>policyDefinitions</code>, <code>policySetDefinitions</code>, <code>policyAssignments</code> and <code>policyExemptions</code>.</p> <p>Tip</p> <p>The script collects information on ownership of the Policy resources into a CSV file. You can analyze this file to assist in the transition to EPAC.</p> <p>The scripts creates a <code>Definitions</code> folder in the <code>OutputFolder</code> with the subfolders for <code>policyDefinitions</code>, <code>policySetDefinitions</code>, <code>policyAssignments</code> and <code>policyExemptions</code>.</p> <p>Tip</p> <p>In a new EPAC instance these folders can be directly copied to the <code>Definitions</code> folder enabling an initial transition from a pre-EPAC to EPAC environment.</p> <ul> <li><code>policyDefinitions</code>, <code>policySetDefinitions</code> have a subfolder based on <code>metadata.category</code>. If the definition has no <code>category</code> <code>metadata</code> they are put in a subfolder labeled <code>Unknown Category</code>. Duplicates when including child scopes are sorted into the <code>Duplicates</code> folder. Creates one file per Policy and Policy Set.</li> <li><code>policyAssignments</code> creates one file per unique assigned Policy or Policy Set spanning multiple Assignments.</li> <li><code>policyExemptions</code> creates one subfolder per EPAC environment</li> </ul> <p>Warning</p> <p>The script deletes the <code>$outputFolders/Definitions</code> folder before creating a new set of files. In interactive mode it will ask for confirmation before deleting the directory.</p>"},{"location":"start-extracting-policy-resources/#use-case-1-interactive-or-non-interactive-single-tenant","title":"Use case 1: Interactive or non-interactive single tenant","text":"<p><code>-Mode 'export'</code> is used to collect the Policy resources and generate the definitions file. This works for <code>-Interactive $true</code> (the default) to extract Policy resources in single tenant or multi-tenant scenario, prompting the user to logon to each new tenant in turn.</p> <p>It also works for a single tenant scenario for an automated collection, assuming that the Service Principal has read permissions for every EPAC Environment in <code>global-settings.jsonc</code>.</p> <pre><code>Export-AzPolicyResources\n</code></pre> <p>The parameter <code>-InputPacSelector</code> can be used to only extract Policy resources for one of the EPAC environments.</p>"},{"location":"start-extracting-policy-resources/#use-case-2-non-interactive-multi-tenant","title":"Use case 2: Non-interactive multi-tenant","text":"<p>While this pattern can be used for interactive users too, it is most often used for multi-tenant non-interactive usage since an SPN is bound to a tenant and the script cannot prompt for new credentials.</p> <p>The solution is a multi-step process:</p> <p>Collect the raw information for very EPAC environment after logging into each EPAC environment (tenant):</p> <pre><code>Connect-AzAccount -Environment $cloud -Tenant $tenantIdForDev\nExport-AzPolicyResources -Interactive $false -Mode collectRawFile -InputPacSelector 'epac-dev'\n\nConnect-AzAccount -Environment $cloud -Tenant $tenantId1\nExport-AzPolicyResources -Interactive $false -Mode collectRawFile -InputPacSelector 'tenant1'\n\nConnect-AzAccount -Environment $cloud -Tenant $tenantId2\nExport-AzPolicyResources -Interactive $false -Mode collectRawFile -InputPacSelector 'tenant2'\n</code></pre> <p>Next, the collected raw files are used to generate the same output:</p> <pre><code>Export-AzPolicyResources -Interactive $false -Mode exportFromRawFiles\n</code></pre>"},{"location":"start-extracting-policy-resources/#caveats","title":"Caveats","text":"<p>The extractions are subject to the following assumptions and caveats:</p> <ul> <li>Assumes Policies and Policy Sets with the same name define the same properties independent of scope and EPAC environment.</li> <li>Ignores Assignments auto-assigned by Defender for Cloud. This behavior can be overridden with the switch parameter <code>-IncludeAutoAssigned</code>.</li> </ul>"},{"location":"start-forking-github-repo/","title":"Forking the GitHub Repo - an Alternate Installation Method","text":"<p>Instead of installing <code>EnterprisePolicyAsCode</code> from the PowerShell Gallery, you can clone the GitHub repository and use the scripts described below to install the script source code. This is useful, if your organization has overly restrictive policies on installing PowerShell modules from the PowerShell Gallery. It can also be useful if you want to contribute EPAC source code to the project.</p>"},{"location":"start-forking-github-repo/#setting-up-your-repo","title":"Setting up your Repo","text":"<ol> <li>Initial setup<ol> <li>Create <code>MyForkRepo</code> as a fork of GitHub repo.</li> <li>Create <code>MyWorkingRepo</code>.         1. Clone your forked repo.         1. Create a new repo from the clone (do not fork <code>MyForkRepo</code>)</li> </ol> </li> <li>Work in <code>MyWorkingRepo</code><ol> <li>While the root folder is not modified as part of the Sync-Repo process, it is recommended that this part of the file structure not be used for storage of any custom material other than new folders.<ol> <li>You may add additional folders, such as a folder for your own operational scripts.</li> </ol> </li> <li>Use only folders <code>Definitions</code> and <code>Pipeline</code>, except when working on fixes to be contributed back to GitHub.<ol> <li>Review the <code>Sync-Repo</code> documentation for additional information on the folders which are destroyed and recreated as part of the version upgrade process for additional insight on this topic.</li> </ol> </li> </ol> </li> </ol>"},{"location":"start-forking-github-repo/#syncing-latest-version-from-github-repo","title":"Syncing latest Version from GitHub repo","text":"<ol> <li>Fetch changes from GitHub to <code>MyForkRepo</code>.</li> <li>Execute <code>Sync-Repo</code> to copy files from <code>MyForkRepo</code> to <code>MyWorkingRepo</code> feature branch.</li> <li>PR <code>MyWorkingRepo</code> feature branch.</li> </ol>"},{"location":"start-forking-github-repo/#contribute-to-github","title":"Contribute to GitHub","text":"<ol> <li>Execute <code>Sync-Repo</code> to copy files from <code>MyWorkingRepo</code> to <code>MyForkRepo</code> feature branch.<ol> <li>Be sure not to copy internal references within your files during your sync to MyForkRepo.</li> </ol> </li> <li>PR <code>MyForkRepo</code> feature branch.</li> <li>PR changes in your fork (<code>MyForkRepo</code>) to GitHub.</li> <li>GitHub maintainers will review the PR.</li> </ol>"},{"location":"start-forking-github-repo/#sync-repops1","title":"Sync-Repo.ps1","text":"<p>The repo contains script to synchronize directories in both directions: <code>Sync-Repo.ps1</code>. It only works if you do not modify:</p> <ul> <li><code>Docs</code>, <code>Scripts</code>, <code>Module</code> and <code>StarterKit</code> directories</li> <li><code>*.md</code>, <code>*.ps1</code>, <code>*.yml</code>, and <code>LICENSE</code> files in repo root directory</li> </ul> Parameter Required Explanation <code>SourceDirectory</code> Required Directory with the source (forked repo) <code>DestinationDirectory</code> Required Directory with the destination (your private repo) <code>SuppressDeleteFiles</code> Optional Switch parameter to suppress deleting files in <code>$destinationDirectory</code> tree"},{"location":"start-forking-github-repo/#process-for-development-maintainers-only","title":"Process for Development (Maintainers Only)","text":"<p>Warning</p> <p>This is Intended for maintainers only: It documents how to move internal EPAC development (ADO) to production (GitHub).</p> <p>Assumptions:</p> <ul> <li>You have completed PR in for EPAC Development in ADO and are ready to release to public GitHub EPAC project.</li> <li>You are using known local path names for EPAC Development repo and GitHub repo, for example:</li> <li>EPAC Development local repo: <code>C:\\GitRepoClones\\epac-development</code></li> <li>EPAC GitHub local repo: <code>C:\\GitRepoClones\\enterprise-azure-policy-as-code</code></li> </ul>"},{"location":"start-forking-github-repo/#sync-fromghps1-and-sync-toghps1","title":"Sync-FromGH.ps1 and Sync-ToGH.ps1","text":"<p>Sync-FromGH.ps1 and Sync-ToGH.ps1 are a wrapper around Sync-Repo.ps1 used by the EPAC maintainers to simplify syncing their development repo <code>epac-development</code> and the GitHub repo <code>enterprise-azure-policy-as-code</code>.</p>"},{"location":"start-forking-github-repo/#syncing-latest-version-from-github-repo-to-epac-development-repo","title":"Syncing latest Version from GitHub repo to <code>epac-development</code> repo","text":"<ul> <li>Create a branch in <code>epac-development repo</code> named <code>feature/sync-from-github</code></li> <li>Sync GitHub enterprise main branch with <code>Sync-FromGH.ps1</code></li> <li>Verify changes</li> <li>Commit changes to <code>epac-development</code> branch <code>feature/sync-from-github</code></li> <li>Test and PR <code>epac-development</code> branch <code>feature/sync-from-github</code> to <code>epac-development</code> main branch</li> <li>Delete <code>epac-development</code> branch <code>feature/sync-from-github</code></li> </ul>"},{"location":"start-forking-github-repo/#development-in-epac-development-repo","title":"Development in <code>epac-development</code> repo","text":"<ul> <li>Each developer owns</li> <li>Management Group in the <code>epac-development</code> tenant</li> <li>Folder in the <code>Test</code> folder, <code>pipeline.yml</code>, and <code>Set-EnvironmentVariables.ps1</code> in the <code>epac-development</code> repo</li> <li><code>Set-EnvironmentVariables.ps1</code> in your Test folder is used to set the environment variables for your <code>Test</code> folders. This is required for interactively using the scripts.</li> <li>Create a feature branch in <code>epac-development</code> repo named <code>feature/&lt;your-name&gt;/&lt;github-issue-number&gt;</code></li> <li>Make and test changes</li> <li>PR <code>epac-development</code> branch <code>feature/&lt;your-name&gt;/&lt;github-issue-number&gt;</code> to <code>epac-development</code> main branch</li> <li>Validate \"prod\" build in <code>epac-development</code> tenant</li> <li>Delete branch <code>feature/&lt;your-name&gt;/&lt;github-issue-number&gt;</code></li> <li>Fetch main branch from <code>epac-development</code> repo</li> <li>Create a branch in GitHub <code>enterprise-policy-as-code</code> repo from the issue you working on.</li> <li>Fetch that branch in VS Code</li> <li>Sync <code>enterprise-policy-as-code</code> repo with <code>Sync-Repo.ps1</code> from epac-development repo</li> <li>Commit changes to <code>enterprise-policy-as-code</code> branch created above</li> <li>validate the changes for conflicts</li> <li>PR <code>enterprise-policy-as-code</code> branch created above to the main branch</li> <li>Create a release in GitHub <code>enterprise-policy-as-code</code> repo</li> <li>Delete the branch in <code>enterprise-policy-as-code</code> repo</li> </ul>"},{"location":"start-forking-github-repo/#code-promotion-process","title":"Code Promotion Process","text":"<p>Tip</p> <p>Modify mkdocs.yml after adding markdown files to the Docs folder.</p> <p>This process is used to promote code from the EPAC Development repo to the EPAC GitHub repo.</p> <ol> <li>Create a branch in GitHub (https://github.com/Azure/enterprise-azure-policy-as-code).</li> <li>Update local production repo with content from local development repo. In local VS code repo for EPAC GitHub, open terminal:    <code>PS C:\\GitRepoClones\\enterprise-azure-policy-as-code&gt; .\\Sync-ToGH.ps1</code>.</li> <li>Commit changes and sync.</li> <li>Go to https://github.com/Azure/enterprise-azure-policy-as-code, go to <code>Compare and Pull Request</code></li> <li>Add PR title and create PR.</li> <li>Complete GitHub Review and merge PR process.</li> <li>Delete branch from GitHub.</li> <li>Go to VSCode for EPAC Release (GitHub) (<code>C:\\GitRepoClones\\enterprise-azure-policy-as-code</code>)</li> <li>In Source Control, select main branch. Move to Remotes and fetch, then sync changes.</li> <li>Move to branches, delete local branch (force delete may be required).</li> <li>Open terminal, type <code>git remote prune origin</code></li> <li>Verify that the documents have been published.</li> </ol>"},{"location":"start-forking-github-repo/#github-releases","title":"GitHub Releases","text":"<p>This is a guide on how to release a new version of the project - including automated PowerShell module publish. It is used by the EPAC maintainers only.</p> <ol> <li>Navigate to https://github.com/Azure/enterprise-azure-policy-as-code/releases</li> <li>Click on Draft a new release</li> <li>Click on Choose a tag and enter in the new release version - it should be in the format \"v(major).(minor).(build)\" i.e. v7.3.4 Don't forget the v</li> <li>When prompted click on Create new tag: vX.X.X on publish</li> <li>Add a release title - you can just use the new version number.</li> <li>Click on Generate release notes to pull all the notes in from related PRs. Update if necessary.</li> <li>Click Publish Release</li> <li>Click on Actions</li> <li>Verify that a workflow run has started with the same name as the release.</li> <li>Verify that the module has been published to the PowerShell Gallery.</li> </ol>"},{"location":"start-hydration-kit/","title":"EPAC Hydration Kit","text":"<p>Warning</p> <p>The EPAC Hydration Kit is in beta, please report bugs as they are found.</p> <p>Warning</p> <p>Known Bug: Use of the Branching Flow option release will require manual updates to the NONPROD assignments, and a manual creation of an exclusion in the PROD scope if that NONPROD management group is part of the PROD hierarchy, such as in the CAF3 SANDBOX Management Group.</p> <p>The EPAC Hydration Script is intended to accelerate onboarding of EPAC as a policy management solution. It contains a growing number of common functions that are undertaken during deployment, and some functions that can be used later as needed. The exact list of available commands can be retrieved by running the PowerShell script below.</p> <pre><code>Get-Command -module EnterprisePolicyAsCode | Where-Object {$_.Name -like \"*-Hydration*\"}\n</code></pre>"},{"location":"start-hydration-kit/#pre-requisites","title":"Pre-requisites","text":"<p>The following software is required to use the EPAC Hydration Kit:</p> <ol> <li>PowerShell Core</li> <li>Az Module for PowerShell</li> <li>EnterprisePolicyAsCode Module for PowerShell</li> <li>Accounts with access to Azure for testing as outlined in Deployment Scripts Section of the Index</li> <li>The Hydration Kit must be run by a Principal with the following abilities:<ol> <li>All rights needed for the EPAC Dev account in the link above</li> <li>The ability to create Management Groups at the Tenant Root Level</li> </ol> </li> </ol> <p>Note</p> <p>If you plan to only read and deploy at a lower management group, you can replace Tenant Root with that Management Group for the purposes of this documentation.</p>"},{"location":"start-hydration-kit/#deployment","title":"Deployment","text":"<p>The code below is an example of how the new set of functions can be leveraged to create a new EPAC deployment capable of managing policy via command line locally. This downloads the repo, places the StarterKit in the current Repo, and cleans up the rest of the download so that the module can be used. Script based deployment is not currently supported.</p> <pre><code>$myRepoRoot = \"/Path/To/Local/Root/Of/New/Repo\"\nSet-Location $myRepoRoot\ngit clone https://github.com/Azure/enterprise-azure-policy-as-code.git ./temp\nCopy-Item ./temp/StarterKit ./StarterKit -Recurse\nInstall-Module EnterprisePolicyAsCode\nImport-Module EnterprisePolicyAsCode\nRemove-Item ./temp -Force -Recurse\nConnect-AzAccount\nInstall-HydrationEpac\n</code></pre> <p>This will present you with a series of questions that will generate an output file that should be kept handy for reuse (some errors can be recovered by rerunning the process, such as access errors) and also for troubleshooting purposes. These answers will be used to generate a new EPAC repo from the root of the directory that the command is executed from.</p> <p>The next recommended step is to test your deployment against the epac-dev Management Group hierarchy that was created as part of the deployment process.</p> <pre><code>Build-DeploymentPlans  -PacEnvironmentSelector epac-dev\nDeploy-PolicyPlan -PacEnvironmentSelector epac-dev\nDeploy-RolesPlan -PacEnvironmentSelector epac-dev\n</code></pre> <p>While these represent early steps to managing EPAC via pipeline, they are not the last steps.</p>"},{"location":"start-hydration-kit/#next-steps","title":"Next Steps","text":"<ul> <li>This content must also be uploaded  to a repo and configure the repo to leverage the newly deployed pipelines.</li> <li>Start the Enterprise Policy as Code (EPAC) Implementation outlines the steps needed to complete the installation</li> <li>The current process completes the steps prior to Populate your Definitions folder with Policy resources</li> <li>The current process completes most of the steps in Populate your Definitions folder with Policy resources, see Current Functionality below for details.</li> <li>CI/CD Overview provides insight into how to continue with the configuration of your DevOps Platform for ongoing EPAC CI/CD deployment, which is the next major area of focus.</li> </ul>"},{"location":"start-hydration-kit/#current-functionality","title":"Current Functionality","text":"<p>There are a growing number of deployment features that are available for rapid deployment.</p> <ol> <li>Create Definitions directory structure</li> <li>Populate pipelines from StarterKit</li> <li>Apply PCI-DSS v4 policySet from StarterKit for auditing purposes</li> <li>Apply NIST 800-53 and Microsoft ASB policySets from StarterKit for auditing purposes</li> <li>Existing Policy Assignments<ol> <li>Export for use in new repo</li> <li>Update with epac-dev pacSelector<ol> <li>Is resilient against non-management group assignments that cannot be replicated in epac-dev</li> </ol> </li> <li>Import into Definitions directory structure for processing in EPAC deployments</li> </ol> </li> <li>Create duplicate of Tenant Intermediate Group Hierarchy with prefix and/or suffix for epac-dev processing</li> </ol>"},{"location":"start-hydration-kit/#upcoming-roadmap-items","title":"Upcoming Roadmap Items","text":"<ol> <li>Automatically consolidate regulatory auditing assignments if multiple are chosen from StarterKit</li> <li>Automatically consolidate all policySet csv sources into a main file, and update the referenced filename, as part of import from StarterKit.</li> <li>Repair bug regarding release branch flow<ol> <li>Build logic to process multiple child nodes</li> <li>Build logic to process multiple non-epac pacSelectors</li> <li>Build logic to differentiate new pacSelector and new childNode</li> <li>Build logic to generate new pacSelectors and childNodes</li> </ol> </li> <li>Add Sync-AlzPolicies<ol> <li>Build logic to gather and confirm resources that are needed to support this</li> </ol> </li> <li>Add remaining StarterKit content to import choices</li> <li>Configure Roles and User Managed Identities/Service Principals</li> <li>Configure Github repo/actions/environments/secrets/settings</li> <li>Configure ADO repo/pipelines/environments/secrets/settings</li> </ol>"},{"location":"start-implementing/","title":"Start the Enterprise Policy as Code (EPAC) Implementation","text":"<p>Caution</p> <p>EPAC is a true desired state deployment technology. It takes possession of all Policy Resources at the <code>deploymentRootScope</code> and its children. It will delete any Policy resources not defined in the EPAC repo. This behavior can be modified as documented in the desired state strategy page.</p>"},{"location":"start-implementing/#getting-started","title":"Getting Started","text":"<p>The following steps are required to implement Enterprise Policy as Code (EPAC) in your environment:</p> <ol> <li>Understand concepts and environments.</li> <li>Determine desired state strategy.</li> <li>How to handle Defender for Cloud Policy Assignments.</li> <li>Design your CI/CD process.</li> <li>Install Powershell and EPAC.</li> <li>Create your <code>Definitions</code> folder and subfolders.</li> <li>Populate <code>global-settings.jsonc</code> with your environment settings and desired state strategy.</li> <li>Populate your Definitions folder with Policy resources. (For a folder structure example, please see StarterKit/Definitions-Common)<ul> <li>[Option A:] Extract existing Policy resources from your Azure environment.</li> <li>[Option B:] Integrate Azure Landing Zones (ALZ).</li> <li>[Option C:] Utilize the hydration kit and <code>StarterKit</code> content.</li> <li>[Optional] Create custom Policy definitions.</li> <li>[Optional] Create custom Policy Set definitions.</li> <li>Create your Policy Assignments.</li> <li>[Optional] Manage Policy Exemptions.</li> </ul> </li> <li>Implement your CI/CD pipelines.</li> <li>Operate your environment with the provided operational scripts.</li> </ol>"},{"location":"start-implementing/#epac-concepts-and-environments","title":"EPAC Concepts and Environments","text":"<p>Important</p> <p>Understanding the concepts and  environments is crucial. Do not proceed until you completely understand this section.</p>"},{"location":"start-implementing/#epac-concepts","title":"EPAC Concepts","text":"<p>Like any other code development project (including Infrastructure as Code - IaC), developing Policy requires a development area to test and validate the Policy resources before deploying them to production. EPAC is no different.</p> <ul> <li>EPAC's nonprod environment is used to develop and test Policy resources. In most cases you will need one management group hierarchy to simulate EPAC production tenants and management groups for development and testing of Policy definitions and Policy Assignments.</li> <li>EPAC's prod environment will govern all other IaC environments (e.g., sandbox, development, integration, test/qa, pre-prod, prod, ...) and tenants. This can be confusing. We will use EPAC environments and IaC environments to disambiguate the environments.</li> </ul>"},{"location":"start-implementing/#defining-epac-environments","title":"Defining EPAC Environments","text":"<p>EPAC defines environments identified by a string (unique per repository) called <code>pacSelector</code>. <code>pacEnvironments</code> in <code>global-settings.jsonc</code> environment map a <code>pacSelector</code> to the following settings:</p> <ul> <li><code>cloud</code> - to select commercial or sovereign cloud environments.</li> <li><code>tenantId</code> - enables multi-tenant scenarios.</li> <li><code>rootDefinitionScope</code> - scope for custom Policy and Policy Set definition deployment.</li> <li>[Optional] Define the following items:</li> <li><code>globalNotScopes</code> - used to exclude scopes from Policy Assignments.</li> <li><code>managedIdentityLocation</code> - used for the location for created Managed Identities.</li> <li><code>desiredState</code> - desired state strategy and details for Policy resources.</li> <li><code>managedTenant</code> - used for environments that are in a lighthouse managed tenant.</li> </ul> <p>These associations are stored in global-settings.jsonc in an element called <code>pacEnvironments</code>.</p>"},{"location":"start-implementing/#multi-tenant-support","title":"Multi-Tenant Support","text":"<p>EPAC supports single and multi-tenant deployments from a single source. In most cases you should have a fully or partially isolated area for Policy development and testing, such as a Management Group. An entire tenant can be used; however, it is not necessary since EPAC has sophisticated partitioning capabilities.  EPAC also supports deployments to managed (Lighthouse) tenants and is able to deploy cross tenant role assignments to projected subscriptions in order to facilitate writing data back to the managing tenant (e.g. diagnostic settings).</p>"},{"location":"start-implementing/#example-management-group-structure-and-epac-environments","title":"Example Management Group Structure and EPAC Environments","text":"<p>Assuming that you have a single tenant with a management group hierarchy as follows (with additional levels of management groups not shown for brevity):</p> <ul> <li>Root tenant (always present)</li> <li>mg-Enterprise (pseudo root)<ul> <li>mg-Identity</li> <li>mg-NonProd</li> <li>mg-Dev</li> <li>mg-Sandbox</li> <li>...</li> <li>mg-Prod</li> <li>mg-LandingZones</li> <li>mg-PCI</li> <li>mg-EpacDev (EPAC development)</li> </ul> </li> </ul> <p>You should create a development testing structure for EPAC in <code>mg-EpacDev</code>. We have found little need for a separate management group for EPAC testing, but you can create one mirroring the structure of <code>mg-EpacDev</code>.</p> <ul> <li>Root tenant (always present)</li> <li>mg-Enterprise (pseudo root) :arrow_right: EPAC environment <code>\"tenant\"</code><ul> <li>mg-Identity</li> <li>mg-NonProd</li> <li>mg-Sandbox</li> <li>mg-Prod</li> <li>mg-PCI</li> <li>mg-EpacDev (EPAC development) :arrow_right: EPAC environment <code>\"epac-dev\"</code></li> <li>mg-EpacDev-Identity</li> <li>mg-EpacDev-NonProd<ul> <li>mg-EpacDev-Dev</li> <li>mg-EpacDev-Sandbox</li> </ul> </li> <li>mg-EpacDev-Prod<ul> <li>mg-EpacDev-LandingZones</li> <li>mg-EpacDev-PCI</li> </ul> </li> </ul> </li> </ul> <p>The simplest <code>global-settings.jsonc</code> for the above structure is:</p> <pre><code>{\n    \"$schema\": \"https://raw.githubusercontent.com/Azure/enterprise-azure-policy-as-code/main/Schemas/global-settings-schema.json\",\n    \"pacOwnerId\": \"{{guid}}\",\n    \"pacEnvironments\": [\n        {\n            \"pacSelector\": \"epac-dev\",\n            \"cloud\": \"AzureCloud\",\n            \"tenantId\": \"{{tenant-id}}\",\n            \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/mg-Epac-Dev\"\n        },\n        {\n            \"pacSelector\": \"tenant\",\n            \"cloud\": \"AzureCloud\",\n            \"tenantId\": \"{{tenant-id}}\",\n            \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/mg-Enterprise\"\n        }\n    ]\n}\n</code></pre> <p>For assignment files, this is a top level property on the assignment's root node:</p> <pre><code>\"nodeName\": \"/root\",\n\"epacCloudEnvironments\": [\n    \"AzureChinaCloud\"\n],\n</code></pre>"},{"location":"start-implementing/#install-powershell-and-epac","title":"Install Powershell and EPAC","text":"<p>EPAC can be installed in two ways:</p> <ul> <li>Install the <code>EnterprisePolicyAsCode</code> module from the PowerShell marketplace. This is the recommended approach documented here.</li> <li>Copy the source code from an EPAC GitHub repository fork. The process is described in Forking the GitHub Repo - an Alternate Installation Method page.</li> </ul>"},{"location":"start-implementing/#installation-steps","title":"Installation Steps","text":"<ol> <li>Install PowerShell 7.4 or later.</li> <li>Install the Az PowerShell modules and Enterprise Policy as Code module.</li> </ol> <pre><code>    Install-Module Az -Scope CurrentUser\n    Install-Module EnterprisePolicyAsCode -Scope CurrentUser\n</code></pre> <p>Many scripts use parameters for input and output folders. They default to the current directory. We recommend that you do one of the following approaches instead of accepting the default to prevent your files being created in the wrong location:     - [Preferred] Set the environment variables <code>PAC_DEFINITIONS_FOLDER</code>, <code>PAC_OUTPUT_FOLDER</code>, and <code>PAC_INPUT_FOLDER</code>.     - [Alternative] Use the script parameters <code>-DefinitionsRootFolder</code>, <code>-OutputFolder</code>, and <code>-InputFolder</code>.</p>"},{"location":"start-implementing/#definitions-folder-structure","title":"<code>Definitions</code> Folder Structure","text":"<ul> <li>Define the Azure environment(s) in file <code>global-settings.jsonc</code></li> <li>Create custom Policies (optional) in folder <code>policyDefinitions</code></li> <li>Create custom Policy Sets (optional) in folder <code>policySetDefinitions</code></li> <li>Define the Policy Assignments in folder <code>policyAssignments</code></li> <li>Define the Policy Exemptions (optional) in folder <code>policyExemptions</code></li> <li>Define Documentation in folder <code>policyDocumentations</code></li> </ul>"},{"location":"start-implementing/#create-the-definitions-folder","title":"Create the Definitions folder","text":"<p>Create a new EPAC <code>Definitions</code> folder with a number of subfolder and a <code>global-settings.jsonc</code> file.</p> <p>Tip</p> <p>For a folder structure example, please see StarterKit/Definitions-Common.</p> <pre><code>New-HydrationDefinitionFolder -DefinitionsRootFolder Definitions\n</code></pre>"},{"location":"start-implementing/#cloud-environment-with-unsupportedmissing-policy-definitions","title":"Cloud Environment with Unsupported/Missing Policy Definitions","text":"<p>In some multi-tenant implementations, not all policies, policy sets, and/or assignments will function in all tenants, usually due to either built-in policies that don't exist in some tenant types or unavailable resource providers.  In order to facilitate multi-tenant deployments in these scenarios, utilize the <code>epacCloudEnvironments</code> property to specify which cloud type a specific file should be considered in.  For example in order to have a policy definition deployed only to epacEnvironments that are China cloud tenants, add a metadata property like this to that definition (or definitionSet) file:</p> <pre><code>\"metadata\": {\n  \"epacCloudEnvironments\": [\n    \"AzureChinaCloud\"\n  ]\n},\n</code></pre>"},{"location":"start-implementing/#debug-epac-issues","title":"Debug EPAC issues","text":"<p>Should you encounter issues with the expected behavior of EPAC, try the following:</p> <ul> <li>Run the scripts interactively.</li> <li>Debug the scripts in VS Code.</li> <li>Ask for help by raising a GitHub Issue</li> </ul>"}]}